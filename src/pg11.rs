/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 3;
pub const __clang_minor__: u32 = 8;
pub const __clang_patchlevel__: u32 = 0;
pub const __clang_version__: &'static [u8; 31usize] = b"3.8.0 (tags/RELEASE_380/final)\0";
pub const __GNUC_MINOR__: u32 = 2;
pub const __GNUC_PATCHLEVEL__: u32 = 1;
pub const __GNUC__: u32 = 4;
pub const __GXX_ABI_VERSION: u32 = 1002;
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__: &'static [u8; 54usize] =
    b"4.2.1 Compatible Clang 3.8.0 (tags/RELEASE_380/final)\0";
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __GXX_RTTI: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _LP64: u32 = 1;
pub const __LP64__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u64 = 9223372036854775807;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 2147483647;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: i32 = -1;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
pub const __INTPTR_MAX__: u64 = 9223372036854775807;
pub const __UINTPTR_MAX__: i32 = -1;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 8;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 8;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
pub const __SIZEOF_SIZE_T__: u32 = 8;
pub const __SIZEOF_WCHAR_T__: u32 = 4;
pub const __SIZEOF_WINT_T__: u32 = 4;
pub const __SIZEOF_INT128__: u32 = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __PTRDIFF_WIDTH__: u32 = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __INTPTR_WIDTH__: u32 = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __SIZE_WIDTH__: u32 = 64;
pub const __WCHAR_WIDTH__: u32 = 32;
pub const __WINT_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINTPTR_WIDTH__: u32 = 64;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 18;
pub const __LDBL_DECIMAL_DIG__: u32 = 21;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 64;
pub const __LDBL_MAX_10_EXP__: u32 = 4932;
pub const __LDBL_MAX_EXP__: u32 = 16384;
pub const __LDBL_MIN_10_EXP__: i32 = -4931;
pub const __LDBL_MIN_EXP__: i32 = -16381;
pub const __POINTER_WIDTH__: u32 = 64;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __GNUC_STDC_INLINE__: u32 = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __NO_INLINE__: u32 = 1;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 21;
pub const __amd64__: u32 = 1;
pub const __amd64: u32 = 1;
pub const __x86_64: u32 = 1;
pub const __x86_64__: u32 = 1;
pub const __k8: u32 = 1;
pub const __k8__: u32 = 1;
pub const __tune_k8__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const unix: u32 = 1;
pub const __unix: u32 = 1;
pub const __unix__: u32 = 1;
pub const linux: u32 = 1;
pub const __linux: u32 = 1;
pub const __linux__: u32 = 1;
pub const __gnu_linux__: u32 = 1;
pub const __ELF__: u32 = 1;
pub const __STDC__: u32 = 1;
pub const __STDC_HOSTED__: u32 = 1;
pub const __STDC_VERSION__: u32 = 201112;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
pub type Oid = ::std::os::raw::c_uint;
pub type pg_int64 = ::std::os::raw::c_long;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub __wait_terminated: wait__bindgen_ty_1,
    pub __wait_stopped: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_termsig: ::std::os::raw::c_uint,
        __w_coredump: ::std::os::raw::c_uint,
        __w_retcode: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __w_termsig: u32 = unsafe { ::std::mem::transmute(__w_termsig) };
            __w_termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __w_coredump: u32 = unsafe { ::std::mem::transmute(__w_coredump) };
            __w_coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_retcode: u32 = unsafe { ::std::mem::transmute(__w_retcode) };
            __w_retcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_stopval: ::std::os::raw::c_uint,
        __w_stopsig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let __w_stopval: u32 = unsafe { ::std::mem::transmute(__w_stopval) };
            __w_stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_stopsig: u32 = unsafe { ::std::mem::transmute(__w_stopsig) };
            __w_stopsig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_terminated as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_terminated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_stopped as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_stopped)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __WAIT_STATUS {
    pub __uptr: *mut wait,
    pub __iptr: *mut ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__uptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__uptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__iptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__iptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__kind as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__futex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__total_seq as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__wakeup_seq as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__woken_seq as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__mutex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__nwaiters as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__broadcast_seq as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__broadcast_seq)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__readers_wakeup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer_wakeup as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers_queued
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_writers_queued
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__rwelision as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad1 as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__flags)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: __locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct max_align_t {
    pub __max_align_ll: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __max_align_ld: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<max_align_t>())).__max_align_ll as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__max_align_ll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<max_align_t>())).__max_align_ld as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__max_align_ld)
        )
    );
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: __locale_t,
    ) -> __locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: __locale_t) -> __locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: __locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: __locale_t) -> __locale_t;
}
extern "C" {
    pub fn gettext(__msgid: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __dgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dcgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __dcgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngettext(
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dngettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dcngettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn textdomain(__domainname: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bindtextdomain(
        __domainname: *const ::std::os::raw::c_char,
        __dirname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bind_textdomain_codeset(
        __domainname: *const ::std::os::raw::c_char,
        __codeset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type Pointer = *mut ::std::os::raw::c_char;
pub type int8 = ::std::os::raw::c_schar;
pub type int16 = ::std::os::raw::c_short;
pub type int32 = ::std::os::raw::c_int;
pub type uint8 = ::std::os::raw::c_uchar;
pub type uint16 = ::std::os::raw::c_ushort;
pub type uint32 = ::std::os::raw::c_uint;
pub type bits8 = uint8;
pub type bits16 = uint16;
pub type bits32 = uint32;
pub type int64 = ::std::os::raw::c_long;
pub type uint64 = ::std::os::raw::c_ulong;
pub type int128 = i128;
pub type uint128 = u128;
pub type Size = usize;
pub type Index = ::std::os::raw::c_uint;
pub type Offset = ::std::os::raw::c_int;
pub type float4 = f32;
pub type float8 = f64;
pub type regproc = Oid;
pub type RegProcedure = regproc;
pub type TransactionId = uint32;
pub type LocalTransactionId = uint32;
pub type SubTransactionId = uint32;
pub type MultiXactId = TransactionId;
pub type MultiXactOffset = uint32;
pub type CommandId = uint32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IntArray {
    pub indx: [::std::os::raw::c_int; 6usize],
}
#[test]
fn bindgen_test_layout_IntArray() {
    assert_eq!(
        ::std::mem::size_of::<IntArray>(),
        24usize,
        concat!("Size of: ", stringify!(IntArray))
    );
    assert_eq!(
        ::std::mem::align_of::<IntArray>(),
        4usize,
        concat!("Alignment of ", stringify!(IntArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntArray>())).indx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IntArray),
            "::",
            stringify!(indx)
        )
    );
}
#[repr(C)]
pub struct varlena {
    pub vl_len_: [::std::os::raw::c_char; 4usize],
    pub vl_dat: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varlena() {
    assert_eq!(
        ::std::mem::size_of::<varlena>(),
        4usize,
        concat!("Size of: ", stringify!(varlena))
    );
    assert_eq!(
        ::std::mem::align_of::<varlena>(),
        1usize,
        concat!("Alignment of ", stringify!(varlena))
    );
}
pub type bytea = varlena;
pub type text = varlena;
pub type BpChar = varlena;
pub type VarChar = varlena;
#[repr(C)]
pub struct int2vector {
    pub vl_len_: int32,
    pub ndim: ::std::os::raw::c_int,
    pub dataoffset: int32,
    pub elemtype: Oid,
    pub dim1: ::std::os::raw::c_int,
    pub lbound1: ::std::os::raw::c_int,
    pub values: __IncompleteArrayField<int16>,
}
#[test]
fn bindgen_test_layout_int2vector() {
    assert_eq!(
        ::std::mem::size_of::<int2vector>(),
        24usize,
        concat!("Size of: ", stringify!(int2vector))
    );
    assert_eq!(
        ::std::mem::align_of::<int2vector>(),
        4usize,
        concat!("Alignment of ", stringify!(int2vector))
    );
}
#[repr(C)]
pub struct oidvector {
    pub vl_len_: int32,
    pub ndim: ::std::os::raw::c_int,
    pub dataoffset: int32,
    pub elemtype: Oid,
    pub dim1: ::std::os::raw::c_int,
    pub lbound1: ::std::os::raw::c_int,
    pub values: __IncompleteArrayField<Oid>,
}
#[test]
fn bindgen_test_layout_oidvector() {
    assert_eq!(
        ::std::mem::size_of::<oidvector>(),
        24usize,
        concat!("Size of: ", stringify!(oidvector))
    );
    assert_eq!(
        ::std::mem::align_of::<oidvector>(),
        4usize,
        concat!("Alignment of ", stringify!(oidvector))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nameData {
    pub data: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_nameData() {
    assert_eq!(
        ::std::mem::size_of::<nameData>(),
        64usize,
        concat!("Size of: ", stringify!(nameData))
    );
    assert_eq!(
        ::std::mem::align_of::<nameData>(),
        1usize,
        concat!("Alignment of ", stringify!(nameData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nameData>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nameData),
            "::",
            stringify!(data)
        )
    );
}
pub type NameData = nameData;
pub type Name = *mut NameData;
extern "C" {
    pub fn ExceptionalCondition(
        conditionName: *const ::std::os::raw::c_char,
        errorType: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        lineNumber: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PGAlignedBlock {
    pub data: [::std::os::raw::c_char; 8192usize],
    pub force_align_d: f64,
    pub force_align_i64: int64,
    _bindgen_union_align: [u64; 1024usize],
}
#[test]
fn bindgen_test_layout_PGAlignedBlock() {
    assert_eq!(
        ::std::mem::size_of::<PGAlignedBlock>(),
        8192usize,
        concat!("Size of: ", stringify!(PGAlignedBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<PGAlignedBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(PGAlignedBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGAlignedBlock>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PGAlignedBlock),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGAlignedBlock>())).force_align_d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PGAlignedBlock),
            "::",
            stringify!(force_align_d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGAlignedBlock>())).force_align_i64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PGAlignedBlock),
            "::",
            stringify!(force_align_i64)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PGAlignedXLogBlock {
    pub data: [::std::os::raw::c_char; 8192usize],
    pub force_align_d: f64,
    pub force_align_i64: int64,
    _bindgen_union_align: [u64; 1024usize],
}
#[test]
fn bindgen_test_layout_PGAlignedXLogBlock() {
    assert_eq!(
        ::std::mem::size_of::<PGAlignedXLogBlock>(),
        8192usize,
        concat!("Size of: ", stringify!(PGAlignedXLogBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<PGAlignedXLogBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(PGAlignedXLogBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGAlignedXLogBlock>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PGAlignedXLogBlock),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PGAlignedXLogBlock>())).force_align_d as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PGAlignedXLogBlock),
            "::",
            stringify!(force_align_d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PGAlignedXLogBlock>())).force_align_i64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PGAlignedXLogBlock),
            "::",
            stringify!(force_align_i64)
        )
    );
}
pub const _ISupper: _bindgen_ty_1 = 256;
pub const _ISlower: _bindgen_ty_1 = 512;
pub const _ISalpha: _bindgen_ty_1 = 1024;
pub const _ISdigit: _bindgen_ty_1 = 2048;
pub const _ISxdigit: _bindgen_ty_1 = 4096;
pub const _ISspace: _bindgen_ty_1 = 8192;
pub const _ISprint: _bindgen_ty_1 = 16384;
pub const _ISgraph: _bindgen_ty_1 = 32768;
pub const _ISblank: _bindgen_ty_1 = 1;
pub const _IScntrl: _bindgen_ty_1 = 2;
pub const _ISpunct: _bindgen_ty_1 = 4;
pub const _ISalnum: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = u32;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_2 = 1;
pub const MSG_PEEK: _bindgen_ty_2 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_2 = 4;
pub const MSG_CTRUNC: _bindgen_ty_2 = 8;
pub const MSG_PROXY: _bindgen_ty_2 = 16;
pub const MSG_TRUNC: _bindgen_ty_2 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_2 = 64;
pub const MSG_EOR: _bindgen_ty_2 = 128;
pub const MSG_WAITALL: _bindgen_ty_2 = 256;
pub const MSG_FIN: _bindgen_ty_2 = 512;
pub const MSG_SYN: _bindgen_ty_2 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_2 = 2048;
pub const MSG_RST: _bindgen_ty_2 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_2 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_2 = 16384;
pub const MSG_MORE: _bindgen_ty_2 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_2 = 65536;
pub const MSG_FASTOPEN: _bindgen_ty_2 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_2 = 1073741824;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_4 = 0;
pub const SHUT_WR: _bindgen_ty_4 = 1;
pub const SHUT_RDWR: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_5 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_5 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_5 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_5 = 4;
pub const IPPROTO_TCP: _bindgen_ty_5 = 6;
pub const IPPROTO_EGP: _bindgen_ty_5 = 8;
pub const IPPROTO_PUP: _bindgen_ty_5 = 12;
pub const IPPROTO_UDP: _bindgen_ty_5 = 17;
pub const IPPROTO_IDP: _bindgen_ty_5 = 22;
pub const IPPROTO_TP: _bindgen_ty_5 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_5 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_5 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_5 = 46;
pub const IPPROTO_GRE: _bindgen_ty_5 = 47;
pub const IPPROTO_ESP: _bindgen_ty_5 = 50;
pub const IPPROTO_AH: _bindgen_ty_5 = 51;
pub const IPPROTO_MTP: _bindgen_ty_5 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_5 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_5 = 98;
pub const IPPROTO_PIM: _bindgen_ty_5 = 103;
pub const IPPROTO_COMP: _bindgen_ty_5 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_5 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_5 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_5 = 137;
pub const IPPROTO_RAW: _bindgen_ty_5 = 255;
pub const IPPROTO_MAX: _bindgen_ty_5 = 256;
pub type _bindgen_ty_5 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_6 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_6 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_6 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_6 = 58;
pub const IPPROTO_NONE: _bindgen_ty_6 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_6 = 60;
pub const IPPROTO_MH: _bindgen_ty_6 = 135;
pub type _bindgen_ty_6 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_7 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_7 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_7 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_7 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_7 = 15;
pub const IPPORT_FTP: _bindgen_ty_7 = 21;
pub const IPPORT_TELNET: _bindgen_ty_7 = 23;
pub const IPPORT_SMTP: _bindgen_ty_7 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_7 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_7 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_7 = 43;
pub const IPPORT_MTP: _bindgen_ty_7 = 57;
pub const IPPORT_TFTP: _bindgen_ty_7 = 69;
pub const IPPORT_RJE: _bindgen_ty_7 = 77;
pub const IPPORT_FINGER: _bindgen_ty_7 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_7 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_7 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_7 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_7 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_7 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_7 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_7 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_7 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_7 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_7 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_7 = 5000;
pub type _bindgen_ty_7 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}in6addr_any"]
    pub static in6addr_any: in6_addr;
}
extern "C" {
    #[link_name = "\u{1}in6addr_loopback"]
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    assert_eq!(
        ::std::mem::size_of::<rpcent>(),
        24usize,
        concat!("Size of: ", stringify!(rpcent))
    );
    assert_eq!(
        ::std::mem::align_of::<rpcent>(),
        8usize,
        concat!("Alignment of ", stringify!(rpcent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_number)
        )
    );
}
extern "C" {
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(
        __number: ::std::os::raw::c_int,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcent_r(
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    assert_eq!(
        ::std::mem::size_of::<netent>(),
        24usize,
        concat!("Size of: ", stringify!(netent))
    );
    assert_eq!(
        ::std::mem::align_of::<netent>(),
        8usize,
        concat!("Alignment of ", stringify!(netent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_net as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_net)
        )
    );
}
extern "C" {
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn herror(__str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    assert_eq!(
        ::std::mem::size_of::<hostent>(),
        32usize,
        concat!("Size of: ", stringify!(hostent))
    );
    assert_eq!(
        ::std::mem::align_of::<hostent>(),
        8usize,
        concat!("Alignment of ", stringify!(hostent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addr_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addr_list)
        )
    );
}
extern "C" {
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(
        __net: u32,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    assert_eq!(
        ::std::mem::size_of::<servent>(),
        32usize,
        concat!("Size of: ", stringify!(servent))
    );
    assert_eq!(
        ::std::mem::align_of::<servent>(),
        8usize,
        concat!("Alignment of ", stringify!(servent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_proto as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_proto)
        )
    );
}
extern "C" {
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent_r(
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyname_r(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyport_r(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    assert_eq!(
        ::std::mem::size_of::<protoent>(),
        24usize,
        concat!("Size of: ", stringify!(protoent))
    );
    assert_eq!(
        ::std::mem::align_of::<protoent>(),
        8usize,
        concat!("Alignment of ", stringify!(protoent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_proto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_proto)
        )
    );
}
extern "C" {
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(
        __proto: ::std::os::raw::c_int,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innetgr(
        __netgroup: *const ::std::os::raw::c_char,
        __host: *const ::std::os::raw::c_char,
        __user: *const ::std::os::raw::c_char,
        __domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent_r(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok_af(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        __raddr: u32,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_af(
        __raddr: *const ::std::os::raw::c_void,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        __alport: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    assert_eq!(
        ::std::mem::size_of::<addrinfo>(),
        48usize,
        concat!("Size of: ", stringify!(addrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<addrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(addrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_family as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_socktype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_socktype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_protocol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addrlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_canonname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_canonname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_next)
        )
    );
}
extern "C" {
    pub fn getaddrinfo(
        __name: *const ::std::os::raw::c_char,
        __service: *const ::std::os::raw::c_char,
        __req: *const addrinfo,
        __pai: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getnameinfo(
        __sa: *const sockaddr,
        __salen: socklen_t,
        __host: *mut ::std::os::raw::c_char,
        __hostlen: socklen_t,
        __serv: *mut ::std::os::raw::c_char,
        __servlen: socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_passwd() {
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        48usize,
        concat!("Size of: ", stringify!(passwd))
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gecos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gecos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_dir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_shell as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_shell)
        )
    );
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn fgetpwent(__stream: *mut FILE) -> *mut passwd;
}
extern "C" {
    pub fn putpwent(__p: *const passwd, __f: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid(__uid: __uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(__name: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwent_r(
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid_r(
        __uid: __uid_t,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        __name: *const ::std::os::raw::c_char,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpwent_r(
        __stream: *mut FILE,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type pgsocket = ::std::os::raw::c_int;
extern "C" {
    pub fn pg_set_noblock(sock: pgsocket) -> bool;
}
extern "C" {
    pub fn pg_set_block(sock: pgsocket) -> bool;
}
extern "C" {
    pub fn has_drive_prefix(filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn first_dir_separator(
        filename: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn last_dir_separator(
        filename: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn first_path_var_separator(
        pathlist: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn join_path_components(
        ret_path: *mut ::std::os::raw::c_char,
        head: *const ::std::os::raw::c_char,
        tail: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn canonicalize_path(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn make_native_path(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn cleanup_path(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn path_contains_parent_reference(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn path_is_relative_and_below_cwd(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn path_is_prefix_of_path(
        path1: *const ::std::os::raw::c_char,
        path2: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn make_absolute_path(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_progname(argv0: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_share_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_etc_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_include_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_pkginclude_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_includeserver_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_lib_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_pkglib_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_locale_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_doc_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_html_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_man_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_home_path(ret_path: *mut ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn get_parent_directory(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn pgfnames(path: *const ::std::os::raw::c_char) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pgfnames_cleanup(filenames: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn set_pglocale_pgservice(
        argv0: *const ::std::os::raw::c_char,
        app: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn find_my_exec(
        argv0: *const ::std::os::raw::c_char,
        retpath: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_other_exec(
        argv0: *const ::std::os::raw::c_char,
        target: *const ::std::os::raw::c_char,
        versionstr: *const ::std::os::raw::c_char,
        retpath: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_usleep(microsec: ::std::os::raw::c_long);
}
extern "C" {
    pub fn pg_strcasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_strncasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_toupper(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn pg_tolower(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn pg_ascii_toupper(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn pg_ascii_tolower(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn simple_prompt(
        prompt: *const ::std::os::raw::c_char,
        destination: *mut ::std::os::raw::c_char,
        destlen: usize,
        echo: bool,
    );
}
extern "C" {
    pub fn pclose_check(stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtree(path: *const ::std::os::raw::c_char, rmtopdir: bool) -> bool;
}
extern "C" {
    pub fn pg_erand48(xseed: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn pg_lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pg_jrand48(xseed: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pg_srand48(seed: ::std::os::raw::c_long);
}
extern "C" {
    pub fn fls(mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeereid(
        sock: ::std::os::raw::c_int,
        uid: *mut uid_t,
        gid: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlcat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        siz: usize,
    ) -> usize;
}
extern "C" {
    pub fn strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        siz: usize,
    ) -> usize;
}
extern "C" {
    pub fn pqStrerror(
        errnum: ::std::os::raw::c_int,
        strerrbuf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pqGetpwuid(
        uid: uid_t,
        resultbuf: *mut passwd,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
        result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pqGethostbyname(
        name: *const ::std::os::raw::c_char,
        resultbuf: *mut hostent,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
        result: *mut *mut hostent,
        herrno: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_qsort(
        base: *mut ::std::os::raw::c_void,
        nel: usize,
        elsize: usize,
        cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn pg_qsort_strcmp(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type qsort_arg_comparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qsort_arg(
        base: *mut ::std::os::raw::c_void,
        nel: usize,
        elsize: usize,
        cmp: qsort_arg_comparator,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pg_get_encoding_from_locale(
        ctype: *const ::std::os::raw::c_char,
        write_message: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_net_ntop(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_void,
        bits: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_strong_random(buf: *mut ::std::os::raw::c_void, len: usize) -> bool;
}
extern "C" {
    pub fn pg_check_dir(dir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_mkdir_p(
        path: *mut ::std::os::raw::c_char,
        omode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type pqsigfunc = ::std::option::Option<unsafe extern "C" fn(signo: ::std::os::raw::c_int)>;
extern "C" {
    pub fn pqsignal(signo: ::std::os::raw::c_int, func: pqsigfunc) -> pqsigfunc;
}
extern "C" {
    pub fn pqsignal_no_restart(signo: ::std::os::raw::c_int, func: pqsigfunc) -> pqsigfunc;
}
extern "C" {
    pub fn escape_single_quotes_ascii(
        src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wait_result_to_str(exit_status: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wait_result_is_signal(
        exit_status: ::std::os::raw::c_int,
        signum: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn wait_result_is_any_signal(
        exit_status: ::std::os::raw::c_int,
        include_command_not_found: bool,
    ) -> bool;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__jmpbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__mask_was_saved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__saved_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn errstart(
        elevel: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
        funcname: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn errfinish(dummy: ::std::os::raw::c_int, ...);
}
extern "C" {
    pub fn errcode(sqlerrcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errcode_for_file_access() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errcode_for_socket_access() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errmsg(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errmsg_internal(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errmsg_plural(
        fmt_singular: *const ::std::os::raw::c_char,
        fmt_plural: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail_internal(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail_log(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail_log_plural(
        fmt_singular: *const ::std::os::raw::c_char,
        fmt_plural: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail_plural(
        fmt_singular: *const ::std::os::raw::c_char,
        fmt_plural: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errhint(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_errcontext_domain(domain: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errcontext_msg(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errhidestmt(hide_stmt: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errhidecontext(hide_ctx: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errfunction(funcname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errposition(cursorpos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn internalerrposition(cursorpos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn internalerrquery(query: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn err_generic_string(
        field: ::std::os::raw::c_int,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn geterrcode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn geterrposition() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getinternalerrposition() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elog_start(
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
        funcname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elog_finish(elevel: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn pre_format_elog_string(
        errnumber: ::std::os::raw::c_int,
        domain: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn format_elog_string(
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ErrorContextCallback {
    pub previous: *mut ErrorContextCallback,
    pub callback: ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void)>,
    pub arg: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ErrorContextCallback() {
    assert_eq!(
        ::std::mem::size_of::<ErrorContextCallback>(),
        24usize,
        concat!("Size of: ", stringify!(ErrorContextCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<ErrorContextCallback>(),
        8usize,
        concat!("Alignment of ", stringify!(ErrorContextCallback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorContextCallback>())).previous as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorContextCallback),
            "::",
            stringify!(previous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorContextCallback>())).callback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorContextCallback),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorContextCallback>())).arg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorContextCallback),
            "::",
            stringify!(arg)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}error_context_stack"]
    pub static mut error_context_stack: *mut ErrorContextCallback;
}
extern "C" {
    #[link_name = "\u{1}PG_exception_stack"]
    pub static mut PG_exception_stack: *mut sigjmp_buf;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ErrorData {
    pub elevel: ::std::os::raw::c_int,
    pub output_to_server: bool,
    pub output_to_client: bool,
    pub show_funcname: bool,
    pub hide_stmt: bool,
    pub hide_ctx: bool,
    pub filename: *const ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_int,
    pub funcname: *const ::std::os::raw::c_char,
    pub domain: *const ::std::os::raw::c_char,
    pub context_domain: *const ::std::os::raw::c_char,
    pub sqlerrcode: ::std::os::raw::c_int,
    pub message: *mut ::std::os::raw::c_char,
    pub detail: *mut ::std::os::raw::c_char,
    pub detail_log: *mut ::std::os::raw::c_char,
    pub hint: *mut ::std::os::raw::c_char,
    pub context: *mut ::std::os::raw::c_char,
    pub message_id: *const ::std::os::raw::c_char,
    pub schema_name: *mut ::std::os::raw::c_char,
    pub table_name: *mut ::std::os::raw::c_char,
    pub column_name: *mut ::std::os::raw::c_char,
    pub datatype_name: *mut ::std::os::raw::c_char,
    pub constraint_name: *mut ::std::os::raw::c_char,
    pub cursorpos: ::std::os::raw::c_int,
    pub internalpos: ::std::os::raw::c_int,
    pub internalquery: *mut ::std::os::raw::c_char,
    pub saved_errno: ::std::os::raw::c_int,
    pub assoc_context: *mut MemoryContextData,
}
#[test]
fn bindgen_test_layout_ErrorData() {
    assert_eq!(
        ::std::mem::size_of::<ErrorData>(),
        184usize,
        concat!("Size of: ", stringify!(ErrorData))
    );
    assert_eq!(
        ::std::mem::align_of::<ErrorData>(),
        8usize,
        concat!("Alignment of ", stringify!(ErrorData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).elevel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(elevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).output_to_server as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(output_to_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).output_to_client as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(output_to_client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).show_funcname as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(show_funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).hide_stmt as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(hide_stmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).hide_ctx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(hide_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).funcname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).domain as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).context_domain as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(context_domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).sqlerrcode as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(sqlerrcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).message as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).detail as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(detail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).detail_log as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(detail_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).hint as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).context as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).message_id as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(message_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).schema_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(schema_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).table_name as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(table_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).column_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(column_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).datatype_name as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(datatype_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).constraint_name as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(constraint_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).cursorpos as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(cursorpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).internalpos as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(internalpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).internalquery as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(internalquery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).saved_errno as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(saved_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).assoc_context as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(assoc_context)
        )
    );
}
extern "C" {
    pub fn EmitErrorReport();
}
extern "C" {
    pub fn CopyErrorData() -> *mut ErrorData;
}
extern "C" {
    pub fn FreeErrorData(edata: *mut ErrorData);
}
extern "C" {
    pub fn FlushErrorState();
}
extern "C" {
    pub fn ReThrowError(edata: *mut ErrorData);
}
extern "C" {
    pub fn ThrowErrorData(edata: *mut ErrorData);
}
extern "C" {
    pub fn pg_re_throw();
}
extern "C" {
    pub fn GetErrorContextStack() -> *mut ::std::os::raw::c_char;
}
pub type emit_log_hook_type = ::std::option::Option<unsafe extern "C" fn(edata: *mut ErrorData)>;
extern "C" {
    #[link_name = "\u{1}emit_log_hook"]
    pub static mut emit_log_hook: emit_log_hook_type;
}
pub const PGErrorVerbosity_PGERROR_TERSE: PGErrorVerbosity = 0;
pub const PGErrorVerbosity_PGERROR_DEFAULT: PGErrorVerbosity = 1;
pub const PGErrorVerbosity_PGERROR_VERBOSE: PGErrorVerbosity = 2;
pub type PGErrorVerbosity = u32;
extern "C" {
    #[link_name = "\u{1}Log_error_verbosity"]
    pub static mut Log_error_verbosity: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}Log_line_prefix"]
    pub static mut Log_line_prefix: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}Log_destination"]
    pub static mut Log_destination: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}Log_destination_string"]
    pub static mut Log_destination_string: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}syslog_sequence_numbers"]
    pub static mut syslog_sequence_numbers: bool;
}
extern "C" {
    #[link_name = "\u{1}syslog_split_messages"]
    pub static mut syslog_split_messages: bool;
}
extern "C" {
    pub fn DebugFileOpen();
}
extern "C" {
    pub fn unpack_sql_state(sql_state: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn in_error_recursion_trouble() -> bool;
}
extern "C" {
    pub fn set_syslog_parameters(
        ident: *const ::std::os::raw::c_char,
        facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn write_stderr(fmt: *const ::std::os::raw::c_char, ...);
}
pub type MemoryContext = *mut MemoryContextData;
pub type MemoryContextCallbackFunction =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MemoryContextCallback {
    pub func: MemoryContextCallbackFunction,
    pub arg: *mut ::std::os::raw::c_void,
    pub next: *mut MemoryContextCallback,
}
#[test]
fn bindgen_test_layout_MemoryContextCallback() {
    assert_eq!(
        ::std::mem::size_of::<MemoryContextCallback>(),
        24usize,
        concat!("Size of: ", stringify!(MemoryContextCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryContextCallback>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryContextCallback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryContextCallback>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryContextCallback),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryContextCallback>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryContextCallback),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryContextCallback>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryContextCallback),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}CurrentMemoryContext"]
    pub static mut CurrentMemoryContext: MemoryContext;
}
extern "C" {
    pub fn MemoryContextAlloc(context: MemoryContext, size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemoryContextAllocZero(
        context: MemoryContext,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemoryContextAllocZeroAligned(
        context: MemoryContext,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemoryContextAllocExtended(
        context: MemoryContext,
        size: Size,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn palloc(size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn palloc0(size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn palloc_extended(size: Size, flags: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn repalloc(
        pointer: *mut ::std::os::raw::c_void,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pfree(pointer: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn MemoryContextAllocHuge(
        context: MemoryContext,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn repalloc_huge(
        pointer: *mut ::std::os::raw::c_void,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemoryContextRegisterResetCallback(
        context: MemoryContext,
        cb: *mut MemoryContextCallback,
    );
}
extern "C" {
    pub fn MemoryContextStrdup(
        context: MemoryContext,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pstrdup(in_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pnstrdup(in_: *const ::std::os::raw::c_char, len: Size) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pchomp(in_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn psprintf(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pvsnprintf(
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> usize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct varatt_external {
    pub va_rawsize: int32,
    pub va_extsize: int32,
    pub va_valueid: Oid,
    pub va_toastrelid: Oid,
}
#[test]
fn bindgen_test_layout_varatt_external() {
    assert_eq!(
        ::std::mem::size_of::<varatt_external>(),
        16usize,
        concat!("Size of: ", stringify!(varatt_external))
    );
    assert_eq!(
        ::std::mem::align_of::<varatt_external>(),
        4usize,
        concat!("Alignment of ", stringify!(varatt_external))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_external>())).va_rawsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_external),
            "::",
            stringify!(va_rawsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_external>())).va_extsize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_external),
            "::",
            stringify!(va_extsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_external>())).va_valueid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_external),
            "::",
            stringify!(va_valueid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_external>())).va_toastrelid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_external),
            "::",
            stringify!(va_toastrelid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct varatt_indirect {
    pub pointer: *mut varlena,
}
#[test]
fn bindgen_test_layout_varatt_indirect() {
    assert_eq!(
        ::std::mem::size_of::<varatt_indirect>(),
        8usize,
        concat!("Size of: ", stringify!(varatt_indirect))
    );
    assert_eq!(
        ::std::mem::align_of::<varatt_indirect>(),
        8usize,
        concat!("Alignment of ", stringify!(varatt_indirect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_indirect>())).pointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_indirect),
            "::",
            stringify!(pointer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct varatt_expanded {
    pub eohptr: *mut ExpandedObjectHeader,
}
#[test]
fn bindgen_test_layout_varatt_expanded() {
    assert_eq!(
        ::std::mem::size_of::<varatt_expanded>(),
        8usize,
        concat!("Size of: ", stringify!(varatt_expanded))
    );
    assert_eq!(
        ::std::mem::align_of::<varatt_expanded>(),
        8usize,
        concat!("Alignment of ", stringify!(varatt_expanded))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_expanded>())).eohptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_expanded),
            "::",
            stringify!(eohptr)
        )
    );
}
pub const vartag_external_VARTAG_INDIRECT: vartag_external = 1;
pub const vartag_external_VARTAG_EXPANDED_RO: vartag_external = 2;
pub const vartag_external_VARTAG_EXPANDED_RW: vartag_external = 3;
pub const vartag_external_VARTAG_ONDISK: vartag_external = 18;
pub type vartag_external = u32;
#[repr(C)]
pub struct varattrib_4b {
    pub va_4byte: __BindgenUnionField<varattrib_4b__bindgen_ty_1>,
    pub va_compressed: __BindgenUnionField<varattrib_4b__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 2usize],
}
#[repr(C)]
pub struct varattrib_4b__bindgen_ty_1 {
    pub va_header: uint32,
    pub va_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varattrib_4b__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_4b__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(varattrib_4b__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_4b__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(varattrib_4b__bindgen_ty_1))
    );
}
#[repr(C)]
pub struct varattrib_4b__bindgen_ty_2 {
    pub va_header: uint32,
    pub va_rawsize: uint32,
    pub va_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varattrib_4b__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_4b__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(varattrib_4b__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_4b__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(varattrib_4b__bindgen_ty_2))
    );
}
#[test]
fn bindgen_test_layout_varattrib_4b() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_4b>(),
        8usize,
        concat!("Size of: ", stringify!(varattrib_4b))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_4b>(),
        4usize,
        concat!("Alignment of ", stringify!(varattrib_4b))
    );
}
#[repr(C)]
pub struct varattrib_1b {
    pub va_header: uint8,
    pub va_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varattrib_1b() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_1b>(),
        1usize,
        concat!("Size of: ", stringify!(varattrib_1b))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_1b>(),
        1usize,
        concat!("Alignment of ", stringify!(varattrib_1b))
    );
}
#[repr(C)]
pub struct varattrib_1b_e {
    pub va_header: uint8,
    pub va_tag: uint8,
    pub va_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varattrib_1b_e() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_1b_e>(),
        2usize,
        concat!("Size of: ", stringify!(varattrib_1b_e))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_1b_e>(),
        1usize,
        concat!("Alignment of ", stringify!(varattrib_1b_e))
    );
}
pub type Datum = usize;
pub const ScanDirection_BackwardScanDirection: ScanDirection = -1;
pub const ScanDirection_NoMovementScanDirection: ScanDirection = 0;
pub const ScanDirection_ForwardScanDirection: ScanDirection = 1;
pub type ScanDirection = i32;
pub type AttrNumber = int16;
pub type StrategyNumber = uint16;
pub type fmNodePtr = *mut Node;
pub type fmAggrefPtr = *mut Aggref;
pub type fmExprContextCallbackFunction = ::std::option::Option<unsafe extern "C" fn(arg: Datum)>;
pub type fmStringInfo = *mut StringInfoData;
pub type FunctionCallInfo = *mut FunctionCallInfoData;
pub type PGFunction =
    ::std::option::Option<unsafe extern "C" fn(fcinfo: FunctionCallInfo) -> Datum>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FmgrInfo {
    pub fn_addr: PGFunction,
    pub fn_oid: Oid,
    pub fn_nargs: ::std::os::raw::c_short,
    pub fn_strict: bool,
    pub fn_retset: bool,
    pub fn_stats: ::std::os::raw::c_uchar,
    pub fn_extra: *mut ::std::os::raw::c_void,
    pub fn_mcxt: MemoryContext,
    pub fn_expr: fmNodePtr,
}
#[test]
fn bindgen_test_layout_FmgrInfo() {
    assert_eq!(
        ::std::mem::size_of::<FmgrInfo>(),
        48usize,
        concat!("Size of: ", stringify!(FmgrInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FmgrInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(FmgrInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_oid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_nargs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_strict as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_strict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_retset as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_retset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_stats as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_extra as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_mcxt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_mcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_expr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_expr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FunctionCallInfoData {
    pub flinfo: *mut FmgrInfo,
    pub context: fmNodePtr,
    pub resultinfo: fmNodePtr,
    pub fncollation: Oid,
    pub isnull: bool,
    pub nargs: ::std::os::raw::c_short,
    pub arg: [Datum; 100usize],
    pub argnull: [bool; 100usize],
}
#[test]
fn bindgen_test_layout_FunctionCallInfoData() {
    assert_eq!(
        ::std::mem::size_of::<FunctionCallInfoData>(),
        936usize,
        concat!("Size of: ", stringify!(FunctionCallInfoData))
    );
    assert_eq!(
        ::std::mem::align_of::<FunctionCallInfoData>(),
        8usize,
        concat!("Alignment of ", stringify!(FunctionCallInfoData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).flinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(flinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).resultinfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(resultinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FunctionCallInfoData>())).fncollation as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(fncollation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).isnull as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(isnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).nargs as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).arg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).argnull as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(argnull)
        )
    );
}
extern "C" {
    pub fn fmgr_info(functionId: Oid, finfo: *mut FmgrInfo);
}
extern "C" {
    pub fn fmgr_info_cxt(functionId: Oid, finfo: *mut FmgrInfo, mcxt: MemoryContext);
}
extern "C" {
    pub fn fmgr_info_copy(dstinfo: *mut FmgrInfo, srcinfo: *mut FmgrInfo, destcxt: MemoryContext);
}
extern "C" {
    pub fn fmgr_symbol(
        functionId: Oid,
        mod_: *mut *mut ::std::os::raw::c_char,
        fn_: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pg_detoast_datum(datum: *mut varlena) -> *mut varlena;
}
extern "C" {
    pub fn pg_detoast_datum_copy(datum: *mut varlena) -> *mut varlena;
}
extern "C" {
    pub fn pg_detoast_datum_slice(datum: *mut varlena, first: int32, count: int32) -> *mut varlena;
}
extern "C" {
    pub fn pg_detoast_datum_packed(datum: *mut varlena) -> *mut varlena;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Pg_finfo_record {
    pub api_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Pg_finfo_record() {
    assert_eq!(
        ::std::mem::size_of::<Pg_finfo_record>(),
        4usize,
        concat!("Size of: ", stringify!(Pg_finfo_record))
    );
    assert_eq!(
        ::std::mem::align_of::<Pg_finfo_record>(),
        4usize,
        concat!("Alignment of ", stringify!(Pg_finfo_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_finfo_record>())).api_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_finfo_record),
            "::",
            stringify!(api_version)
        )
    );
}
pub type PGFInfoFunction = ::std::option::Option<unsafe extern "C" fn() -> *const Pg_finfo_record>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Pg_magic_struct {
    pub len: ::std::os::raw::c_int,
    pub version: ::std::os::raw::c_int,
    pub funcmaxargs: ::std::os::raw::c_int,
    pub indexmaxkeys: ::std::os::raw::c_int,
    pub namedatalen: ::std::os::raw::c_int,
    pub float4byval: ::std::os::raw::c_int,
    pub float8byval: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Pg_magic_struct() {
    assert_eq!(
        ::std::mem::size_of::<Pg_magic_struct>(),
        28usize,
        concat!("Size of: ", stringify!(Pg_magic_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<Pg_magic_struct>(),
        4usize,
        concat!("Alignment of ", stringify!(Pg_magic_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).funcmaxargs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(funcmaxargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).indexmaxkeys as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(indexmaxkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).namedatalen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(namedatalen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).float4byval as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(float4byval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).float8byval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(float8byval)
        )
    );
}
pub type PGModuleMagicFunction =
    ::std::option::Option<unsafe extern "C" fn() -> *const Pg_magic_struct>;
extern "C" {
    pub fn DirectFunctionCall1Coll(func: PGFunction, collation: Oid, arg1: Datum) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall2Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall3Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall4Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall5Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall6Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall7Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall8Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall9Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
        arg9: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn CallerFInfoFunctionCall1(
        func: PGFunction,
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn CallerFInfoFunctionCall2(
        func: PGFunction,
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall1Coll(flinfo: *mut FmgrInfo, collation: Oid, arg1: Datum) -> Datum;
}
extern "C" {
    pub fn FunctionCall2Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall3Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall4Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall5Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall6Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall7Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall8Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall9Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
        arg9: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall0Coll(functionId: Oid, collation: Oid) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall1Coll(functionId: Oid, collation: Oid, arg1: Datum) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall2Coll(functionId: Oid, collation: Oid, arg1: Datum, arg2: Datum)
        -> Datum;
}
extern "C" {
    pub fn OidFunctionCall3Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall4Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall5Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall6Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall7Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall8Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall9Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
        arg9: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn InputFunctionCall(
        flinfo: *mut FmgrInfo,
        str: *mut ::std::os::raw::c_char,
        typioparam: Oid,
        typmod: int32,
    ) -> Datum;
}
extern "C" {
    pub fn OidInputFunctionCall(
        functionId: Oid,
        str: *mut ::std::os::raw::c_char,
        typioparam: Oid,
        typmod: int32,
    ) -> Datum;
}
extern "C" {
    pub fn OutputFunctionCall(flinfo: *mut FmgrInfo, val: Datum) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OidOutputFunctionCall(functionId: Oid, val: Datum) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ReceiveFunctionCall(
        flinfo: *mut FmgrInfo,
        buf: fmStringInfo,
        typioparam: Oid,
        typmod: int32,
    ) -> Datum;
}
extern "C" {
    pub fn OidReceiveFunctionCall(
        functionId: Oid,
        buf: fmStringInfo,
        typioparam: Oid,
        typmod: int32,
    ) -> Datum;
}
extern "C" {
    pub fn SendFunctionCall(flinfo: *mut FmgrInfo, val: Datum) -> *mut bytea;
}
extern "C" {
    pub fn OidSendFunctionCall(functionId: Oid, val: Datum) -> *mut bytea;
}
extern "C" {
    pub fn fetch_finfo_record(
        filehandle: *mut ::std::os::raw::c_void,
        funcname: *const ::std::os::raw::c_char,
    ) -> *const Pg_finfo_record;
}
extern "C" {
    pub fn clear_external_function_hash(filehandle: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fmgr_internal_function(proname: *const ::std::os::raw::c_char) -> Oid;
}
extern "C" {
    pub fn get_fn_expr_rettype(flinfo: *mut FmgrInfo) -> Oid;
}
extern "C" {
    pub fn get_fn_expr_argtype(flinfo: *mut FmgrInfo, argnum: ::std::os::raw::c_int) -> Oid;
}
extern "C" {
    pub fn get_call_expr_argtype(expr: fmNodePtr, argnum: ::std::os::raw::c_int) -> Oid;
}
extern "C" {
    pub fn get_fn_expr_arg_stable(flinfo: *mut FmgrInfo, argnum: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn get_call_expr_arg_stable(expr: fmNodePtr, argnum: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn get_fn_expr_variadic(flinfo: *mut FmgrInfo) -> bool;
}
extern "C" {
    pub fn CheckFunctionValidatorAccess(validatorOid: Oid, functionOid: Oid) -> bool;
}
extern "C" {
    #[link_name = "\u{1}Dynamic_library_path"]
    pub static mut Dynamic_library_path: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn load_external_function(
        filename: *const ::std::os::raw::c_char,
        funcname: *const ::std::os::raw::c_char,
        signalNotFound: bool,
        filehandle: *mut *mut ::std::os::raw::c_void,
    ) -> PGFunction;
}
extern "C" {
    pub fn lookup_external_function(
        filehandle: *mut ::std::os::raw::c_void,
        funcname: *const ::std::os::raw::c_char,
    ) -> PGFunction;
}
extern "C" {
    pub fn load_file(filename: *const ::std::os::raw::c_char, restricted: bool);
}
extern "C" {
    pub fn find_rendezvous_variable(
        varName: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn EstimateLibraryStateSpace() -> Size;
}
extern "C" {
    pub fn SerializeLibraryState(maxsize: Size, start_address: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn RestoreLibraryState(start_address: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn AggCheckCallContext(
        fcinfo: FunctionCallInfo,
        aggcontext: *mut MemoryContext,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AggGetAggref(fcinfo: FunctionCallInfo) -> fmAggrefPtr;
}
extern "C" {
    pub fn AggGetTempMemoryContext(fcinfo: FunctionCallInfo) -> MemoryContext;
}
extern "C" {
    pub fn AggStateIsShared(fcinfo: FunctionCallInfo) -> bool;
}
extern "C" {
    pub fn AggRegisterCallback(
        fcinfo: FunctionCallInfo,
        func: fmExprContextCallbackFunction,
        arg: Datum,
    );
}
pub const FmgrHookEventType_FHET_START: FmgrHookEventType = 0;
pub const FmgrHookEventType_FHET_END: FmgrHookEventType = 1;
pub const FmgrHookEventType_FHET_ABORT: FmgrHookEventType = 2;
pub type FmgrHookEventType = u32;
pub type needs_fmgr_hook_type = ::std::option::Option<unsafe extern "C" fn(fn_oid: Oid) -> bool>;
pub type fmgr_hook_type = ::std::option::Option<
    unsafe extern "C" fn(event: FmgrHookEventType, flinfo: *mut FmgrInfo, arg: *mut Datum),
>;
extern "C" {
    #[link_name = "\u{1}needs_fmgr_hook"]
    pub static mut needs_fmgr_hook: needs_fmgr_hook_type;
}
extern "C" {
    #[link_name = "\u{1}fmgr_hook"]
    pub static mut fmgr_hook: fmgr_hook_type;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ScanKeyData {
    pub sk_flags: ::std::os::raw::c_int,
    pub sk_attno: AttrNumber,
    pub sk_strategy: StrategyNumber,
    pub sk_subtype: Oid,
    pub sk_collation: Oid,
    pub sk_func: FmgrInfo,
    pub sk_argument: Datum,
}
#[test]
fn bindgen_test_layout_ScanKeyData() {
    assert_eq!(
        ::std::mem::size_of::<ScanKeyData>(),
        72usize,
        concat!("Size of: ", stringify!(ScanKeyData))
    );
    assert_eq!(
        ::std::mem::align_of::<ScanKeyData>(),
        8usize,
        concat!("Alignment of ", stringify!(ScanKeyData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_attno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_attno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_strategy as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_subtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_collation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_argument as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_argument)
        )
    );
}
pub type ScanKey = *mut ScanKeyData;
extern "C" {
    pub fn ScanKeyInit(
        entry: ScanKey,
        attributeNumber: AttrNumber,
        strategy: StrategyNumber,
        procedure: RegProcedure,
        argument: Datum,
    );
}
extern "C" {
    pub fn ScanKeyEntryInitialize(
        entry: ScanKey,
        flags: ::std::os::raw::c_int,
        attributeNumber: AttrNumber,
        strategy: StrategyNumber,
        subtype: Oid,
        collation: Oid,
        procedure: RegProcedure,
        argument: Datum,
    );
}
extern "C" {
    pub fn ScanKeyEntryInitializeWithInfo(
        entry: ScanKey,
        flags: ::std::os::raw::c_int,
        attributeNumber: AttrNumber,
        strategy: StrategyNumber,
        subtype: Oid,
        collation: Oid,
        finfo: *mut FmgrInfo,
        argument: Datum,
    );
}
pub type BlockNumber = uint32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BlockIdData {
    pub bi_hi: uint16,
    pub bi_lo: uint16,
}
#[test]
fn bindgen_test_layout_BlockIdData() {
    assert_eq!(
        ::std::mem::size_of::<BlockIdData>(),
        4usize,
        concat!("Size of: ", stringify!(BlockIdData))
    );
    assert_eq!(
        ::std::mem::align_of::<BlockIdData>(),
        2usize,
        concat!("Alignment of ", stringify!(BlockIdData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockIdData>())).bi_hi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockIdData),
            "::",
            stringify!(bi_hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockIdData>())).bi_lo as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockIdData),
            "::",
            stringify!(bi_lo)
        )
    );
}
pub type BlockId = *mut BlockIdData;
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub struct ItemIdData {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_ItemIdData() {
    assert_eq!(
        ::std::mem::size_of::<ItemIdData>(),
        4usize,
        concat!("Size of: ", stringify!(ItemIdData))
    );
    assert_eq!(
        ::std::mem::align_of::<ItemIdData>(),
        4usize,
        concat!("Alignment of ", stringify!(ItemIdData))
    );
}
impl ItemIdData {
    #[inline]
    pub fn lp_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_lp_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn lp_flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lp_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lp_len(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_lp_len(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lp_off: ::std::os::raw::c_uint,
        lp_flags: ::std::os::raw::c_uint,
        lp_len: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let lp_off: u32 = unsafe { ::std::mem::transmute(lp_off) };
            lp_off as u64
        });
        __bindgen_bitfield_unit.set(15usize, 2u8, {
            let lp_flags: u32 = unsafe { ::std::mem::transmute(lp_flags) };
            lp_flags as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let lp_len: u32 = unsafe { ::std::mem::transmute(lp_len) };
            lp_len as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ItemId = *mut ItemIdData;
pub type ItemOffset = uint16;
pub type ItemLength = uint16;
pub type OffsetNumber = uint16;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct ItemPointerData {
    pub ip_blkid: BlockIdData,
    pub ip_posid: OffsetNumber,
}
#[test]
fn bindgen_test_layout_ItemPointerData() {
    assert_eq!(
        ::std::mem::size_of::<ItemPointerData>(),
        6usize,
        concat!("Size of: ", stringify!(ItemPointerData))
    );
    assert_eq!(
        ::std::mem::align_of::<ItemPointerData>(),
        2usize,
        concat!("Alignment of ", stringify!(ItemPointerData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ItemPointerData>())).ip_blkid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ItemPointerData),
            "::",
            stringify!(ip_blkid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ItemPointerData>())).ip_posid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ItemPointerData),
            "::",
            stringify!(ip_posid)
        )
    );
}
pub type ItemPointer = *mut ItemPointerData;
extern "C" {
    pub fn ItemPointerEquals(pointer1: ItemPointer, pointer2: ItemPointer) -> bool;
}
extern "C" {
    pub fn ItemPointerCompare(arg1: ItemPointer, arg2: ItemPointer) -> int32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pg_atomic_flag {
    pub value: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pg_atomic_flag() {
    assert_eq!(
        ::std::mem::size_of::<pg_atomic_flag>(),
        1usize,
        concat!("Size of: ", stringify!(pg_atomic_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<pg_atomic_flag>(),
        1usize,
        concat!("Alignment of ", stringify!(pg_atomic_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_atomic_flag>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_atomic_flag),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pg_atomic_uint32 {
    pub value: uint32,
}
#[test]
fn bindgen_test_layout_pg_atomic_uint32() {
    assert_eq!(
        ::std::mem::size_of::<pg_atomic_uint32>(),
        4usize,
        concat!("Size of: ", stringify!(pg_atomic_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<pg_atomic_uint32>(),
        4usize,
        concat!("Alignment of ", stringify!(pg_atomic_uint32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_atomic_uint32>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_atomic_uint32),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pg_atomic_uint64 {
    pub value: uint64,
}
#[test]
fn bindgen_test_layout_pg_atomic_uint64() {
    assert_eq!(
        ::std::mem::size_of::<pg_atomic_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(pg_atomic_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<pg_atomic_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(pg_atomic_uint64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_atomic_uint64>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_atomic_uint64),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}dynamic_shared_memory_type"]
    pub static mut dynamic_shared_memory_type: ::std::os::raw::c_int;
}
pub type dsm_handle = uint32;
pub const dsm_op_DSM_OP_CREATE: dsm_op = 0;
pub const dsm_op_DSM_OP_ATTACH: dsm_op = 1;
pub const dsm_op_DSM_OP_DETACH: dsm_op = 2;
pub const dsm_op_DSM_OP_RESIZE: dsm_op = 3;
pub const dsm_op_DSM_OP_DESTROY: dsm_op = 4;
pub type dsm_op = u32;
extern "C" {
    pub fn dsm_impl_op(
        op: dsm_op,
        handle: dsm_handle,
        request_size: Size,
        impl_private: *mut *mut ::std::os::raw::c_void,
        mapped_address: *mut *mut ::std::os::raw::c_void,
        mapped_size: *mut Size,
        elevel: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn dsm_impl_can_resize() -> bool;
}
extern "C" {
    pub fn dsm_impl_pin_segment(
        handle: dsm_handle,
        impl_private: *mut ::std::os::raw::c_void,
        impl_private_pm_handle: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dsm_impl_unpin_segment(
        handle: dsm_handle,
        impl_private: *mut *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dsm_segment {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PGShmemHeader {
    _unused: [u8; 0],
}
extern "C" {
    pub fn dsm_cleanup_using_control_segment(old_control_handle: dsm_handle);
}
extern "C" {
    pub fn dsm_postmaster_startup(arg1: *mut PGShmemHeader);
}
extern "C" {
    pub fn dsm_backend_shutdown();
}
extern "C" {
    pub fn dsm_detach_all();
}
extern "C" {
    pub fn dsm_create(size: Size, flags: ::std::os::raw::c_int) -> *mut dsm_segment;
}
extern "C" {
    pub fn dsm_attach(h: dsm_handle) -> *mut dsm_segment;
}
extern "C" {
    pub fn dsm_resize(seg: *mut dsm_segment, size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsm_remap(seg: *mut dsm_segment) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsm_detach(seg: *mut dsm_segment);
}
extern "C" {
    pub fn dsm_pin_mapping(seg: *mut dsm_segment);
}
extern "C" {
    pub fn dsm_unpin_mapping(seg: *mut dsm_segment);
}
extern "C" {
    pub fn dsm_pin_segment(seg: *mut dsm_segment);
}
extern "C" {
    pub fn dsm_unpin_segment(h: dsm_handle);
}
extern "C" {
    pub fn dsm_find_mapping(h: dsm_handle) -> *mut dsm_segment;
}
extern "C" {
    pub fn dsm_segment_address(seg: *mut dsm_segment) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsm_segment_map_length(seg: *mut dsm_segment) -> Size;
}
extern "C" {
    pub fn dsm_segment_handle(seg: *mut dsm_segment) -> dsm_handle;
}
pub type on_dsm_detach_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut dsm_segment, arg: Datum)>;
extern "C" {
    pub fn on_dsm_detach(seg: *mut dsm_segment, function: on_dsm_detach_callback, arg: Datum);
}
extern "C" {
    pub fn cancel_on_dsm_detach(
        seg: *mut dsm_segment,
        function: on_dsm_detach_callback,
        arg: Datum,
    );
}
extern "C" {
    pub fn reset_on_dsm_detach();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dsa_area {
    _unused: [u8; 0],
}
pub type dsa_pointer = uint64;
pub type dsa_pointer_atomic = pg_atomic_uint64;
pub type dsa_handle = dsm_handle;
extern "C" {
    pub fn dsa_startup();
}
extern "C" {
    pub fn dsa_create(tranche_id: ::std::os::raw::c_int) -> *mut dsa_area;
}
extern "C" {
    pub fn dsa_create_in_place(
        place: *mut ::std::os::raw::c_void,
        size: usize,
        tranche_id: ::std::os::raw::c_int,
        segment: *mut dsm_segment,
    ) -> *mut dsa_area;
}
extern "C" {
    pub fn dsa_attach(handle: dsa_handle) -> *mut dsa_area;
}
extern "C" {
    pub fn dsa_attach_in_place(
        place: *mut ::std::os::raw::c_void,
        segment: *mut dsm_segment,
    ) -> *mut dsa_area;
}
extern "C" {
    pub fn dsa_release_in_place(place: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dsa_on_dsm_detach_release_in_place(arg1: *mut dsm_segment, arg2: Datum);
}
extern "C" {
    pub fn dsa_on_shmem_exit_release_in_place(arg1: ::std::os::raw::c_int, arg2: Datum);
}
extern "C" {
    pub fn dsa_pin_mapping(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_detach(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_pin(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_unpin(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_set_size_limit(area: *mut dsa_area, limit: usize);
}
extern "C" {
    pub fn dsa_minimum_size() -> usize;
}
extern "C" {
    pub fn dsa_get_handle(area: *mut dsa_area) -> dsa_handle;
}
extern "C" {
    pub fn dsa_allocate_extended(
        area: *mut dsa_area,
        size: usize,
        flags: ::std::os::raw::c_int,
    ) -> dsa_pointer;
}
extern "C" {
    pub fn dsa_free(area: *mut dsa_area, dp: dsa_pointer);
}
extern "C" {
    pub fn dsa_get_address(area: *mut dsa_area, dp: dsa_pointer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsa_trim(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_dump(area: *mut dsa_area);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TIDBitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TBMIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TBMSharedIterator {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct TBMIterateResult {
    pub blockno: BlockNumber,
    pub ntuples: ::std::os::raw::c_int,
    pub recheck: bool,
    pub offsets: __IncompleteArrayField<OffsetNumber>,
}
#[test]
fn bindgen_test_layout_TBMIterateResult() {
    assert_eq!(
        ::std::mem::size_of::<TBMIterateResult>(),
        12usize,
        concat!("Size of: ", stringify!(TBMIterateResult))
    );
    assert_eq!(
        ::std::mem::align_of::<TBMIterateResult>(),
        4usize,
        concat!("Alignment of ", stringify!(TBMIterateResult))
    );
}
extern "C" {
    pub fn tbm_create(maxbytes: ::std::os::raw::c_long, dsa: *mut dsa_area) -> *mut TIDBitmap;
}
extern "C" {
    pub fn tbm_free(tbm: *mut TIDBitmap);
}
extern "C" {
    pub fn tbm_free_shared_area(dsa: *mut dsa_area, dp: dsa_pointer);
}
extern "C" {
    pub fn tbm_add_tuples(
        tbm: *mut TIDBitmap,
        tids: ItemPointer,
        ntids: ::std::os::raw::c_int,
        recheck: bool,
    );
}
extern "C" {
    pub fn tbm_add_page(tbm: *mut TIDBitmap, pageno: BlockNumber);
}
extern "C" {
    pub fn tbm_union(a: *mut TIDBitmap, b: *const TIDBitmap);
}
extern "C" {
    pub fn tbm_intersect(a: *mut TIDBitmap, b: *const TIDBitmap);
}
extern "C" {
    pub fn tbm_is_empty(tbm: *const TIDBitmap) -> bool;
}
extern "C" {
    pub fn tbm_begin_iterate(tbm: *mut TIDBitmap) -> *mut TBMIterator;
}
extern "C" {
    pub fn tbm_prepare_shared_iterate(tbm: *mut TIDBitmap) -> dsa_pointer;
}
extern "C" {
    pub fn tbm_iterate(iterator: *mut TBMIterator) -> *mut TBMIterateResult;
}
extern "C" {
    pub fn tbm_shared_iterate(iterator: *mut TBMSharedIterator) -> *mut TBMIterateResult;
}
extern "C" {
    pub fn tbm_end_iterate(iterator: *mut TBMIterator);
}
extern "C" {
    pub fn tbm_end_shared_iterate(iterator: *mut TBMSharedIterator);
}
extern "C" {
    pub fn tbm_attach_shared_iterate(dsa: *mut dsa_area, dp: dsa_pointer)
        -> *mut TBMSharedIterator;
}
extern "C" {
    pub fn tbm_calculate_entries(maxbytes: f64) -> ::std::os::raw::c_long;
}
pub type LOCKMASK = ::std::os::raw::c_int;
pub type LOCKMODE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xl_standby_lock {
    pub xid: TransactionId,
    pub dbOid: Oid,
    pub relOid: Oid,
}
#[test]
fn bindgen_test_layout_xl_standby_lock() {
    assert_eq!(
        ::std::mem::size_of::<xl_standby_lock>(),
        12usize,
        concat!("Size of: ", stringify!(xl_standby_lock))
    );
    assert_eq!(
        ::std::mem::align_of::<xl_standby_lock>(),
        4usize,
        concat!("Alignment of ", stringify!(xl_standby_lock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_standby_lock>())).xid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_standby_lock),
            "::",
            stringify!(xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_standby_lock>())).dbOid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_standby_lock),
            "::",
            stringify!(dbOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_standby_lock>())).relOid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_standby_lock),
            "::",
            stringify!(relOid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FormData_pg_attribute {
    pub attrelid: Oid,
    pub attname: NameData,
    pub atttypid: Oid,
    pub attstattarget: int32,
    pub attlen: int16,
    pub attnum: int16,
    pub attndims: int32,
    pub attcacheoff: int32,
    pub atttypmod: int32,
    pub attbyval: bool,
    pub attstorage: ::std::os::raw::c_char,
    pub attalign: ::std::os::raw::c_char,
    pub attnotnull: bool,
    pub atthasdef: bool,
    pub atthasmissing: bool,
    pub attidentity: ::std::os::raw::c_char,
    pub attisdropped: bool,
    pub attislocal: bool,
    pub attinhcount: int32,
    pub attcollation: Oid,
}
#[test]
fn bindgen_test_layout_FormData_pg_attribute() {
    assert_eq!(
        ::std::mem::size_of::<FormData_pg_attribute>(),
        112usize,
        concat!("Size of: ", stringify!(FormData_pg_attribute))
    );
    assert_eq!(
        ::std::mem::align_of::<FormData_pg_attribute>(),
        4usize,
        concat!("Alignment of ", stringify!(FormData_pg_attribute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attrelid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attrelid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attname as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).atttypid as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(atttypid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attstattarget as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attstattarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attlen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attnum as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attndims as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attndims)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attcacheoff as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attcacheoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).atttypmod as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(atttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attbyval as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attbyval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attstorage as *const _ as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attstorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attalign as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attalign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attnotnull as *const _ as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attnotnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).atthasdef as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(atthasdef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).atthasmissing as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(atthasmissing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attidentity as *const _ as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attidentity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attisdropped as *const _ as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attisdropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attislocal as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attislocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attinhcount as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attinhcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attcollation as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attcollation)
        )
    );
}
pub type Form_pg_attribute = *mut FormData_pg_attribute;
pub const NodeTag_T_Invalid: NodeTag = 0;
pub const NodeTag_T_IndexInfo: NodeTag = 1;
pub const NodeTag_T_ExprContext: NodeTag = 2;
pub const NodeTag_T_ProjectionInfo: NodeTag = 3;
pub const NodeTag_T_JunkFilter: NodeTag = 4;
pub const NodeTag_T_OnConflictSetState: NodeTag = 5;
pub const NodeTag_T_ResultRelInfo: NodeTag = 6;
pub const NodeTag_T_EState: NodeTag = 7;
pub const NodeTag_T_TupleTableSlot: NodeTag = 8;
pub const NodeTag_T_Plan: NodeTag = 9;
pub const NodeTag_T_Result: NodeTag = 10;
pub const NodeTag_T_ProjectSet: NodeTag = 11;
pub const NodeTag_T_ModifyTable: NodeTag = 12;
pub const NodeTag_T_Append: NodeTag = 13;
pub const NodeTag_T_MergeAppend: NodeTag = 14;
pub const NodeTag_T_RecursiveUnion: NodeTag = 15;
pub const NodeTag_T_BitmapAnd: NodeTag = 16;
pub const NodeTag_T_BitmapOr: NodeTag = 17;
pub const NodeTag_T_Scan: NodeTag = 18;
pub const NodeTag_T_SeqScan: NodeTag = 19;
pub const NodeTag_T_SampleScan: NodeTag = 20;
pub const NodeTag_T_IndexScan: NodeTag = 21;
pub const NodeTag_T_IndexOnlyScan: NodeTag = 22;
pub const NodeTag_T_BitmapIndexScan: NodeTag = 23;
pub const NodeTag_T_BitmapHeapScan: NodeTag = 24;
pub const NodeTag_T_TidScan: NodeTag = 25;
pub const NodeTag_T_SubqueryScan: NodeTag = 26;
pub const NodeTag_T_FunctionScan: NodeTag = 27;
pub const NodeTag_T_ValuesScan: NodeTag = 28;
pub const NodeTag_T_TableFuncScan: NodeTag = 29;
pub const NodeTag_T_CteScan: NodeTag = 30;
pub const NodeTag_T_NamedTuplestoreScan: NodeTag = 31;
pub const NodeTag_T_WorkTableScan: NodeTag = 32;
pub const NodeTag_T_ForeignScan: NodeTag = 33;
pub const NodeTag_T_CustomScan: NodeTag = 34;
pub const NodeTag_T_Join: NodeTag = 35;
pub const NodeTag_T_NestLoop: NodeTag = 36;
pub const NodeTag_T_MergeJoin: NodeTag = 37;
pub const NodeTag_T_HashJoin: NodeTag = 38;
pub const NodeTag_T_Material: NodeTag = 39;
pub const NodeTag_T_Sort: NodeTag = 40;
pub const NodeTag_T_Group: NodeTag = 41;
pub const NodeTag_T_Agg: NodeTag = 42;
pub const NodeTag_T_WindowAgg: NodeTag = 43;
pub const NodeTag_T_Unique: NodeTag = 44;
pub const NodeTag_T_Gather: NodeTag = 45;
pub const NodeTag_T_GatherMerge: NodeTag = 46;
pub const NodeTag_T_Hash: NodeTag = 47;
pub const NodeTag_T_SetOp: NodeTag = 48;
pub const NodeTag_T_LockRows: NodeTag = 49;
pub const NodeTag_T_Limit: NodeTag = 50;
pub const NodeTag_T_NestLoopParam: NodeTag = 51;
pub const NodeTag_T_PlanRowMark: NodeTag = 52;
pub const NodeTag_T_PartitionPruneInfo: NodeTag = 53;
pub const NodeTag_T_PartitionedRelPruneInfo: NodeTag = 54;
pub const NodeTag_T_PartitionPruneStepOp: NodeTag = 55;
pub const NodeTag_T_PartitionPruneStepCombine: NodeTag = 56;
pub const NodeTag_T_PlanInvalItem: NodeTag = 57;
pub const NodeTag_T_PlanState: NodeTag = 58;
pub const NodeTag_T_ResultState: NodeTag = 59;
pub const NodeTag_T_ProjectSetState: NodeTag = 60;
pub const NodeTag_T_ModifyTableState: NodeTag = 61;
pub const NodeTag_T_AppendState: NodeTag = 62;
pub const NodeTag_T_MergeAppendState: NodeTag = 63;
pub const NodeTag_T_RecursiveUnionState: NodeTag = 64;
pub const NodeTag_T_BitmapAndState: NodeTag = 65;
pub const NodeTag_T_BitmapOrState: NodeTag = 66;
pub const NodeTag_T_ScanState: NodeTag = 67;
pub const NodeTag_T_SeqScanState: NodeTag = 68;
pub const NodeTag_T_SampleScanState: NodeTag = 69;
pub const NodeTag_T_IndexScanState: NodeTag = 70;
pub const NodeTag_T_IndexOnlyScanState: NodeTag = 71;
pub const NodeTag_T_BitmapIndexScanState: NodeTag = 72;
pub const NodeTag_T_BitmapHeapScanState: NodeTag = 73;
pub const NodeTag_T_TidScanState: NodeTag = 74;
pub const NodeTag_T_SubqueryScanState: NodeTag = 75;
pub const NodeTag_T_FunctionScanState: NodeTag = 76;
pub const NodeTag_T_TableFuncScanState: NodeTag = 77;
pub const NodeTag_T_ValuesScanState: NodeTag = 78;
pub const NodeTag_T_CteScanState: NodeTag = 79;
pub const NodeTag_T_NamedTuplestoreScanState: NodeTag = 80;
pub const NodeTag_T_WorkTableScanState: NodeTag = 81;
pub const NodeTag_T_ForeignScanState: NodeTag = 82;
pub const NodeTag_T_CustomScanState: NodeTag = 83;
pub const NodeTag_T_JoinState: NodeTag = 84;
pub const NodeTag_T_NestLoopState: NodeTag = 85;
pub const NodeTag_T_MergeJoinState: NodeTag = 86;
pub const NodeTag_T_HashJoinState: NodeTag = 87;
pub const NodeTag_T_MaterialState: NodeTag = 88;
pub const NodeTag_T_SortState: NodeTag = 89;
pub const NodeTag_T_GroupState: NodeTag = 90;
pub const NodeTag_T_AggState: NodeTag = 91;
pub const NodeTag_T_WindowAggState: NodeTag = 92;
pub const NodeTag_T_UniqueState: NodeTag = 93;
pub const NodeTag_T_GatherState: NodeTag = 94;
pub const NodeTag_T_GatherMergeState: NodeTag = 95;
pub const NodeTag_T_HashState: NodeTag = 96;
pub const NodeTag_T_SetOpState: NodeTag = 97;
pub const NodeTag_T_LockRowsState: NodeTag = 98;
pub const NodeTag_T_LimitState: NodeTag = 99;
pub const NodeTag_T_Alias: NodeTag = 100;
pub const NodeTag_T_RangeVar: NodeTag = 101;
pub const NodeTag_T_TableFunc: NodeTag = 102;
pub const NodeTag_T_Expr: NodeTag = 103;
pub const NodeTag_T_Var: NodeTag = 104;
pub const NodeTag_T_Const: NodeTag = 105;
pub const NodeTag_T_Param: NodeTag = 106;
pub const NodeTag_T_Aggref: NodeTag = 107;
pub const NodeTag_T_GroupingFunc: NodeTag = 108;
pub const NodeTag_T_WindowFunc: NodeTag = 109;
pub const NodeTag_T_ArrayRef: NodeTag = 110;
pub const NodeTag_T_FuncExpr: NodeTag = 111;
pub const NodeTag_T_NamedArgExpr: NodeTag = 112;
pub const NodeTag_T_OpExpr: NodeTag = 113;
pub const NodeTag_T_DistinctExpr: NodeTag = 114;
pub const NodeTag_T_NullIfExpr: NodeTag = 115;
pub const NodeTag_T_ScalarArrayOpExpr: NodeTag = 116;
pub const NodeTag_T_BoolExpr: NodeTag = 117;
pub const NodeTag_T_SubLink: NodeTag = 118;
pub const NodeTag_T_SubPlan: NodeTag = 119;
pub const NodeTag_T_AlternativeSubPlan: NodeTag = 120;
pub const NodeTag_T_FieldSelect: NodeTag = 121;
pub const NodeTag_T_FieldStore: NodeTag = 122;
pub const NodeTag_T_RelabelType: NodeTag = 123;
pub const NodeTag_T_CoerceViaIO: NodeTag = 124;
pub const NodeTag_T_ArrayCoerceExpr: NodeTag = 125;
pub const NodeTag_T_ConvertRowtypeExpr: NodeTag = 126;
pub const NodeTag_T_CollateExpr: NodeTag = 127;
pub const NodeTag_T_CaseExpr: NodeTag = 128;
pub const NodeTag_T_CaseWhen: NodeTag = 129;
pub const NodeTag_T_CaseTestExpr: NodeTag = 130;
pub const NodeTag_T_ArrayExpr: NodeTag = 131;
pub const NodeTag_T_RowExpr: NodeTag = 132;
pub const NodeTag_T_RowCompareExpr: NodeTag = 133;
pub const NodeTag_T_CoalesceExpr: NodeTag = 134;
pub const NodeTag_T_MinMaxExpr: NodeTag = 135;
pub const NodeTag_T_SQLValueFunction: NodeTag = 136;
pub const NodeTag_T_XmlExpr: NodeTag = 137;
pub const NodeTag_T_NullTest: NodeTag = 138;
pub const NodeTag_T_BooleanTest: NodeTag = 139;
pub const NodeTag_T_CoerceToDomain: NodeTag = 140;
pub const NodeTag_T_CoerceToDomainValue: NodeTag = 141;
pub const NodeTag_T_SetToDefault: NodeTag = 142;
pub const NodeTag_T_CurrentOfExpr: NodeTag = 143;
pub const NodeTag_T_NextValueExpr: NodeTag = 144;
pub const NodeTag_T_InferenceElem: NodeTag = 145;
pub const NodeTag_T_TargetEntry: NodeTag = 146;
pub const NodeTag_T_RangeTblRef: NodeTag = 147;
pub const NodeTag_T_JoinExpr: NodeTag = 148;
pub const NodeTag_T_FromExpr: NodeTag = 149;
pub const NodeTag_T_OnConflictExpr: NodeTag = 150;
pub const NodeTag_T_IntoClause: NodeTag = 151;
pub const NodeTag_T_ExprState: NodeTag = 152;
pub const NodeTag_T_AggrefExprState: NodeTag = 153;
pub const NodeTag_T_WindowFuncExprState: NodeTag = 154;
pub const NodeTag_T_SetExprState: NodeTag = 155;
pub const NodeTag_T_SubPlanState: NodeTag = 156;
pub const NodeTag_T_AlternativeSubPlanState: NodeTag = 157;
pub const NodeTag_T_DomainConstraintState: NodeTag = 158;
pub const NodeTag_T_PlannerInfo: NodeTag = 159;
pub const NodeTag_T_PlannerGlobal: NodeTag = 160;
pub const NodeTag_T_RelOptInfo: NodeTag = 161;
pub const NodeTag_T_IndexOptInfo: NodeTag = 162;
pub const NodeTag_T_ForeignKeyOptInfo: NodeTag = 163;
pub const NodeTag_T_ParamPathInfo: NodeTag = 164;
pub const NodeTag_T_Path: NodeTag = 165;
pub const NodeTag_T_IndexPath: NodeTag = 166;
pub const NodeTag_T_BitmapHeapPath: NodeTag = 167;
pub const NodeTag_T_BitmapAndPath: NodeTag = 168;
pub const NodeTag_T_BitmapOrPath: NodeTag = 169;
pub const NodeTag_T_TidPath: NodeTag = 170;
pub const NodeTag_T_SubqueryScanPath: NodeTag = 171;
pub const NodeTag_T_ForeignPath: NodeTag = 172;
pub const NodeTag_T_CustomPath: NodeTag = 173;
pub const NodeTag_T_NestPath: NodeTag = 174;
pub const NodeTag_T_MergePath: NodeTag = 175;
pub const NodeTag_T_HashPath: NodeTag = 176;
pub const NodeTag_T_AppendPath: NodeTag = 177;
pub const NodeTag_T_MergeAppendPath: NodeTag = 178;
pub const NodeTag_T_ResultPath: NodeTag = 179;
pub const NodeTag_T_MaterialPath: NodeTag = 180;
pub const NodeTag_T_UniquePath: NodeTag = 181;
pub const NodeTag_T_GatherPath: NodeTag = 182;
pub const NodeTag_T_GatherMergePath: NodeTag = 183;
pub const NodeTag_T_ProjectionPath: NodeTag = 184;
pub const NodeTag_T_ProjectSetPath: NodeTag = 185;
pub const NodeTag_T_SortPath: NodeTag = 186;
pub const NodeTag_T_GroupPath: NodeTag = 187;
pub const NodeTag_T_UpperUniquePath: NodeTag = 188;
pub const NodeTag_T_AggPath: NodeTag = 189;
pub const NodeTag_T_GroupingSetsPath: NodeTag = 190;
pub const NodeTag_T_MinMaxAggPath: NodeTag = 191;
pub const NodeTag_T_WindowAggPath: NodeTag = 192;
pub const NodeTag_T_SetOpPath: NodeTag = 193;
pub const NodeTag_T_RecursiveUnionPath: NodeTag = 194;
pub const NodeTag_T_LockRowsPath: NodeTag = 195;
pub const NodeTag_T_ModifyTablePath: NodeTag = 196;
pub const NodeTag_T_LimitPath: NodeTag = 197;
pub const NodeTag_T_EquivalenceClass: NodeTag = 198;
pub const NodeTag_T_EquivalenceMember: NodeTag = 199;
pub const NodeTag_T_PathKey: NodeTag = 200;
pub const NodeTag_T_PathTarget: NodeTag = 201;
pub const NodeTag_T_RestrictInfo: NodeTag = 202;
pub const NodeTag_T_PlaceHolderVar: NodeTag = 203;
pub const NodeTag_T_SpecialJoinInfo: NodeTag = 204;
pub const NodeTag_T_AppendRelInfo: NodeTag = 205;
pub const NodeTag_T_PlaceHolderInfo: NodeTag = 206;
pub const NodeTag_T_MinMaxAggInfo: NodeTag = 207;
pub const NodeTag_T_PlannerParamItem: NodeTag = 208;
pub const NodeTag_T_RollupData: NodeTag = 209;
pub const NodeTag_T_GroupingSetData: NodeTag = 210;
pub const NodeTag_T_StatisticExtInfo: NodeTag = 211;
pub const NodeTag_T_MemoryContext: NodeTag = 212;
pub const NodeTag_T_AllocSetContext: NodeTag = 213;
pub const NodeTag_T_SlabContext: NodeTag = 214;
pub const NodeTag_T_GenerationContext: NodeTag = 215;
pub const NodeTag_T_Value: NodeTag = 216;
pub const NodeTag_T_Integer: NodeTag = 217;
pub const NodeTag_T_Float: NodeTag = 218;
pub const NodeTag_T_String: NodeTag = 219;
pub const NodeTag_T_BitString: NodeTag = 220;
pub const NodeTag_T_Null: NodeTag = 221;
pub const NodeTag_T_List: NodeTag = 222;
pub const NodeTag_T_IntList: NodeTag = 223;
pub const NodeTag_T_OidList: NodeTag = 224;
pub const NodeTag_T_ExtensibleNode: NodeTag = 225;
pub const NodeTag_T_RawStmt: NodeTag = 226;
pub const NodeTag_T_Query: NodeTag = 227;
pub const NodeTag_T_PlannedStmt: NodeTag = 228;
pub const NodeTag_T_InsertStmt: NodeTag = 229;
pub const NodeTag_T_DeleteStmt: NodeTag = 230;
pub const NodeTag_T_UpdateStmt: NodeTag = 231;
pub const NodeTag_T_SelectStmt: NodeTag = 232;
pub const NodeTag_T_AlterTableStmt: NodeTag = 233;
pub const NodeTag_T_AlterTableCmd: NodeTag = 234;
pub const NodeTag_T_AlterDomainStmt: NodeTag = 235;
pub const NodeTag_T_SetOperationStmt: NodeTag = 236;
pub const NodeTag_T_GrantStmt: NodeTag = 237;
pub const NodeTag_T_GrantRoleStmt: NodeTag = 238;
pub const NodeTag_T_AlterDefaultPrivilegesStmt: NodeTag = 239;
pub const NodeTag_T_ClosePortalStmt: NodeTag = 240;
pub const NodeTag_T_ClusterStmt: NodeTag = 241;
pub const NodeTag_T_CopyStmt: NodeTag = 242;
pub const NodeTag_T_CreateStmt: NodeTag = 243;
pub const NodeTag_T_DefineStmt: NodeTag = 244;
pub const NodeTag_T_DropStmt: NodeTag = 245;
pub const NodeTag_T_TruncateStmt: NodeTag = 246;
pub const NodeTag_T_CommentStmt: NodeTag = 247;
pub const NodeTag_T_FetchStmt: NodeTag = 248;
pub const NodeTag_T_IndexStmt: NodeTag = 249;
pub const NodeTag_T_CreateFunctionStmt: NodeTag = 250;
pub const NodeTag_T_AlterFunctionStmt: NodeTag = 251;
pub const NodeTag_T_DoStmt: NodeTag = 252;
pub const NodeTag_T_RenameStmt: NodeTag = 253;
pub const NodeTag_T_RuleStmt: NodeTag = 254;
pub const NodeTag_T_NotifyStmt: NodeTag = 255;
pub const NodeTag_T_ListenStmt: NodeTag = 256;
pub const NodeTag_T_UnlistenStmt: NodeTag = 257;
pub const NodeTag_T_TransactionStmt: NodeTag = 258;
pub const NodeTag_T_ViewStmt: NodeTag = 259;
pub const NodeTag_T_LoadStmt: NodeTag = 260;
pub const NodeTag_T_CreateDomainStmt: NodeTag = 261;
pub const NodeTag_T_CreatedbStmt: NodeTag = 262;
pub const NodeTag_T_DropdbStmt: NodeTag = 263;
pub const NodeTag_T_VacuumStmt: NodeTag = 264;
pub const NodeTag_T_ExplainStmt: NodeTag = 265;
pub const NodeTag_T_CreateTableAsStmt: NodeTag = 266;
pub const NodeTag_T_CreateSeqStmt: NodeTag = 267;
pub const NodeTag_T_AlterSeqStmt: NodeTag = 268;
pub const NodeTag_T_VariableSetStmt: NodeTag = 269;
pub const NodeTag_T_VariableShowStmt: NodeTag = 270;
pub const NodeTag_T_DiscardStmt: NodeTag = 271;
pub const NodeTag_T_CreateTrigStmt: NodeTag = 272;
pub const NodeTag_T_CreatePLangStmt: NodeTag = 273;
pub const NodeTag_T_CreateRoleStmt: NodeTag = 274;
pub const NodeTag_T_AlterRoleStmt: NodeTag = 275;
pub const NodeTag_T_DropRoleStmt: NodeTag = 276;
pub const NodeTag_T_LockStmt: NodeTag = 277;
pub const NodeTag_T_ConstraintsSetStmt: NodeTag = 278;
pub const NodeTag_T_ReindexStmt: NodeTag = 279;
pub const NodeTag_T_CheckPointStmt: NodeTag = 280;
pub const NodeTag_T_CreateSchemaStmt: NodeTag = 281;
pub const NodeTag_T_AlterDatabaseStmt: NodeTag = 282;
pub const NodeTag_T_AlterDatabaseSetStmt: NodeTag = 283;
pub const NodeTag_T_AlterRoleSetStmt: NodeTag = 284;
pub const NodeTag_T_CreateConversionStmt: NodeTag = 285;
pub const NodeTag_T_CreateCastStmt: NodeTag = 286;
pub const NodeTag_T_CreateOpClassStmt: NodeTag = 287;
pub const NodeTag_T_CreateOpFamilyStmt: NodeTag = 288;
pub const NodeTag_T_AlterOpFamilyStmt: NodeTag = 289;
pub const NodeTag_T_PrepareStmt: NodeTag = 290;
pub const NodeTag_T_ExecuteStmt: NodeTag = 291;
pub const NodeTag_T_DeallocateStmt: NodeTag = 292;
pub const NodeTag_T_DeclareCursorStmt: NodeTag = 293;
pub const NodeTag_T_CreateTableSpaceStmt: NodeTag = 294;
pub const NodeTag_T_DropTableSpaceStmt: NodeTag = 295;
pub const NodeTag_T_AlterObjectDependsStmt: NodeTag = 296;
pub const NodeTag_T_AlterObjectSchemaStmt: NodeTag = 297;
pub const NodeTag_T_AlterOwnerStmt: NodeTag = 298;
pub const NodeTag_T_AlterOperatorStmt: NodeTag = 299;
pub const NodeTag_T_DropOwnedStmt: NodeTag = 300;
pub const NodeTag_T_ReassignOwnedStmt: NodeTag = 301;
pub const NodeTag_T_CompositeTypeStmt: NodeTag = 302;
pub const NodeTag_T_CreateEnumStmt: NodeTag = 303;
pub const NodeTag_T_CreateRangeStmt: NodeTag = 304;
pub const NodeTag_T_AlterEnumStmt: NodeTag = 305;
pub const NodeTag_T_AlterTSDictionaryStmt: NodeTag = 306;
pub const NodeTag_T_AlterTSConfigurationStmt: NodeTag = 307;
pub const NodeTag_T_CreateFdwStmt: NodeTag = 308;
pub const NodeTag_T_AlterFdwStmt: NodeTag = 309;
pub const NodeTag_T_CreateForeignServerStmt: NodeTag = 310;
pub const NodeTag_T_AlterForeignServerStmt: NodeTag = 311;
pub const NodeTag_T_CreateUserMappingStmt: NodeTag = 312;
pub const NodeTag_T_AlterUserMappingStmt: NodeTag = 313;
pub const NodeTag_T_DropUserMappingStmt: NodeTag = 314;
pub const NodeTag_T_AlterTableSpaceOptionsStmt: NodeTag = 315;
pub const NodeTag_T_AlterTableMoveAllStmt: NodeTag = 316;
pub const NodeTag_T_SecLabelStmt: NodeTag = 317;
pub const NodeTag_T_CreateForeignTableStmt: NodeTag = 318;
pub const NodeTag_T_ImportForeignSchemaStmt: NodeTag = 319;
pub const NodeTag_T_CreateExtensionStmt: NodeTag = 320;
pub const NodeTag_T_AlterExtensionStmt: NodeTag = 321;
pub const NodeTag_T_AlterExtensionContentsStmt: NodeTag = 322;
pub const NodeTag_T_CreateEventTrigStmt: NodeTag = 323;
pub const NodeTag_T_AlterEventTrigStmt: NodeTag = 324;
pub const NodeTag_T_RefreshMatViewStmt: NodeTag = 325;
pub const NodeTag_T_ReplicaIdentityStmt: NodeTag = 326;
pub const NodeTag_T_AlterSystemStmt: NodeTag = 327;
pub const NodeTag_T_CreatePolicyStmt: NodeTag = 328;
pub const NodeTag_T_AlterPolicyStmt: NodeTag = 329;
pub const NodeTag_T_CreateTransformStmt: NodeTag = 330;
pub const NodeTag_T_CreateAmStmt: NodeTag = 331;
pub const NodeTag_T_CreatePublicationStmt: NodeTag = 332;
pub const NodeTag_T_AlterPublicationStmt: NodeTag = 333;
pub const NodeTag_T_CreateSubscriptionStmt: NodeTag = 334;
pub const NodeTag_T_AlterSubscriptionStmt: NodeTag = 335;
pub const NodeTag_T_DropSubscriptionStmt: NodeTag = 336;
pub const NodeTag_T_CreateStatsStmt: NodeTag = 337;
pub const NodeTag_T_AlterCollationStmt: NodeTag = 338;
pub const NodeTag_T_CallStmt: NodeTag = 339;
pub const NodeTag_T_A_Expr: NodeTag = 340;
pub const NodeTag_T_ColumnRef: NodeTag = 341;
pub const NodeTag_T_ParamRef: NodeTag = 342;
pub const NodeTag_T_A_Const: NodeTag = 343;
pub const NodeTag_T_FuncCall: NodeTag = 344;
pub const NodeTag_T_A_Star: NodeTag = 345;
pub const NodeTag_T_A_Indices: NodeTag = 346;
pub const NodeTag_T_A_Indirection: NodeTag = 347;
pub const NodeTag_T_A_ArrayExpr: NodeTag = 348;
pub const NodeTag_T_ResTarget: NodeTag = 349;
pub const NodeTag_T_MultiAssignRef: NodeTag = 350;
pub const NodeTag_T_TypeCast: NodeTag = 351;
pub const NodeTag_T_CollateClause: NodeTag = 352;
pub const NodeTag_T_SortBy: NodeTag = 353;
pub const NodeTag_T_WindowDef: NodeTag = 354;
pub const NodeTag_T_RangeSubselect: NodeTag = 355;
pub const NodeTag_T_RangeFunction: NodeTag = 356;
pub const NodeTag_T_RangeTableSample: NodeTag = 357;
pub const NodeTag_T_RangeTableFunc: NodeTag = 358;
pub const NodeTag_T_RangeTableFuncCol: NodeTag = 359;
pub const NodeTag_T_TypeName: NodeTag = 360;
pub const NodeTag_T_ColumnDef: NodeTag = 361;
pub const NodeTag_T_IndexElem: NodeTag = 362;
pub const NodeTag_T_Constraint: NodeTag = 363;
pub const NodeTag_T_DefElem: NodeTag = 364;
pub const NodeTag_T_RangeTblEntry: NodeTag = 365;
pub const NodeTag_T_RangeTblFunction: NodeTag = 366;
pub const NodeTag_T_TableSampleClause: NodeTag = 367;
pub const NodeTag_T_WithCheckOption: NodeTag = 368;
pub const NodeTag_T_SortGroupClause: NodeTag = 369;
pub const NodeTag_T_GroupingSet: NodeTag = 370;
pub const NodeTag_T_WindowClause: NodeTag = 371;
pub const NodeTag_T_ObjectWithArgs: NodeTag = 372;
pub const NodeTag_T_AccessPriv: NodeTag = 373;
pub const NodeTag_T_CreateOpClassItem: NodeTag = 374;
pub const NodeTag_T_TableLikeClause: NodeTag = 375;
pub const NodeTag_T_FunctionParameter: NodeTag = 376;
pub const NodeTag_T_LockingClause: NodeTag = 377;
pub const NodeTag_T_RowMarkClause: NodeTag = 378;
pub const NodeTag_T_XmlSerialize: NodeTag = 379;
pub const NodeTag_T_WithClause: NodeTag = 380;
pub const NodeTag_T_InferClause: NodeTag = 381;
pub const NodeTag_T_OnConflictClause: NodeTag = 382;
pub const NodeTag_T_CommonTableExpr: NodeTag = 383;
pub const NodeTag_T_RoleSpec: NodeTag = 384;
pub const NodeTag_T_TriggerTransition: NodeTag = 385;
pub const NodeTag_T_PartitionElem: NodeTag = 386;
pub const NodeTag_T_PartitionSpec: NodeTag = 387;
pub const NodeTag_T_PartitionBoundSpec: NodeTag = 388;
pub const NodeTag_T_PartitionRangeDatum: NodeTag = 389;
pub const NodeTag_T_PartitionCmd: NodeTag = 390;
pub const NodeTag_T_VacuumRelation: NodeTag = 391;
pub const NodeTag_T_IdentifySystemCmd: NodeTag = 392;
pub const NodeTag_T_BaseBackupCmd: NodeTag = 393;
pub const NodeTag_T_CreateReplicationSlotCmd: NodeTag = 394;
pub const NodeTag_T_DropReplicationSlotCmd: NodeTag = 395;
pub const NodeTag_T_StartReplicationCmd: NodeTag = 396;
pub const NodeTag_T_TimeLineHistoryCmd: NodeTag = 397;
pub const NodeTag_T_SQLCmd: NodeTag = 398;
pub const NodeTag_T_TriggerData: NodeTag = 399;
pub const NodeTag_T_EventTriggerData: NodeTag = 400;
pub const NodeTag_T_ReturnSetInfo: NodeTag = 401;
pub const NodeTag_T_WindowObjectData: NodeTag = 402;
pub const NodeTag_T_TIDBitmap: NodeTag = 403;
pub const NodeTag_T_InlineCodeBlock: NodeTag = 404;
pub const NodeTag_T_FdwRoutine: NodeTag = 405;
pub const NodeTag_T_IndexAmRoutine: NodeTag = 406;
pub const NodeTag_T_TsmRoutine: NodeTag = 407;
pub const NodeTag_T_ForeignKeyCacheInfo: NodeTag = 408;
pub const NodeTag_T_CallContext: NodeTag = 409;
pub type NodeTag = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Node {
    pub type_: NodeTag,
}
#[test]
fn bindgen_test_layout_Node() {
    assert_eq!(
        ::std::mem::size_of::<Node>(),
        4usize,
        concat!("Size of: ", stringify!(Node))
    );
    assert_eq!(
        ::std::mem::align_of::<Node>(),
        4usize,
        concat!("Alignment of ", stringify!(Node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Node>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Node),
            "::",
            stringify!(type_)
        )
    );
}
extern "C" {
    pub fn outNode(str: *mut StringInfoData, obj: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn outToken(str: *mut StringInfoData, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn outBitmapset(str: *mut StringInfoData, bms: *const Bitmapset);
}
extern "C" {
    pub fn outDatum(
        str: *mut StringInfoData,
        value: usize,
        typlen: ::std::os::raw::c_int,
        typbyval: bool,
    );
}
extern "C" {
    pub fn nodeToString(obj: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bmsToString(bms: *const Bitmapset) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stringToNode(str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn readBitmapset() -> *mut Bitmapset;
}
extern "C" {
    pub fn readDatum(typbyval: bool) -> usize;
}
extern "C" {
    pub fn readBoolCols(numCols: ::std::os::raw::c_int) -> *mut bool;
}
extern "C" {
    pub fn readIntCols(numCols: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn readOidCols(numCols: ::std::os::raw::c_int) -> *mut Oid;
}
extern "C" {
    pub fn readAttrNumberCols(numCols: ::std::os::raw::c_int) -> *mut int16;
}
extern "C" {
    pub fn copyObjectImpl(obj: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn equal(a: *const ::std::os::raw::c_void, b: *const ::std::os::raw::c_void) -> bool;
}
pub type Selectivity = f64;
pub type Cost = f64;
pub const CmdType_CMD_UNKNOWN: CmdType = 0;
pub const CmdType_CMD_SELECT: CmdType = 1;
pub const CmdType_CMD_UPDATE: CmdType = 2;
pub const CmdType_CMD_INSERT: CmdType = 3;
pub const CmdType_CMD_DELETE: CmdType = 4;
pub const CmdType_CMD_UTILITY: CmdType = 5;
pub const CmdType_CMD_NOTHING: CmdType = 6;
pub type CmdType = u32;
pub const JoinType_JOIN_INNER: JoinType = 0;
pub const JoinType_JOIN_LEFT: JoinType = 1;
pub const JoinType_JOIN_FULL: JoinType = 2;
pub const JoinType_JOIN_RIGHT: JoinType = 3;
pub const JoinType_JOIN_SEMI: JoinType = 4;
pub const JoinType_JOIN_ANTI: JoinType = 5;
pub const JoinType_JOIN_UNIQUE_OUTER: JoinType = 6;
pub const JoinType_JOIN_UNIQUE_INNER: JoinType = 7;
pub type JoinType = u32;
pub const AggStrategy_AGG_PLAIN: AggStrategy = 0;
pub const AggStrategy_AGG_SORTED: AggStrategy = 1;
pub const AggStrategy_AGG_HASHED: AggStrategy = 2;
pub const AggStrategy_AGG_MIXED: AggStrategy = 3;
pub type AggStrategy = u32;
pub const AggSplit_AGGSPLIT_SIMPLE: AggSplit = 0;
pub const AggSplit_AGGSPLIT_INITIAL_SERIAL: AggSplit = 6;
pub const AggSplit_AGGSPLIT_FINAL_DESERIAL: AggSplit = 9;
pub type AggSplit = u32;
pub const SetOpCmd_SETOPCMD_INTERSECT: SetOpCmd = 0;
pub const SetOpCmd_SETOPCMD_INTERSECT_ALL: SetOpCmd = 1;
pub const SetOpCmd_SETOPCMD_EXCEPT: SetOpCmd = 2;
pub const SetOpCmd_SETOPCMD_EXCEPT_ALL: SetOpCmd = 3;
pub type SetOpCmd = u32;
pub const SetOpStrategy_SETOP_SORTED: SetOpStrategy = 0;
pub const SetOpStrategy_SETOP_HASHED: SetOpStrategy = 1;
pub type SetOpStrategy = u32;
pub const OnConflictAction_ONCONFLICT_NONE: OnConflictAction = 0;
pub const OnConflictAction_ONCONFLICT_NOTHING: OnConflictAction = 1;
pub const OnConflictAction_ONCONFLICT_UPDATE: OnConflictAction = 2;
pub type OnConflictAction = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct List {
    pub type_: NodeTag,
    pub length: ::std::os::raw::c_int,
    pub head: *mut ListCell,
    pub tail: *mut ListCell,
}
#[test]
fn bindgen_test_layout_List() {
    assert_eq!(
        ::std::mem::size_of::<List>(),
        24usize,
        concat!("Size of: ", stringify!(List))
    );
    assert_eq!(
        ::std::mem::align_of::<List>(),
        8usize,
        concat!("Alignment of ", stringify!(List))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<List>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(List),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<List>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(List),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<List>())).head as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(List),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<List>())).tail as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(List),
            "::",
            stringify!(tail)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ListCell {
    pub data: ListCell__bindgen_ty_1,
    pub next: *mut ListCell,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ListCell__bindgen_ty_1 {
    pub ptr_value: *mut ::std::os::raw::c_void,
    pub int_value: ::std::os::raw::c_int,
    pub oid_value: Oid,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_ListCell__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ListCell__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ListCell__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ListCell__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ListCell__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ListCell__bindgen_ty_1>())).ptr_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell__bindgen_ty_1),
            "::",
            stringify!(ptr_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ListCell__bindgen_ty_1>())).int_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell__bindgen_ty_1),
            "::",
            stringify!(int_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ListCell__bindgen_ty_1>())).oid_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell__bindgen_ty_1),
            "::",
            stringify!(oid_value)
        )
    );
}
#[test]
fn bindgen_test_layout_ListCell() {
    assert_eq!(
        ::std::mem::size_of::<ListCell>(),
        16usize,
        concat!("Size of: ", stringify!(ListCell))
    );
    assert_eq!(
        ::std::mem::align_of::<ListCell>(),
        8usize,
        concat!("Alignment of ", stringify!(ListCell))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ListCell>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ListCell>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn lappend(list: *mut List, datum: *mut ::std::os::raw::c_void) -> *mut List;
}
extern "C" {
    pub fn lappend_int(list: *mut List, datum: ::std::os::raw::c_int) -> *mut List;
}
extern "C" {
    pub fn lappend_oid(list: *mut List, datum: Oid) -> *mut List;
}
extern "C" {
    pub fn lappend_cell(
        list: *mut List,
        prev: *mut ListCell,
        datum: *mut ::std::os::raw::c_void,
    ) -> *mut ListCell;
}
extern "C" {
    pub fn lappend_cell_int(
        list: *mut List,
        prev: *mut ListCell,
        datum: ::std::os::raw::c_int,
    ) -> *mut ListCell;
}
extern "C" {
    pub fn lappend_cell_oid(list: *mut List, prev: *mut ListCell, datum: Oid) -> *mut ListCell;
}
extern "C" {
    pub fn lcons(datum: *mut ::std::os::raw::c_void, list: *mut List) -> *mut List;
}
extern "C" {
    pub fn lcons_int(datum: ::std::os::raw::c_int, list: *mut List) -> *mut List;
}
extern "C" {
    pub fn lcons_oid(datum: Oid, list: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_concat(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_truncate(list: *mut List, new_size: ::std::os::raw::c_int) -> *mut List;
}
extern "C" {
    pub fn list_nth_cell(list: *const List, n: ::std::os::raw::c_int) -> *mut ListCell;
}
extern "C" {
    pub fn list_nth(list: *const List, n: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn list_nth_int(list: *const List, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_nth_oid(list: *const List, n: ::std::os::raw::c_int) -> Oid;
}
extern "C" {
    pub fn list_member(list: *const List, datum: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn list_member_ptr(list: *const List, datum: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn list_member_int(list: *const List, datum: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn list_member_oid(list: *const List, datum: Oid) -> bool;
}
extern "C" {
    pub fn list_delete(list: *mut List, datum: *mut ::std::os::raw::c_void) -> *mut List;
}
extern "C" {
    pub fn list_delete_ptr(list: *mut List, datum: *mut ::std::os::raw::c_void) -> *mut List;
}
extern "C" {
    pub fn list_delete_int(list: *mut List, datum: ::std::os::raw::c_int) -> *mut List;
}
extern "C" {
    pub fn list_delete_oid(list: *mut List, datum: Oid) -> *mut List;
}
extern "C" {
    pub fn list_delete_first(list: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_delete_cell(list: *mut List, cell: *mut ListCell, prev: *mut ListCell)
        -> *mut List;
}
extern "C" {
    pub fn list_union(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_union_ptr(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_union_int(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_union_oid(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_intersection(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_intersection_int(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_difference(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_difference_ptr(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_difference_int(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_difference_oid(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_append_unique(list: *mut List, datum: *mut ::std::os::raw::c_void) -> *mut List;
}
extern "C" {
    pub fn list_append_unique_ptr(list: *mut List, datum: *mut ::std::os::raw::c_void)
        -> *mut List;
}
extern "C" {
    pub fn list_append_unique_int(list: *mut List, datum: ::std::os::raw::c_int) -> *mut List;
}
extern "C" {
    pub fn list_append_unique_oid(list: *mut List, datum: Oid) -> *mut List;
}
extern "C" {
    pub fn list_concat_unique(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_concat_unique_ptr(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_concat_unique_int(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_concat_unique_oid(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_free(list: *mut List);
}
extern "C" {
    pub fn list_free_deep(list: *mut List);
}
extern "C" {
    pub fn list_copy(list: *const List) -> *mut List;
}
extern "C" {
    pub fn list_copy_tail(list: *const List, nskip: ::std::os::raw::c_int) -> *mut List;
}
pub type list_qsort_comparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn list_qsort(list: *const List, cmp: list_qsort_comparator) -> *mut List;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attrDefault {
    pub adnum: AttrNumber,
    pub adbin: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_attrDefault() {
    assert_eq!(
        ::std::mem::size_of::<attrDefault>(),
        16usize,
        concat!("Size of: ", stringify!(attrDefault))
    );
    assert_eq!(
        ::std::mem::align_of::<attrDefault>(),
        8usize,
        concat!("Alignment of ", stringify!(attrDefault))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attrDefault>())).adnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attrDefault),
            "::",
            stringify!(adnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attrDefault>())).adbin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attrDefault),
            "::",
            stringify!(adbin)
        )
    );
}
pub type AttrDefault = attrDefault;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attrMissing {
    _unused: [u8; 0],
}
pub type MissingPtr = *mut attrMissing;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct constrCheck {
    pub ccname: *mut ::std::os::raw::c_char,
    pub ccbin: *mut ::std::os::raw::c_char,
    pub ccvalid: bool,
    pub ccnoinherit: bool,
}
#[test]
fn bindgen_test_layout_constrCheck() {
    assert_eq!(
        ::std::mem::size_of::<constrCheck>(),
        24usize,
        concat!("Size of: ", stringify!(constrCheck))
    );
    assert_eq!(
        ::std::mem::align_of::<constrCheck>(),
        8usize,
        concat!("Alignment of ", stringify!(constrCheck))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<constrCheck>())).ccname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(constrCheck),
            "::",
            stringify!(ccname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<constrCheck>())).ccbin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(constrCheck),
            "::",
            stringify!(ccbin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<constrCheck>())).ccvalid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(constrCheck),
            "::",
            stringify!(ccvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<constrCheck>())).ccnoinherit as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(constrCheck),
            "::",
            stringify!(ccnoinherit)
        )
    );
}
pub type ConstrCheck = constrCheck;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tupleConstr {
    pub defval: *mut AttrDefault,
    pub check: *mut ConstrCheck,
    pub missing: MissingPtr,
    pub num_defval: uint16,
    pub num_check: uint16,
    pub has_not_null: bool,
}
#[test]
fn bindgen_test_layout_tupleConstr() {
    assert_eq!(
        ::std::mem::size_of::<tupleConstr>(),
        32usize,
        concat!("Size of: ", stringify!(tupleConstr))
    );
    assert_eq!(
        ::std::mem::align_of::<tupleConstr>(),
        8usize,
        concat!("Alignment of ", stringify!(tupleConstr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).defval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(defval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).check as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).missing as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(missing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).num_defval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(num_defval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).num_check as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(num_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).has_not_null as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(has_not_null)
        )
    );
}
pub type TupleConstr = tupleConstr;
#[repr(C)]
pub struct tupleDesc {
    pub natts: ::std::os::raw::c_int,
    pub tdtypeid: Oid,
    pub tdtypmod: int32,
    pub tdhasoid: bool,
    pub tdrefcount: ::std::os::raw::c_int,
    pub constr: *mut TupleConstr,
    pub attrs: __IncompleteArrayField<FormData_pg_attribute>,
}
#[test]
fn bindgen_test_layout_tupleDesc() {
    assert_eq!(
        ::std::mem::size_of::<tupleDesc>(),
        32usize,
        concat!("Size of: ", stringify!(tupleDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<tupleDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(tupleDesc))
    );
}
pub type TupleDesc = *mut tupleDesc;
extern "C" {
    pub fn CreateTemplateTupleDesc(natts: ::std::os::raw::c_int, hasoid: bool) -> TupleDesc;
}
extern "C" {
    pub fn CreateTupleDesc(
        natts: ::std::os::raw::c_int,
        hasoid: bool,
        attrs: *mut Form_pg_attribute,
    ) -> TupleDesc;
}
extern "C" {
    pub fn CreateTupleDescCopy(tupdesc: TupleDesc) -> TupleDesc;
}
extern "C" {
    pub fn CreateTupleDescCopyConstr(tupdesc: TupleDesc) -> TupleDesc;
}
extern "C" {
    pub fn TupleDescCopy(dst: TupleDesc, src: TupleDesc);
}
extern "C" {
    pub fn TupleDescCopyEntry(
        dst: TupleDesc,
        dstAttno: AttrNumber,
        src: TupleDesc,
        srcAttno: AttrNumber,
    );
}
extern "C" {
    pub fn FreeTupleDesc(tupdesc: TupleDesc);
}
extern "C" {
    pub fn IncrTupleDescRefCount(tupdesc: TupleDesc);
}
extern "C" {
    pub fn DecrTupleDescRefCount(tupdesc: TupleDesc);
}
extern "C" {
    pub fn equalTupleDescs(tupdesc1: TupleDesc, tupdesc2: TupleDesc) -> bool;
}
extern "C" {
    pub fn hashTupleDesc(tupdesc: TupleDesc) -> uint32;
}
extern "C" {
    pub fn TupleDescInitEntry(
        desc: TupleDesc,
        attributeNumber: AttrNumber,
        attributeName: *const ::std::os::raw::c_char,
        oidtypeid: Oid,
        typmod: int32,
        attdim: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TupleDescInitBuiltinEntry(
        desc: TupleDesc,
        attributeNumber: AttrNumber,
        attributeName: *const ::std::os::raw::c_char,
        oidtypeid: Oid,
        typmod: int32,
        attdim: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TupleDescInitEntryCollation(
        desc: TupleDesc,
        attributeNumber: AttrNumber,
        collationid: Oid,
    );
}
extern "C" {
    pub fn BuildDescForRelation(schema: *mut List) -> TupleDesc;
}
extern "C" {
    pub fn BuildDescFromLists(
        names: *mut List,
        types: *mut List,
        typmods: *mut List,
        collations: *mut List,
    ) -> TupleDesc;
}
pub type bitmapword = uint32;
pub type signedbitmapword = int32;
#[repr(C)]
pub struct Bitmapset {
    pub nwords: ::std::os::raw::c_int,
    pub words: __IncompleteArrayField<bitmapword>,
}
#[test]
fn bindgen_test_layout_Bitmapset() {
    assert_eq!(
        ::std::mem::size_of::<Bitmapset>(),
        4usize,
        concat!("Size of: ", stringify!(Bitmapset))
    );
    assert_eq!(
        ::std::mem::align_of::<Bitmapset>(),
        4usize,
        concat!("Alignment of ", stringify!(Bitmapset))
    );
}
pub const BMS_Comparison_BMS_EQUAL: BMS_Comparison = 0;
pub const BMS_Comparison_BMS_SUBSET1: BMS_Comparison = 1;
pub const BMS_Comparison_BMS_SUBSET2: BMS_Comparison = 2;
pub const BMS_Comparison_BMS_DIFFERENT: BMS_Comparison = 3;
pub type BMS_Comparison = u32;
pub const BMS_Membership_BMS_EMPTY_SET: BMS_Membership = 0;
pub const BMS_Membership_BMS_SINGLETON: BMS_Membership = 1;
pub const BMS_Membership_BMS_MULTIPLE: BMS_Membership = 2;
pub type BMS_Membership = u32;
extern "C" {
    pub fn bms_copy(a: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_equal(a: *const Bitmapset, b: *const Bitmapset) -> bool;
}
extern "C" {
    pub fn bms_compare(a: *const Bitmapset, b: *const Bitmapset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_make_singleton(x: ::std::os::raw::c_int) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_free(a: *mut Bitmapset);
}
extern "C" {
    pub fn bms_union(a: *const Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_intersect(a: *const Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_difference(a: *const Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_is_subset(a: *const Bitmapset, b: *const Bitmapset) -> bool;
}
extern "C" {
    pub fn bms_subset_compare(a: *const Bitmapset, b: *const Bitmapset) -> BMS_Comparison;
}
extern "C" {
    pub fn bms_is_member(x: ::std::os::raw::c_int, a: *const Bitmapset) -> bool;
}
extern "C" {
    pub fn bms_overlap(a: *const Bitmapset, b: *const Bitmapset) -> bool;
}
extern "C" {
    pub fn bms_overlap_list(a: *const Bitmapset, b: *const List) -> bool;
}
extern "C" {
    pub fn bms_nonempty_difference(a: *const Bitmapset, b: *const Bitmapset) -> bool;
}
extern "C" {
    pub fn bms_singleton_member(a: *const Bitmapset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_get_singleton_member(
        a: *const Bitmapset,
        member: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn bms_num_members(a: *const Bitmapset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_membership(a: *const Bitmapset) -> BMS_Membership;
}
extern "C" {
    pub fn bms_is_empty(a: *const Bitmapset) -> bool;
}
extern "C" {
    pub fn bms_add_member(a: *mut Bitmapset, x: ::std::os::raw::c_int) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_del_member(a: *mut Bitmapset, x: ::std::os::raw::c_int) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_add_members(a: *mut Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_add_range(
        a: *mut Bitmapset,
        lower: ::std::os::raw::c_int,
        upper: ::std::os::raw::c_int,
    ) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_int_members(a: *mut Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_del_members(a: *mut Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_join(a: *mut Bitmapset, b: *mut Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_first_member(a: *mut Bitmapset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_next_member(
        a: *const Bitmapset,
        prevbit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_prev_member(
        a: *const Bitmapset,
        prevbit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_hash_value(a: *const Bitmapset) -> uint32;
}
pub type Relation = *mut RelationData;
pub type RelationPtr = *mut Relation;
extern "C" {
    pub fn RelationIdGetRelation(relationId: Oid) -> Relation;
}
extern "C" {
    pub fn RelationClose(relation: Relation);
}
extern "C" {
    pub fn RelationGetFKeyList(relation: Relation) -> *mut List;
}
extern "C" {
    pub fn RelationGetIndexList(relation: Relation) -> *mut List;
}
extern "C" {
    pub fn RelationGetStatExtList(relation: Relation) -> *mut List;
}
extern "C" {
    pub fn RelationGetOidIndex(relation: Relation) -> Oid;
}
extern "C" {
    pub fn RelationGetPrimaryKeyIndex(relation: Relation) -> Oid;
}
extern "C" {
    pub fn RelationGetReplicaIndex(relation: Relation) -> Oid;
}
extern "C" {
    pub fn RelationGetIndexExpressions(relation: Relation) -> *mut List;
}
extern "C" {
    pub fn RelationGetIndexPredicate(relation: Relation) -> *mut List;
}
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_HOT: IndexAttrBitmapKind = 0;
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_PROJ: IndexAttrBitmapKind = 1;
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_KEY: IndexAttrBitmapKind = 2;
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_PRIMARY_KEY: IndexAttrBitmapKind = 3;
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_IDENTITY_KEY: IndexAttrBitmapKind = 4;
pub type IndexAttrBitmapKind = u32;
extern "C" {
    pub fn RelationGetIndexAttrBitmap(
        relation: Relation,
        keyAttrs: IndexAttrBitmapKind,
    ) -> *mut Bitmapset;
}
extern "C" {
    pub fn RelationGetExclusionInfo(
        indexRelation: Relation,
        operators: *mut *mut Oid,
        procs: *mut *mut Oid,
        strategies: *mut *mut uint16,
    );
}
extern "C" {
    pub fn RelationSetIndexList(relation: Relation, indexIds: *mut List, oidIndex: Oid);
}
extern "C" {
    pub fn RelationInitIndexAccessInfo(relation: Relation);
}
extern "C" {
    pub fn GetRelationPublicationActions(relation: Relation) -> *mut PublicationActions;
}
extern "C" {
    pub fn errtable(rel: Relation) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errtablecol(rel: Relation, attnum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errtablecolname(
        rel: Relation,
        colname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errtableconstraint(
        rel: Relation,
        conname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RelationCacheInitialize();
}
extern "C" {
    pub fn RelationCacheInitializePhase2();
}
extern "C" {
    pub fn RelationCacheInitializePhase3();
}
extern "C" {
    pub fn RelationBuildLocalRelation(
        relname: *const ::std::os::raw::c_char,
        relnamespace: Oid,
        tupDesc: TupleDesc,
        relid: Oid,
        relfilenode: Oid,
        reltablespace: Oid,
        shared_relation: bool,
        mapped_relation: bool,
        relpersistence: ::std::os::raw::c_char,
        relkind: ::std::os::raw::c_char,
    ) -> Relation;
}
extern "C" {
    pub fn RelationSetNewRelfilenode(
        relation: Relation,
        persistence: ::std::os::raw::c_char,
        freezeXid: TransactionId,
        minmulti: MultiXactId,
    );
}
extern "C" {
    pub fn RelationForgetRelation(rid: Oid);
}
extern "C" {
    pub fn RelationCacheInvalidateEntry(relationId: Oid);
}
extern "C" {
    pub fn RelationCacheInvalidate();
}
extern "C" {
    pub fn RelationCloseSmgrByOid(relationId: Oid);
}
extern "C" {
    pub fn AtEOXact_RelationCache(isCommit: bool);
}
extern "C" {
    pub fn AtEOSubXact_RelationCache(
        isCommit: bool,
        mySubid: SubTransactionId,
        parentSubid: SubTransactionId,
    );
}
extern "C" {
    pub fn RelationIdIsInInitFile(relationId: Oid) -> bool;
}
extern "C" {
    pub fn RelationCacheInitFilePreInvalidate();
}
extern "C" {
    pub fn RelationCacheInitFilePostInvalidate();
}
extern "C" {
    pub fn RelationCacheInitFileRemove();
}
extern "C" {
    #[link_name = "\u{1}criticalRelcachesBuilt"]
    pub static mut criticalRelcachesBuilt: bool;
}
extern "C" {
    #[link_name = "\u{1}criticalSharedRelcachesBuilt"]
    pub static mut criticalSharedRelcachesBuilt: bool;
}
pub type HeapTupleHeader = *mut HeapTupleHeaderData;
pub type MinimalTuple = *mut MinimalTupleData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HeapTupleData {
    pub t_len: uint32,
    pub t_self: ItemPointerData,
    pub t_tableOid: Oid,
    pub t_data: HeapTupleHeader,
}
#[test]
fn bindgen_test_layout_HeapTupleData() {
    assert_eq!(
        ::std::mem::size_of::<HeapTupleData>(),
        24usize,
        concat!("Size of: ", stringify!(HeapTupleData))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapTupleData>(),
        8usize,
        concat!("Alignment of ", stringify!(HeapTupleData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleData>())).t_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleData),
            "::",
            stringify!(t_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleData>())).t_self as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleData),
            "::",
            stringify!(t_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleData>())).t_tableOid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleData),
            "::",
            stringify!(t_tableOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleData>())).t_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleData),
            "::",
            stringify!(t_data)
        )
    );
}
pub type HeapTuple = *mut HeapTupleData;
extern "C" {
    pub fn HeapTupleHeaderGetCmin(tup: HeapTupleHeader) -> CommandId;
}
extern "C" {
    pub fn HeapTupleHeaderGetCmax(tup: HeapTupleHeader) -> CommandId;
}
extern "C" {
    pub fn HeapTupleHeaderAdjustCmax(
        tup: HeapTupleHeader,
        cmax: *mut CommandId,
        iscombo: *mut bool,
    );
}
extern "C" {
    pub fn HeapTupleGetUpdateXid(tuple: HeapTupleHeader) -> TransactionId;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
pub type XLogRecPtr = uint64;
pub type XLogSegNo = uint64;
pub type TimeLineID = uint32;
pub type RepOriginId = uint16;
pub type Timestamp = int64;
pub type TimestampTz = int64;
pub type TimeOffset = int64;
pub type fsec_t = int32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Interval {
    pub time: TimeOffset,
    pub day: int32,
    pub month: int32,
}
#[test]
fn bindgen_test_layout_Interval() {
    assert_eq!(
        ::std::mem::size_of::<Interval>(),
        16usize,
        concat!("Size of: ", stringify!(Interval))
    );
    assert_eq!(
        ::std::mem::align_of::<Interval>(),
        8usize,
        concat!("Alignment of ", stringify!(Interval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Interval>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Interval),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Interval>())).day as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Interval),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Interval>())).month as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Interval),
            "::",
            stringify!(month)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StringInfoData {
    pub data: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub maxlen: ::std::os::raw::c_int,
    pub cursor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StringInfoData() {
    assert_eq!(
        ::std::mem::size_of::<StringInfoData>(),
        24usize,
        concat!("Size of: ", stringify!(StringInfoData))
    );
    assert_eq!(
        ::std::mem::align_of::<StringInfoData>(),
        8usize,
        concat!("Alignment of ", stringify!(StringInfoData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StringInfoData>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StringInfoData),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StringInfoData>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StringInfoData),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StringInfoData>())).maxlen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StringInfoData),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StringInfoData>())).cursor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StringInfoData),
            "::",
            stringify!(cursor)
        )
    );
}
pub type StringInfo = *mut StringInfoData;
extern "C" {
    pub fn makeStringInfo() -> StringInfo;
}
extern "C" {
    pub fn initStringInfo(str: StringInfo);
}
extern "C" {
    pub fn resetStringInfo(str: StringInfo);
}
extern "C" {
    pub fn appendStringInfo(str: StringInfo, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn appendStringInfoVA(
        str: StringInfo,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn appendStringInfoString(str: StringInfo, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn appendStringInfoChar(str: StringInfo, ch: ::std::os::raw::c_char);
}
extern "C" {
    pub fn appendStringInfoSpaces(str: StringInfo, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn appendBinaryStringInfo(
        str: StringInfo,
        data: *const ::std::os::raw::c_char,
        datalen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn appendBinaryStringInfoNT(
        str: StringInfo,
        data: *const ::std::os::raw::c_char,
        datalen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn enlargeStringInfo(str: StringInfo, needed: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pairingheap_node {
    pub first_child: *mut pairingheap_node,
    pub next_sibling: *mut pairingheap_node,
    pub prev_or_parent: *mut pairingheap_node,
}
#[test]
fn bindgen_test_layout_pairingheap_node() {
    assert_eq!(
        ::std::mem::size_of::<pairingheap_node>(),
        24usize,
        concat!("Size of: ", stringify!(pairingheap_node))
    );
    assert_eq!(
        ::std::mem::align_of::<pairingheap_node>(),
        8usize,
        concat!("Alignment of ", stringify!(pairingheap_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap_node>())).first_child as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap_node),
            "::",
            stringify!(first_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap_node>())).next_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap_node),
            "::",
            stringify!(next_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap_node>())).prev_or_parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap_node),
            "::",
            stringify!(prev_or_parent)
        )
    );
}
pub type pairingheap_comparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const pairingheap_node,
        b: *const pairingheap_node,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pairingheap {
    pub ph_compare: pairingheap_comparator,
    pub ph_arg: *mut ::std::os::raw::c_void,
    pub ph_root: *mut pairingheap_node,
}
#[test]
fn bindgen_test_layout_pairingheap() {
    assert_eq!(
        ::std::mem::size_of::<pairingheap>(),
        24usize,
        concat!("Size of: ", stringify!(pairingheap))
    );
    assert_eq!(
        ::std::mem::align_of::<pairingheap>(),
        8usize,
        concat!("Alignment of ", stringify!(pairingheap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap>())).ph_compare as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap),
            "::",
            stringify!(ph_compare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap>())).ph_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap),
            "::",
            stringify!(ph_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap>())).ph_root as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap),
            "::",
            stringify!(ph_root)
        )
    );
}
extern "C" {
    pub fn pairingheap_allocate(
        compare: pairingheap_comparator,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut pairingheap;
}
extern "C" {
    pub fn pairingheap_free(heap: *mut pairingheap);
}
extern "C" {
    pub fn pairingheap_add(heap: *mut pairingheap, node: *mut pairingheap_node);
}
extern "C" {
    pub fn pairingheap_first(heap: *mut pairingheap) -> *mut pairingheap_node;
}
extern "C" {
    pub fn pairingheap_remove_first(heap: *mut pairingheap) -> *mut pairingheap_node;
}
extern "C" {
    pub fn pairingheap_remove(heap: *mut pairingheap, node: *mut pairingheap_node);
}
pub type Buffer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BufferAccessStrategyData {
    _unused: [u8; 0],
}
pub type BufferAccessStrategy = *mut BufferAccessStrategyData;
pub type Snapshot = *mut SnapshotData;
pub type SnapshotSatisfiesFunc = ::std::option::Option<
    unsafe extern "C" fn(htup: HeapTuple, snapshot: Snapshot, buffer: Buffer) -> bool,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SnapshotData {
    pub satisfies: SnapshotSatisfiesFunc,
    pub xmin: TransactionId,
    pub xmax: TransactionId,
    pub xip: *mut TransactionId,
    pub xcnt: uint32,
    pub subxip: *mut TransactionId,
    pub subxcnt: int32,
    pub suboverflowed: bool,
    pub takenDuringRecovery: bool,
    pub copied: bool,
    pub curcid: CommandId,
    pub speculativeToken: uint32,
    pub active_count: uint32,
    pub regd_count: uint32,
    pub ph_node: pairingheap_node,
    pub whenTaken: TimestampTz,
    pub lsn: XLogRecPtr,
}
#[test]
fn bindgen_test_layout_SnapshotData() {
    assert_eq!(
        ::std::mem::size_of::<SnapshotData>(),
        104usize,
        concat!("Size of: ", stringify!(SnapshotData))
    );
    assert_eq!(
        ::std::mem::align_of::<SnapshotData>(),
        8usize,
        concat!("Alignment of ", stringify!(SnapshotData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).satisfies as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(satisfies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).xmin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(xmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).xmax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(xmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).xip as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(xip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).xcnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(xcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).subxip as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(subxip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).subxcnt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(subxcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).suboverflowed as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(suboverflowed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SnapshotData>())).takenDuringRecovery as *const _ as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(takenDuringRecovery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).copied as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(copied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).curcid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(curcid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).speculativeToken as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(speculativeToken)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).active_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(active_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).regd_count as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(regd_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).ph_node as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(ph_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).whenTaken as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(whenTaken)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).lsn as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(lsn)
        )
    );
}
pub const HTSU_Result_HeapTupleMayBeUpdated: HTSU_Result = 0;
pub const HTSU_Result_HeapTupleInvisible: HTSU_Result = 1;
pub const HTSU_Result_HeapTupleSelfUpdated: HTSU_Result = 2;
pub const HTSU_Result_HeapTupleUpdated: HTSU_Result = 3;
pub const HTSU_Result_HeapTupleBeingUpdated: HTSU_Result = 4;
pub const HTSU_Result_HeapTupleWouldBlock: HTSU_Result = 5;
pub type HTSU_Result = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexBuildResult {
    pub heap_tuples: f64,
    pub index_tuples: f64,
}
#[test]
fn bindgen_test_layout_IndexBuildResult() {
    assert_eq!(
        ::std::mem::size_of::<IndexBuildResult>(),
        16usize,
        concat!("Size of: ", stringify!(IndexBuildResult))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexBuildResult>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexBuildResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexBuildResult>())).heap_tuples as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBuildResult),
            "::",
            stringify!(heap_tuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexBuildResult>())).index_tuples as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBuildResult),
            "::",
            stringify!(index_tuples)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexVacuumInfo {
    pub index: Relation,
    pub analyze_only: bool,
    pub estimated_count: bool,
    pub message_level: ::std::os::raw::c_int,
    pub num_heap_tuples: f64,
    pub strategy: BufferAccessStrategy,
}
#[test]
fn bindgen_test_layout_IndexVacuumInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexVacuumInfo>(),
        32usize,
        concat!("Size of: ", stringify!(IndexVacuumInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexVacuumInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexVacuumInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).analyze_only as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(analyze_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).estimated_count as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(estimated_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).message_level as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(message_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).num_heap_tuples as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(num_heap_tuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).strategy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(strategy)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexBulkDeleteResult {
    pub num_pages: BlockNumber,
    pub pages_removed: BlockNumber,
    pub estimated_count: bool,
    pub num_index_tuples: f64,
    pub tuples_removed: f64,
    pub pages_deleted: BlockNumber,
    pub pages_free: BlockNumber,
}
#[test]
fn bindgen_test_layout_IndexBulkDeleteResult() {
    assert_eq!(
        ::std::mem::size_of::<IndexBulkDeleteResult>(),
        40usize,
        concat!("Size of: ", stringify!(IndexBulkDeleteResult))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexBulkDeleteResult>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexBulkDeleteResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexBulkDeleteResult>())).num_pages as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(num_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).pages_removed as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(pages_removed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).estimated_count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(estimated_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).num_index_tuples as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(num_index_tuples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).tuples_removed as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(tuples_removed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).pages_deleted as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(pages_deleted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).pages_free as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(pages_free)
        )
    );
}
pub type IndexBulkDeleteCallback = ::std::option::Option<
    unsafe extern "C" fn(itemptr: ItemPointer, state: *mut ::std::os::raw::c_void) -> bool,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexScanDescData {
    _unused: [u8; 0],
}
pub type IndexScanDesc = *mut IndexScanDescData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SysScanDescData {
    _unused: [u8; 0],
}
pub type SysScanDesc = *mut SysScanDescData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParallelIndexScanDescData {
    _unused: [u8; 0],
}
pub type ParallelIndexScanDesc = *mut ParallelIndexScanDescData;
pub const IndexUniqueCheck_UNIQUE_CHECK_NO: IndexUniqueCheck = 0;
pub const IndexUniqueCheck_UNIQUE_CHECK_YES: IndexUniqueCheck = 1;
pub const IndexUniqueCheck_UNIQUE_CHECK_PARTIAL: IndexUniqueCheck = 2;
pub const IndexUniqueCheck_UNIQUE_CHECK_EXISTING: IndexUniqueCheck = 3;
pub type IndexUniqueCheck = u32;
extern "C" {
    pub fn index_open(relationId: Oid, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn index_close(relation: Relation, lockmode: LOCKMODE);
}
extern "C" {
    pub fn index_insert(
        indexRelation: Relation,
        values: *mut Datum,
        isnull: *mut bool,
        heap_t_ctid: ItemPointer,
        heapRelation: Relation,
        checkUnique: IndexUniqueCheck,
        indexInfo: *mut IndexInfo,
    ) -> bool;
}
extern "C" {
    pub fn index_beginscan(
        heapRelation: Relation,
        indexRelation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        norderbys: ::std::os::raw::c_int,
    ) -> IndexScanDesc;
}
extern "C" {
    pub fn index_beginscan_bitmap(
        indexRelation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
    ) -> IndexScanDesc;
}
extern "C" {
    pub fn index_rescan(
        scan: IndexScanDesc,
        keys: ScanKey,
        nkeys: ::std::os::raw::c_int,
        orderbys: ScanKey,
        norderbys: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn index_endscan(scan: IndexScanDesc);
}
extern "C" {
    pub fn index_markpos(scan: IndexScanDesc);
}
extern "C" {
    pub fn index_restrpos(scan: IndexScanDesc);
}
extern "C" {
    pub fn index_parallelscan_estimate(indexrel: Relation, snapshot: Snapshot) -> Size;
}
extern "C" {
    pub fn index_parallelscan_initialize(
        heaprel: Relation,
        indexrel: Relation,
        snapshot: Snapshot,
        target: ParallelIndexScanDesc,
    );
}
extern "C" {
    pub fn index_parallelrescan(scan: IndexScanDesc);
}
extern "C" {
    pub fn index_beginscan_parallel(
        heaprel: Relation,
        indexrel: Relation,
        nkeys: ::std::os::raw::c_int,
        norderbys: ::std::os::raw::c_int,
        pscan: ParallelIndexScanDesc,
    ) -> IndexScanDesc;
}
extern "C" {
    pub fn index_getnext_tid(scan: IndexScanDesc, direction: ScanDirection) -> ItemPointer;
}
extern "C" {
    pub fn index_fetch_heap(scan: IndexScanDesc) -> HeapTuple;
}
extern "C" {
    pub fn index_getnext(scan: IndexScanDesc, direction: ScanDirection) -> HeapTuple;
}
extern "C" {
    pub fn index_getbitmap(scan: IndexScanDesc, bitmap: *mut TIDBitmap) -> int64;
}
extern "C" {
    pub fn index_bulk_delete(
        info: *mut IndexVacuumInfo,
        stats: *mut IndexBulkDeleteResult,
        callback: IndexBulkDeleteCallback,
        callback_state: *mut ::std::os::raw::c_void,
    ) -> *mut IndexBulkDeleteResult;
}
extern "C" {
    pub fn index_vacuum_cleanup(
        info: *mut IndexVacuumInfo,
        stats: *mut IndexBulkDeleteResult,
    ) -> *mut IndexBulkDeleteResult;
}
extern "C" {
    pub fn index_can_return(indexRelation: Relation, attno: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn index_getprocid(irel: Relation, attnum: AttrNumber, procnum: uint16) -> RegProcedure;
}
extern "C" {
    pub fn index_getprocinfo(irel: Relation, attnum: AttrNumber, procnum: uint16) -> *mut FmgrInfo;
}
extern "C" {
    pub fn RelationGetIndexScan(
        indexRelation: Relation,
        nkeys: ::std::os::raw::c_int,
        norderbys: ::std::os::raw::c_int,
    ) -> IndexScanDesc;
}
extern "C" {
    pub fn IndexScanEnd(scan: IndexScanDesc);
}
extern "C" {
    pub fn BuildIndexValueDescription(
        indexRelation: Relation,
        values: *mut Datum,
        isnull: *mut bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn systable_beginscan(
        heapRelation: Relation,
        indexId: Oid,
        indexOK: bool,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> SysScanDesc;
}
extern "C" {
    pub fn systable_getnext(sysscan: SysScanDesc) -> HeapTuple;
}
extern "C" {
    pub fn systable_recheck_tuple(sysscan: SysScanDesc, tup: HeapTuple) -> bool;
}
extern "C" {
    pub fn systable_endscan(sysscan: SysScanDesc);
}
extern "C" {
    pub fn systable_beginscan_ordered(
        heapRelation: Relation,
        indexRelation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> SysScanDesc;
}
extern "C" {
    pub fn systable_getnext_ordered(sysscan: SysScanDesc, direction: ScanDirection) -> HeapTuple;
}
extern "C" {
    pub fn systable_endscan_ordered(sysscan: SysScanDesc);
}
pub const IndexAMProperty_AMPROP_UNKNOWN: IndexAMProperty = 0;
pub const IndexAMProperty_AMPROP_ASC: IndexAMProperty = 1;
pub const IndexAMProperty_AMPROP_DESC: IndexAMProperty = 2;
pub const IndexAMProperty_AMPROP_NULLS_FIRST: IndexAMProperty = 3;
pub const IndexAMProperty_AMPROP_NULLS_LAST: IndexAMProperty = 4;
pub const IndexAMProperty_AMPROP_ORDERABLE: IndexAMProperty = 5;
pub const IndexAMProperty_AMPROP_DISTANCE_ORDERABLE: IndexAMProperty = 6;
pub const IndexAMProperty_AMPROP_RETURNABLE: IndexAMProperty = 7;
pub const IndexAMProperty_AMPROP_SEARCH_ARRAY: IndexAMProperty = 8;
pub const IndexAMProperty_AMPROP_SEARCH_NULLS: IndexAMProperty = 9;
pub const IndexAMProperty_AMPROP_CLUSTERABLE: IndexAMProperty = 10;
pub const IndexAMProperty_AMPROP_INDEX_SCAN: IndexAMProperty = 11;
pub const IndexAMProperty_AMPROP_BITMAP_SCAN: IndexAMProperty = 12;
pub const IndexAMProperty_AMPROP_BACKWARD_SCAN: IndexAMProperty = 13;
pub const IndexAMProperty_AMPROP_CAN_ORDER: IndexAMProperty = 14;
pub const IndexAMProperty_AMPROP_CAN_UNIQUE: IndexAMProperty = 15;
pub const IndexAMProperty_AMPROP_CAN_MULTI_COL: IndexAMProperty = 16;
pub const IndexAMProperty_AMPROP_CAN_EXCLUDE: IndexAMProperty = 17;
pub const IndexAMProperty_AMPROP_CAN_INCLUDE: IndexAMProperty = 18;
pub type IndexAMProperty = u32;
pub type ambuild_function = ::std::option::Option<
    unsafe extern "C" fn(
        heapRelation: Relation,
        indexRelation: Relation,
        indexInfo: *mut IndexInfo,
    ) -> *mut IndexBuildResult,
>;
pub type ambuildempty_function =
    ::std::option::Option<unsafe extern "C" fn(indexRelation: Relation)>;
pub type aminsert_function = ::std::option::Option<
    unsafe extern "C" fn(
        indexRelation: Relation,
        values: *mut Datum,
        isnull: *mut bool,
        heap_tid: ItemPointer,
        heapRelation: Relation,
        checkUnique: IndexUniqueCheck,
        indexInfo: *mut IndexInfo,
    ) -> bool,
>;
pub type ambulkdelete_function = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut IndexVacuumInfo,
        stats: *mut IndexBulkDeleteResult,
        callback: IndexBulkDeleteCallback,
        callback_state: *mut ::std::os::raw::c_void,
    ) -> *mut IndexBulkDeleteResult,
>;
pub type amvacuumcleanup_function = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut IndexVacuumInfo,
        stats: *mut IndexBulkDeleteResult,
    ) -> *mut IndexBulkDeleteResult,
>;
pub type amcanreturn_function = ::std::option::Option<
    unsafe extern "C" fn(indexRelation: Relation, attno: ::std::os::raw::c_int) -> bool,
>;
pub type amcostestimate_function = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut PlannerInfo,
        path: *mut IndexPath,
        loop_count: f64,
        indexStartupCost: *mut Cost,
        indexTotalCost: *mut Cost,
        indexSelectivity: *mut Selectivity,
        indexCorrelation: *mut f64,
        indexPages: *mut f64,
    ),
>;
pub type amoptions_function =
    ::std::option::Option<unsafe extern "C" fn(reloptions: Datum, validate: bool) -> *mut bytea>;
pub type amproperty_function = ::std::option::Option<
    unsafe extern "C" fn(
        index_oid: Oid,
        attno: ::std::os::raw::c_int,
        prop: IndexAMProperty,
        propname: *const ::std::os::raw::c_char,
        res: *mut bool,
        isnull: *mut bool,
    ) -> bool,
>;
pub type amvalidate_function = ::std::option::Option<unsafe extern "C" fn(opclassoid: Oid) -> bool>;
pub type ambeginscan_function = ::std::option::Option<
    unsafe extern "C" fn(
        indexRelation: Relation,
        nkeys: ::std::os::raw::c_int,
        norderbys: ::std::os::raw::c_int,
    ) -> IndexScanDesc,
>;
pub type amrescan_function = ::std::option::Option<
    unsafe extern "C" fn(
        scan: IndexScanDesc,
        keys: ScanKey,
        nkeys: ::std::os::raw::c_int,
        orderbys: ScanKey,
        norderbys: ::std::os::raw::c_int,
    ),
>;
pub type amgettuple_function = ::std::option::Option<
    unsafe extern "C" fn(scan: IndexScanDesc, direction: ScanDirection) -> bool,
>;
pub type amgetbitmap_function =
    ::std::option::Option<unsafe extern "C" fn(scan: IndexScanDesc, tbm: *mut TIDBitmap) -> int64>;
pub type amendscan_function = ::std::option::Option<unsafe extern "C" fn(scan: IndexScanDesc)>;
pub type ammarkpos_function = ::std::option::Option<unsafe extern "C" fn(scan: IndexScanDesc)>;
pub type amrestrpos_function = ::std::option::Option<unsafe extern "C" fn(scan: IndexScanDesc)>;
pub type amestimateparallelscan_function = ::std::option::Option<unsafe extern "C" fn() -> Size>;
pub type aminitparallelscan_function =
    ::std::option::Option<unsafe extern "C" fn(target: *mut ::std::os::raw::c_void)>;
pub type amparallelrescan_function =
    ::std::option::Option<unsafe extern "C" fn(scan: IndexScanDesc)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexAmRoutine {
    pub type_: NodeTag,
    pub amstrategies: uint16,
    pub amsupport: uint16,
    pub amcanorder: bool,
    pub amcanorderbyop: bool,
    pub amcanbackward: bool,
    pub amcanunique: bool,
    pub amcanmulticol: bool,
    pub amoptionalkey: bool,
    pub amsearcharray: bool,
    pub amsearchnulls: bool,
    pub amstorage: bool,
    pub amclusterable: bool,
    pub ampredlocks: bool,
    pub amcanparallel: bool,
    pub amcaninclude: bool,
    pub amkeytype: Oid,
    pub ambuild: ambuild_function,
    pub ambuildempty: ambuildempty_function,
    pub aminsert: aminsert_function,
    pub ambulkdelete: ambulkdelete_function,
    pub amvacuumcleanup: amvacuumcleanup_function,
    pub amcanreturn: amcanreturn_function,
    pub amcostestimate: amcostestimate_function,
    pub amoptions: amoptions_function,
    pub amproperty: amproperty_function,
    pub amvalidate: amvalidate_function,
    pub ambeginscan: ambeginscan_function,
    pub amrescan: amrescan_function,
    pub amgettuple: amgettuple_function,
    pub amgetbitmap: amgetbitmap_function,
    pub amendscan: amendscan_function,
    pub ammarkpos: ammarkpos_function,
    pub amrestrpos: amrestrpos_function,
    pub amestimateparallelscan: amestimateparallelscan_function,
    pub aminitparallelscan: aminitparallelscan_function,
    pub amparallelrescan: amparallelrescan_function,
}
#[test]
fn bindgen_test_layout_IndexAmRoutine() {
    assert_eq!(
        ::std::mem::size_of::<IndexAmRoutine>(),
        192usize,
        concat!("Size of: ", stringify!(IndexAmRoutine))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexAmRoutine>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexAmRoutine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amstrategies as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amstrategies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amsupport as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amsupport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcanorder as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcanorder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcanorderbyop as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcanorderbyop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcanbackward as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcanbackward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcanunique as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcanunique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcanmulticol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcanmulticol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amoptionalkey as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amoptionalkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amsearcharray as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amsearcharray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amsearchnulls as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amsearchnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amstorage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amstorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amclusterable as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amclusterable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).ampredlocks as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(ampredlocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcanparallel as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcanparallel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcaninclude as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcaninclude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amkeytype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amkeytype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).ambuild as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(ambuild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).ambuildempty as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(ambuildempty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).aminsert as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(aminsert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).ambulkdelete as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(ambulkdelete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amvacuumcleanup as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amvacuumcleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcanreturn as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcanreturn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amcostestimate as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amcostestimate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amoptions as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amoptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amproperty as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amproperty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amvalidate as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amvalidate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).ambeginscan as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(ambeginscan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amrescan as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amrescan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amgettuple as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amgettuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amgetbitmap as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amgetbitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amendscan as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amendscan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).ammarkpos as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(ammarkpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amrestrpos as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amrestrpos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexAmRoutine>())).amestimateparallelscan as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amestimateparallelscan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexAmRoutine>())).aminitparallelscan as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(aminitparallelscan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAmRoutine>())).amparallelrescan as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAmRoutine),
            "::",
            stringify!(amparallelrescan)
        )
    );
}
extern "C" {
    pub fn GetIndexAmRoutine(amhandler: Oid) -> *mut IndexAmRoutine;
}
extern "C" {
    pub fn GetIndexAmRoutineByAmId(amoid: Oid, noerror: bool) -> *mut IndexAmRoutine;
}
pub type BackendId = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}MyBackendId"]
    pub static mut MyBackendId: BackendId;
}
extern "C" {
    #[link_name = "\u{1}ParallelMasterBackendId"]
    pub static mut ParallelMasterBackendId: BackendId;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct proclist_node {
    pub next: ::std::os::raw::c_int,
    pub prev: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_proclist_node() {
    assert_eq!(
        ::std::mem::size_of::<proclist_node>(),
        8usize,
        concat!("Size of: ", stringify!(proclist_node))
    );
    assert_eq!(
        ::std::mem::align_of::<proclist_node>(),
        4usize,
        concat!("Alignment of ", stringify!(proclist_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_node>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_node>())).prev as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_node),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct proclist_head {
    pub head: ::std::os::raw::c_int,
    pub tail: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_proclist_head() {
    assert_eq!(
        ::std::mem::size_of::<proclist_head>(),
        8usize,
        concat!("Size of: ", stringify!(proclist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<proclist_head>(),
        4usize,
        concat!("Alignment of ", stringify!(proclist_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_head>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_head),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_head>())).tail as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_head),
            "::",
            stringify!(tail)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct proclist_mutable_iter {
    pub cur: ::std::os::raw::c_int,
    pub next: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_proclist_mutable_iter() {
    assert_eq!(
        ::std::mem::size_of::<proclist_mutable_iter>(),
        8usize,
        concat!("Size of: ", stringify!(proclist_mutable_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<proclist_mutable_iter>(),
        4usize,
        concat!("Alignment of ", stringify!(proclist_mutable_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_mutable_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_mutable_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_mutable_iter>())).next as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_mutable_iter),
            "::",
            stringify!(next)
        )
    );
}
pub type slock_t = ::std::os::raw::c_uchar;
extern "C" {
    #[link_name = "\u{1}dummy_spinlock"]
    pub static mut dummy_spinlock: slock_t;
}
extern "C" {
    pub fn s_lock(
        lock: *mut slock_t,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_spins_per_delay(shared_spins_per_delay: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_spins_per_delay(
        shared_spins_per_delay: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SpinDelayStatus {
    pub spins: ::std::os::raw::c_int,
    pub delays: ::std::os::raw::c_int,
    pub cur_delay: ::std::os::raw::c_int,
    pub file: *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub func: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SpinDelayStatus() {
    assert_eq!(
        ::std::mem::size_of::<SpinDelayStatus>(),
        40usize,
        concat!("Size of: ", stringify!(SpinDelayStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<SpinDelayStatus>(),
        8usize,
        concat!("Alignment of ", stringify!(SpinDelayStatus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).spins as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).delays as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(delays)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).cur_delay as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(cur_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).file as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).line as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).func as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(func)
        )
    );
}
extern "C" {
    pub fn perform_spin_delay(status: *mut SpinDelayStatus);
}
extern "C" {
    pub fn finish_spin_delay(status: *mut SpinDelayStatus);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LWLock {
    pub tranche: uint16,
    pub state: pg_atomic_uint32,
    pub waiters: proclist_head,
}
#[test]
fn bindgen_test_layout_LWLock() {
    assert_eq!(
        ::std::mem::size_of::<LWLock>(),
        16usize,
        concat!("Size of: ", stringify!(LWLock))
    );
    assert_eq!(
        ::std::mem::align_of::<LWLock>(),
        4usize,
        concat!("Alignment of ", stringify!(LWLock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LWLock>())).tranche as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LWLock),
            "::",
            stringify!(tranche)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LWLock>())).state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LWLock),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LWLock>())).waiters as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LWLock),
            "::",
            stringify!(waiters)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LWLockPadded {
    pub lock: LWLock,
    pub pad: [::std::os::raw::c_char; 128usize],
    _bindgen_union_align: [u32; 32usize],
}
#[test]
fn bindgen_test_layout_LWLockPadded() {
    assert_eq!(
        ::std::mem::size_of::<LWLockPadded>(),
        128usize,
        concat!("Size of: ", stringify!(LWLockPadded))
    );
    assert_eq!(
        ::std::mem::align_of::<LWLockPadded>(),
        4usize,
        concat!("Alignment of ", stringify!(LWLockPadded))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LWLockPadded>())).lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LWLockPadded),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LWLockPadded>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LWLockPadded),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LWLockMinimallyPadded {
    pub lock: LWLock,
    pub pad: [::std::os::raw::c_char; 32usize],
    _bindgen_union_align: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_LWLockMinimallyPadded() {
    assert_eq!(
        ::std::mem::size_of::<LWLockMinimallyPadded>(),
        32usize,
        concat!("Size of: ", stringify!(LWLockMinimallyPadded))
    );
    assert_eq!(
        ::std::mem::align_of::<LWLockMinimallyPadded>(),
        4usize,
        concat!("Alignment of ", stringify!(LWLockMinimallyPadded))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LWLockMinimallyPadded>())).lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LWLockMinimallyPadded),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LWLockMinimallyPadded>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LWLockMinimallyPadded),
            "::",
            stringify!(pad)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}MainLWLockArray"]
    pub static mut MainLWLockArray: *mut LWLockPadded;
}
extern "C" {
    #[link_name = "\u{1}MainLWLockNames"]
    pub static mut MainLWLockNames: [*mut ::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NamedLWLockTranche {
    pub trancheId: ::std::os::raw::c_int,
    pub trancheName: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NamedLWLockTranche() {
    assert_eq!(
        ::std::mem::size_of::<NamedLWLockTranche>(),
        16usize,
        concat!("Size of: ", stringify!(NamedLWLockTranche))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedLWLockTranche>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedLWLockTranche))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedLWLockTranche>())).trancheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedLWLockTranche),
            "::",
            stringify!(trancheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedLWLockTranche>())).trancheName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedLWLockTranche),
            "::",
            stringify!(trancheName)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}NamedLWLockTrancheArray"]
    pub static mut NamedLWLockTrancheArray: *mut NamedLWLockTranche;
}
extern "C" {
    #[link_name = "\u{1}NamedLWLockTrancheRequests"]
    pub static mut NamedLWLockTrancheRequests: ::std::os::raw::c_int;
}
pub const LWLockMode_LW_EXCLUSIVE: LWLockMode = 0;
pub const LWLockMode_LW_SHARED: LWLockMode = 1;
pub const LWLockMode_LW_WAIT_UNTIL_FREE: LWLockMode = 2;
pub type LWLockMode = u32;
extern "C" {
    pub fn LWLockAcquire(lock: *mut LWLock, mode: LWLockMode) -> bool;
}
extern "C" {
    pub fn LWLockConditionalAcquire(lock: *mut LWLock, mode: LWLockMode) -> bool;
}
extern "C" {
    pub fn LWLockAcquireOrWait(lock: *mut LWLock, mode: LWLockMode) -> bool;
}
extern "C" {
    pub fn LWLockRelease(lock: *mut LWLock);
}
extern "C" {
    pub fn LWLockReleaseClearVar(lock: *mut LWLock, valptr: *mut uint64, val: uint64);
}
extern "C" {
    pub fn LWLockReleaseAll();
}
extern "C" {
    pub fn LWLockHeldByMe(lock: *mut LWLock) -> bool;
}
extern "C" {
    pub fn LWLockHeldByMeInMode(lock: *mut LWLock, mode: LWLockMode) -> bool;
}
extern "C" {
    pub fn LWLockWaitForVar(
        lock: *mut LWLock,
        valptr: *mut uint64,
        oldval: uint64,
        newval: *mut uint64,
    ) -> bool;
}
extern "C" {
    pub fn LWLockUpdateVar(lock: *mut LWLock, valptr: *mut uint64, value: uint64);
}
extern "C" {
    pub fn LWLockShmemSize() -> Size;
}
extern "C" {
    pub fn CreateLWLocks();
}
extern "C" {
    pub fn InitLWLockAccess();
}
extern "C" {
    pub fn GetLWLockIdentifier(classId: uint32, eventId: uint16) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RequestNamedLWLockTranche(
        tranche_name: *const ::std::os::raw::c_char,
        num_lwlocks: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GetNamedLWLockTranche(tranche_name: *const ::std::os::raw::c_char) -> *mut LWLockPadded;
}
extern "C" {
    pub fn LWLockNewTrancheId() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LWLockRegisterTranche(
        tranche_id: ::std::os::raw::c_int,
        tranche_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn LWLockInitialize(lock: *mut LWLock, tranche_id: ::std::os::raw::c_int);
}
pub const BuiltinTrancheIds_LWTRANCHE_CLOG_BUFFERS: BuiltinTrancheIds = 46;
pub const BuiltinTrancheIds_LWTRANCHE_COMMITTS_BUFFERS: BuiltinTrancheIds = 47;
pub const BuiltinTrancheIds_LWTRANCHE_SUBTRANS_BUFFERS: BuiltinTrancheIds = 48;
pub const BuiltinTrancheIds_LWTRANCHE_MXACTOFFSET_BUFFERS: BuiltinTrancheIds = 49;
pub const BuiltinTrancheIds_LWTRANCHE_MXACTMEMBER_BUFFERS: BuiltinTrancheIds = 50;
pub const BuiltinTrancheIds_LWTRANCHE_ASYNC_BUFFERS: BuiltinTrancheIds = 51;
pub const BuiltinTrancheIds_LWTRANCHE_OLDSERXID_BUFFERS: BuiltinTrancheIds = 52;
pub const BuiltinTrancheIds_LWTRANCHE_WAL_INSERT: BuiltinTrancheIds = 53;
pub const BuiltinTrancheIds_LWTRANCHE_BUFFER_CONTENT: BuiltinTrancheIds = 54;
pub const BuiltinTrancheIds_LWTRANCHE_BUFFER_IO_IN_PROGRESS: BuiltinTrancheIds = 55;
pub const BuiltinTrancheIds_LWTRANCHE_REPLICATION_ORIGIN: BuiltinTrancheIds = 56;
pub const BuiltinTrancheIds_LWTRANCHE_REPLICATION_SLOT_IO_IN_PROGRESS: BuiltinTrancheIds = 57;
pub const BuiltinTrancheIds_LWTRANCHE_PROC: BuiltinTrancheIds = 58;
pub const BuiltinTrancheIds_LWTRANCHE_BUFFER_MAPPING: BuiltinTrancheIds = 59;
pub const BuiltinTrancheIds_LWTRANCHE_LOCK_MANAGER: BuiltinTrancheIds = 60;
pub const BuiltinTrancheIds_LWTRANCHE_PREDICATE_LOCK_MANAGER: BuiltinTrancheIds = 61;
pub const BuiltinTrancheIds_LWTRANCHE_PARALLEL_HASH_JOIN: BuiltinTrancheIds = 62;
pub const BuiltinTrancheIds_LWTRANCHE_PARALLEL_QUERY_DSA: BuiltinTrancheIds = 63;
pub const BuiltinTrancheIds_LWTRANCHE_SESSION_DSA: BuiltinTrancheIds = 64;
pub const BuiltinTrancheIds_LWTRANCHE_SESSION_RECORD_TABLE: BuiltinTrancheIds = 65;
pub const BuiltinTrancheIds_LWTRANCHE_SESSION_TYPMOD_TABLE: BuiltinTrancheIds = 66;
pub const BuiltinTrancheIds_LWTRANCHE_SHARED_TUPLESTORE: BuiltinTrancheIds = 67;
pub const BuiltinTrancheIds_LWTRANCHE_TBM: BuiltinTrancheIds = 68;
pub const BuiltinTrancheIds_LWTRANCHE_PARALLEL_APPEND: BuiltinTrancheIds = 69;
pub const BuiltinTrancheIds_LWTRANCHE_FIRST_USER_DEFINED: BuiltinTrancheIds = 70;
pub type BuiltinTrancheIds = u32;
pub type LWLockId = *mut LWLock;
pub type HashValueFunc = ::std::option::Option<
    unsafe extern "C" fn(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32,
>;
pub type HashCompareFunc = ::std::option::Option<
    unsafe extern "C" fn(
        key1: *const ::std::os::raw::c_void,
        key2: *const ::std::os::raw::c_void,
        keysize: Size,
    ) -> ::std::os::raw::c_int,
>;
pub type HashCopyFunc = ::std::option::Option<
    unsafe extern "C" fn(
        dest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        keysize: Size,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type HashAllocFunc =
    ::std::option::Option<unsafe extern "C" fn(request: Size) -> *mut ::std::os::raw::c_void>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HASHELEMENT {
    pub link: *mut HASHELEMENT,
    pub hashvalue: uint32,
}
#[test]
fn bindgen_test_layout_HASHELEMENT() {
    assert_eq!(
        ::std::mem::size_of::<HASHELEMENT>(),
        16usize,
        concat!("Size of: ", stringify!(HASHELEMENT))
    );
    assert_eq!(
        ::std::mem::align_of::<HASHELEMENT>(),
        8usize,
        concat!("Alignment of ", stringify!(HASHELEMENT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHELEMENT>())).link as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHELEMENT),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHELEMENT>())).hashvalue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHELEMENT),
            "::",
            stringify!(hashvalue)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HASHHDR {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HTAB {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HASHCTL {
    pub num_partitions: ::std::os::raw::c_long,
    pub ssize: ::std::os::raw::c_long,
    pub dsize: ::std::os::raw::c_long,
    pub max_dsize: ::std::os::raw::c_long,
    pub ffactor: ::std::os::raw::c_long,
    pub keysize: Size,
    pub entrysize: Size,
    pub hash: HashValueFunc,
    pub match_: HashCompareFunc,
    pub keycopy: HashCopyFunc,
    pub alloc: HashAllocFunc,
    pub hcxt: MemoryContext,
    pub hctl: *mut HASHHDR,
}
#[test]
fn bindgen_test_layout_HASHCTL() {
    assert_eq!(
        ::std::mem::size_of::<HASHCTL>(),
        104usize,
        concat!("Size of: ", stringify!(HASHCTL))
    );
    assert_eq!(
        ::std::mem::align_of::<HASHCTL>(),
        8usize,
        concat!("Alignment of ", stringify!(HASHCTL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).num_partitions as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(num_partitions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).ssize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(ssize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).dsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(dsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).max_dsize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(max_dsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).ffactor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(ffactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).keysize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(keysize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).entrysize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(entrysize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).hash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).match_ as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).keycopy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(keycopy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).alloc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).hcxt as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(hcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).hctl as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(hctl)
        )
    );
}
pub const HASHACTION_HASH_FIND: HASHACTION = 0;
pub const HASHACTION_HASH_ENTER: HASHACTION = 1;
pub const HASHACTION_HASH_REMOVE: HASHACTION = 2;
pub const HASHACTION_HASH_ENTER_NULL: HASHACTION = 3;
pub type HASHACTION = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HASH_SEQ_STATUS {
    pub hashp: *mut HTAB,
    pub curBucket: uint32,
    pub curEntry: *mut HASHELEMENT,
}
#[test]
fn bindgen_test_layout_HASH_SEQ_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<HASH_SEQ_STATUS>(),
        24usize,
        concat!("Size of: ", stringify!(HASH_SEQ_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<HASH_SEQ_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(HASH_SEQ_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASH_SEQ_STATUS>())).hashp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_SEQ_STATUS),
            "::",
            stringify!(hashp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASH_SEQ_STATUS>())).curBucket as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_SEQ_STATUS),
            "::",
            stringify!(curBucket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASH_SEQ_STATUS>())).curEntry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_SEQ_STATUS),
            "::",
            stringify!(curEntry)
        )
    );
}
extern "C" {
    pub fn hash_create(
        tabname: *const ::std::os::raw::c_char,
        nelem: ::std::os::raw::c_long,
        info: *mut HASHCTL,
        flags: ::std::os::raw::c_int,
    ) -> *mut HTAB;
}
extern "C" {
    pub fn hash_destroy(hashp: *mut HTAB);
}
extern "C" {
    pub fn hash_stats(where_: *const ::std::os::raw::c_char, hashp: *mut HTAB);
}
extern "C" {
    pub fn hash_search(
        hashp: *mut HTAB,
        keyPtr: *const ::std::os::raw::c_void,
        action: HASHACTION,
        foundPtr: *mut bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn get_hash_value(hashp: *mut HTAB, keyPtr: *const ::std::os::raw::c_void) -> uint32;
}
extern "C" {
    pub fn hash_search_with_hash_value(
        hashp: *mut HTAB,
        keyPtr: *const ::std::os::raw::c_void,
        hashvalue: uint32,
        action: HASHACTION,
        foundPtr: *mut bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hash_update_hash_key(
        hashp: *mut HTAB,
        existingEntry: *mut ::std::os::raw::c_void,
        newKeyPtr: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn hash_get_num_entries(hashp: *mut HTAB) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn hash_seq_init(status: *mut HASH_SEQ_STATUS, hashp: *mut HTAB);
}
extern "C" {
    pub fn hash_seq_search(status: *mut HASH_SEQ_STATUS) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hash_seq_term(status: *mut HASH_SEQ_STATUS);
}
extern "C" {
    pub fn hash_freeze(hashp: *mut HTAB);
}
extern "C" {
    pub fn hash_estimate_size(num_entries: ::std::os::raw::c_long, entrysize: Size) -> Size;
}
extern "C" {
    pub fn hash_select_dirsize(num_entries: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn hash_get_shared_size(info: *mut HASHCTL, flags: ::std::os::raw::c_int) -> Size;
}
extern "C" {
    pub fn AtEOXact_HashTables(isCommit: bool);
}
extern "C" {
    pub fn AtEOSubXact_HashTables(isCommit: bool, nestDepth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn string_hash(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32;
}
extern "C" {
    pub fn tag_hash(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32;
}
extern "C" {
    pub fn uint32_hash(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32;
}
extern "C" {
    pub fn bitmap_hash(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32;
}
extern "C" {
    pub fn bitmap_match(
        key1: *const ::std::os::raw::c_void,
        key2: *const ::std::os::raw::c_void,
        keysize: Size,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SHM_QUEUE {
    pub prev: *mut SHM_QUEUE,
    pub next: *mut SHM_QUEUE,
}
#[test]
fn bindgen_test_layout_SHM_QUEUE() {
    assert_eq!(
        ::std::mem::size_of::<SHM_QUEUE>(),
        16usize,
        concat!("Size of: ", stringify!(SHM_QUEUE))
    );
    assert_eq!(
        ::std::mem::align_of::<SHM_QUEUE>(),
        8usize,
        concat!("Alignment of ", stringify!(SHM_QUEUE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SHM_QUEUE>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SHM_QUEUE),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SHM_QUEUE>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SHM_QUEUE),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn InitShmemAccess(seghdr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn InitShmemAllocation();
}
extern "C" {
    pub fn ShmemAlloc(size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ShmemAllocNoError(size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ShmemAllocUnlocked(size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ShmemAddrIsValid(addr: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn InitShmemIndex();
}
extern "C" {
    pub fn ShmemInitHash(
        name: *const ::std::os::raw::c_char,
        init_size: ::std::os::raw::c_long,
        max_size: ::std::os::raw::c_long,
        infoP: *mut HASHCTL,
        hash_flags: ::std::os::raw::c_int,
    ) -> *mut HTAB;
}
extern "C" {
    pub fn ShmemInitStruct(
        name: *const ::std::os::raw::c_char,
        size: Size,
        foundPtr: *mut bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn add_size(s1: Size, s2: Size) -> Size;
}
extern "C" {
    pub fn mul_size(s1: Size, s2: Size) -> Size;
}
extern "C" {
    pub fn RequestAddinShmemSpace(size: Size);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ShmemIndexEnt {
    pub key: [::std::os::raw::c_char; 48usize],
    pub location: *mut ::std::os::raw::c_void,
    pub size: Size,
}
#[test]
fn bindgen_test_layout_ShmemIndexEnt() {
    assert_eq!(
        ::std::mem::size_of::<ShmemIndexEnt>(),
        64usize,
        concat!("Size of: ", stringify!(ShmemIndexEnt))
    );
    assert_eq!(
        ::std::mem::align_of::<ShmemIndexEnt>(),
        8usize,
        concat!("Alignment of ", stringify!(ShmemIndexEnt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ShmemIndexEnt>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ShmemIndexEnt),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ShmemIndexEnt>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ShmemIndexEnt),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ShmemIndexEnt>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ShmemIndexEnt),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn SHMQueueInit(queue: *mut SHM_QUEUE);
}
extern "C" {
    pub fn SHMQueueElemInit(queue: *mut SHM_QUEUE);
}
extern "C" {
    pub fn SHMQueueDelete(queue: *mut SHM_QUEUE);
}
extern "C" {
    pub fn SHMQueueInsertBefore(queue: *mut SHM_QUEUE, elem: *mut SHM_QUEUE);
}
extern "C" {
    pub fn SHMQueueInsertAfter(queue: *mut SHM_QUEUE, elem: *mut SHM_QUEUE);
}
extern "C" {
    pub fn SHMQueueNext(
        queue: *const SHM_QUEUE,
        curElem: *const SHM_QUEUE,
        linkOffset: Size,
    ) -> Pointer;
}
extern "C" {
    pub fn SHMQueuePrev(
        queue: *const SHM_QUEUE,
        curElem: *const SHM_QUEUE,
        linkOffset: Size,
    ) -> Pointer;
}
extern "C" {
    pub fn SHMQueueEmpty(queue: *const SHM_QUEUE) -> bool;
}
extern "C" {
    pub fn SHMQueueIsDetached(queue: *const SHM_QUEUE) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PROC_QUEUE {
    pub links: SHM_QUEUE,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PROC_QUEUE() {
    assert_eq!(
        ::std::mem::size_of::<PROC_QUEUE>(),
        24usize,
        concat!("Size of: ", stringify!(PROC_QUEUE))
    );
    assert_eq!(
        ::std::mem::align_of::<PROC_QUEUE>(),
        8usize,
        concat!("Alignment of ", stringify!(PROC_QUEUE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_QUEUE>())).links as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_QUEUE),
            "::",
            stringify!(links)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_QUEUE>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_QUEUE),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}max_locks_per_xact"]
    pub static mut max_locks_per_xact: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VirtualTransactionId {
    pub backendId: BackendId,
    pub localTransactionId: LocalTransactionId,
}
#[test]
fn bindgen_test_layout_VirtualTransactionId() {
    assert_eq!(
        ::std::mem::size_of::<VirtualTransactionId>(),
        8usize,
        concat!("Size of: ", stringify!(VirtualTransactionId))
    );
    assert_eq!(
        ::std::mem::align_of::<VirtualTransactionId>(),
        4usize,
        concat!("Alignment of ", stringify!(VirtualTransactionId))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VirtualTransactionId>())).backendId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VirtualTransactionId),
            "::",
            stringify!(backendId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VirtualTransactionId>())).localTransactionId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VirtualTransactionId),
            "::",
            stringify!(localTransactionId)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockMethodData {
    pub numLockModes: ::std::os::raw::c_int,
    pub conflictTab: *const LOCKMASK,
    pub lockModeNames: *const *const ::std::os::raw::c_char,
    pub trace_flag: *const bool,
}
#[test]
fn bindgen_test_layout_LockMethodData() {
    assert_eq!(
        ::std::mem::size_of::<LockMethodData>(),
        32usize,
        concat!("Size of: ", stringify!(LockMethodData))
    );
    assert_eq!(
        ::std::mem::align_of::<LockMethodData>(),
        8usize,
        concat!("Alignment of ", stringify!(LockMethodData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockMethodData>())).numLockModes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockMethodData),
            "::",
            stringify!(numLockModes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockMethodData>())).conflictTab as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LockMethodData),
            "::",
            stringify!(conflictTab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockMethodData>())).lockModeNames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LockMethodData),
            "::",
            stringify!(lockModeNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockMethodData>())).trace_flag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LockMethodData),
            "::",
            stringify!(trace_flag)
        )
    );
}
pub type LockMethod = *const LockMethodData;
pub type LOCKMETHODID = uint16;
pub const LockTagType_LOCKTAG_RELATION: LockTagType = 0;
pub const LockTagType_LOCKTAG_RELATION_EXTEND: LockTagType = 1;
pub const LockTagType_LOCKTAG_PAGE: LockTagType = 2;
pub const LockTagType_LOCKTAG_TUPLE: LockTagType = 3;
pub const LockTagType_LOCKTAG_TRANSACTION: LockTagType = 4;
pub const LockTagType_LOCKTAG_VIRTUALTRANSACTION: LockTagType = 5;
pub const LockTagType_LOCKTAG_SPECULATIVE_TOKEN: LockTagType = 6;
pub const LockTagType_LOCKTAG_OBJECT: LockTagType = 7;
pub const LockTagType_LOCKTAG_USERLOCK: LockTagType = 8;
pub const LockTagType_LOCKTAG_ADVISORY: LockTagType = 9;
pub type LockTagType = u32;
extern "C" {
    #[link_name = "\u{1}LockTagTypeNames"]
    pub static mut LockTagTypeNames: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LOCKTAG {
    pub locktag_field1: uint32,
    pub locktag_field2: uint32,
    pub locktag_field3: uint32,
    pub locktag_field4: uint16,
    pub locktag_type: uint8,
    pub locktag_lockmethodid: uint8,
}
#[test]
fn bindgen_test_layout_LOCKTAG() {
    assert_eq!(
        ::std::mem::size_of::<LOCKTAG>(),
        16usize,
        concat!("Size of: ", stringify!(LOCKTAG))
    );
    assert_eq!(
        ::std::mem::align_of::<LOCKTAG>(),
        4usize,
        concat!("Alignment of ", stringify!(LOCKTAG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCKTAG>())).locktag_field1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCKTAG),
            "::",
            stringify!(locktag_field1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCKTAG>())).locktag_field2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCKTAG),
            "::",
            stringify!(locktag_field2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCKTAG>())).locktag_field3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCKTAG),
            "::",
            stringify!(locktag_field3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCKTAG>())).locktag_field4 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCKTAG),
            "::",
            stringify!(locktag_field4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCKTAG>())).locktag_type as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCKTAG),
            "::",
            stringify!(locktag_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCKTAG>())).locktag_lockmethodid as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCKTAG),
            "::",
            stringify!(locktag_lockmethodid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LOCK {
    pub tag: LOCKTAG,
    pub grantMask: LOCKMASK,
    pub waitMask: LOCKMASK,
    pub procLocks: SHM_QUEUE,
    pub waitProcs: PROC_QUEUE,
    pub requested: [::std::os::raw::c_int; 10usize],
    pub nRequested: ::std::os::raw::c_int,
    pub granted: [::std::os::raw::c_int; 10usize],
    pub nGranted: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LOCK() {
    assert_eq!(
        ::std::mem::size_of::<LOCK>(),
        152usize,
        concat!("Size of: ", stringify!(LOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<LOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(LOCK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).tag as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(LOCK), "::", stringify!(tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).grantMask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCK),
            "::",
            stringify!(grantMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).waitMask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCK),
            "::",
            stringify!(waitMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).procLocks as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCK),
            "::",
            stringify!(procLocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).waitProcs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCK),
            "::",
            stringify!(waitProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).requested as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCK),
            "::",
            stringify!(requested)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).nRequested as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCK),
            "::",
            stringify!(nRequested)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).granted as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCK),
            "::",
            stringify!(granted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCK>())).nGranted as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCK),
            "::",
            stringify!(nGranted)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PROCLOCKTAG {
    pub myLock: *mut LOCK,
    pub myProc: *mut PGPROC,
}
#[test]
fn bindgen_test_layout_PROCLOCKTAG() {
    assert_eq!(
        ::std::mem::size_of::<PROCLOCKTAG>(),
        16usize,
        concat!("Size of: ", stringify!(PROCLOCKTAG))
    );
    assert_eq!(
        ::std::mem::align_of::<PROCLOCKTAG>(),
        8usize,
        concat!("Alignment of ", stringify!(PROCLOCKTAG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROCLOCKTAG>())).myLock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCLOCKTAG),
            "::",
            stringify!(myLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROCLOCKTAG>())).myProc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCLOCKTAG),
            "::",
            stringify!(myProc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PROCLOCK {
    pub tag: PROCLOCKTAG,
    pub groupLeader: *mut PGPROC,
    pub holdMask: LOCKMASK,
    pub releaseMask: LOCKMASK,
    pub lockLink: SHM_QUEUE,
    pub procLink: SHM_QUEUE,
}
#[test]
fn bindgen_test_layout_PROCLOCK() {
    assert_eq!(
        ::std::mem::size_of::<PROCLOCK>(),
        64usize,
        concat!("Size of: ", stringify!(PROCLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<PROCLOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(PROCLOCK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROCLOCK>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCLOCK),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROCLOCK>())).groupLeader as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCLOCK),
            "::",
            stringify!(groupLeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROCLOCK>())).holdMask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCLOCK),
            "::",
            stringify!(holdMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROCLOCK>())).releaseMask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCLOCK),
            "::",
            stringify!(releaseMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROCLOCK>())).lockLink as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCLOCK),
            "::",
            stringify!(lockLink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROCLOCK>())).procLink as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCLOCK),
            "::",
            stringify!(procLink)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LOCALLOCKTAG {
    pub lock: LOCKTAG,
    pub mode: LOCKMODE,
}
#[test]
fn bindgen_test_layout_LOCALLOCKTAG() {
    assert_eq!(
        ::std::mem::size_of::<LOCALLOCKTAG>(),
        20usize,
        concat!("Size of: ", stringify!(LOCALLOCKTAG))
    );
    assert_eq!(
        ::std::mem::align_of::<LOCALLOCKTAG>(),
        4usize,
        concat!("Alignment of ", stringify!(LOCALLOCKTAG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCKTAG>())).lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCKTAG),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCKTAG>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCKTAG),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LOCALLOCKOWNER {
    pub owner: *mut ResourceOwnerData,
    pub nLocks: int64,
}
#[test]
fn bindgen_test_layout_LOCALLOCKOWNER() {
    assert_eq!(
        ::std::mem::size_of::<LOCALLOCKOWNER>(),
        16usize,
        concat!("Size of: ", stringify!(LOCALLOCKOWNER))
    );
    assert_eq!(
        ::std::mem::align_of::<LOCALLOCKOWNER>(),
        8usize,
        concat!("Alignment of ", stringify!(LOCALLOCKOWNER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCKOWNER>())).owner as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCKOWNER),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCKOWNER>())).nLocks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCKOWNER),
            "::",
            stringify!(nLocks)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LOCALLOCK {
    pub tag: LOCALLOCKTAG,
    pub lock: *mut LOCK,
    pub proclock: *mut PROCLOCK,
    pub hashcode: uint32,
    pub nLocks: int64,
    pub holdsStrongLockCount: bool,
    pub lockCleared: bool,
    pub numLockOwners: ::std::os::raw::c_int,
    pub maxLockOwners: ::std::os::raw::c_int,
    pub lockOwners: *mut LOCALLOCKOWNER,
}
#[test]
fn bindgen_test_layout_LOCALLOCK() {
    assert_eq!(
        ::std::mem::size_of::<LOCALLOCK>(),
        80usize,
        concat!("Size of: ", stringify!(LOCALLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<LOCALLOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(LOCALLOCK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).lock as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).proclock as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(proclock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).hashcode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(hashcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).nLocks as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(nLocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).holdsStrongLockCount as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(holdsStrongLockCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).lockCleared as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(lockCleared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).numLockOwners as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(numLockOwners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).maxLockOwners as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(maxLockOwners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOCALLOCK>())).lockOwners as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(LOCALLOCK),
            "::",
            stringify!(lockOwners)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockInstanceData {
    pub locktag: LOCKTAG,
    pub holdMask: LOCKMASK,
    pub waitLockMode: LOCKMODE,
    pub backend: BackendId,
    pub lxid: LocalTransactionId,
    pub pid: ::std::os::raw::c_int,
    pub leaderPid: ::std::os::raw::c_int,
    pub fastpath: bool,
}
#[test]
fn bindgen_test_layout_LockInstanceData() {
    assert_eq!(
        ::std::mem::size_of::<LockInstanceData>(),
        44usize,
        concat!("Size of: ", stringify!(LockInstanceData))
    );
    assert_eq!(
        ::std::mem::align_of::<LockInstanceData>(),
        4usize,
        concat!("Alignment of ", stringify!(LockInstanceData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInstanceData>())).locktag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInstanceData),
            "::",
            stringify!(locktag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInstanceData>())).holdMask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInstanceData),
            "::",
            stringify!(holdMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInstanceData>())).waitLockMode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInstanceData),
            "::",
            stringify!(waitLockMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInstanceData>())).backend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInstanceData),
            "::",
            stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInstanceData>())).lxid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInstanceData),
            "::",
            stringify!(lxid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInstanceData>())).pid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInstanceData),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInstanceData>())).leaderPid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInstanceData),
            "::",
            stringify!(leaderPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInstanceData>())).fastpath as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInstanceData),
            "::",
            stringify!(fastpath)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockData {
    pub nelements: ::std::os::raw::c_int,
    pub locks: *mut LockInstanceData,
}
#[test]
fn bindgen_test_layout_LockData() {
    assert_eq!(
        ::std::mem::size_of::<LockData>(),
        16usize,
        concat!("Size of: ", stringify!(LockData))
    );
    assert_eq!(
        ::std::mem::align_of::<LockData>(),
        8usize,
        concat!("Alignment of ", stringify!(LockData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockData>())).nelements as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockData),
            "::",
            stringify!(nelements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockData>())).locks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LockData),
            "::",
            stringify!(locks)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BlockedProcData {
    pub pid: ::std::os::raw::c_int,
    pub first_lock: ::std::os::raw::c_int,
    pub num_locks: ::std::os::raw::c_int,
    pub first_waiter: ::std::os::raw::c_int,
    pub num_waiters: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BlockedProcData() {
    assert_eq!(
        ::std::mem::size_of::<BlockedProcData>(),
        20usize,
        concat!("Size of: ", stringify!(BlockedProcData))
    );
    assert_eq!(
        ::std::mem::align_of::<BlockedProcData>(),
        4usize,
        concat!("Alignment of ", stringify!(BlockedProcData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcData>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcData),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcData>())).first_lock as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcData),
            "::",
            stringify!(first_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcData>())).num_locks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcData),
            "::",
            stringify!(num_locks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcData>())).first_waiter as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcData),
            "::",
            stringify!(first_waiter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcData>())).num_waiters as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcData),
            "::",
            stringify!(num_waiters)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BlockedProcsData {
    pub procs: *mut BlockedProcData,
    pub locks: *mut LockInstanceData,
    pub waiter_pids: *mut ::std::os::raw::c_int,
    pub nprocs: ::std::os::raw::c_int,
    pub maxprocs: ::std::os::raw::c_int,
    pub nlocks: ::std::os::raw::c_int,
    pub maxlocks: ::std::os::raw::c_int,
    pub npids: ::std::os::raw::c_int,
    pub maxpids: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BlockedProcsData() {
    assert_eq!(
        ::std::mem::size_of::<BlockedProcsData>(),
        48usize,
        concat!("Size of: ", stringify!(BlockedProcsData))
    );
    assert_eq!(
        ::std::mem::align_of::<BlockedProcsData>(),
        8usize,
        concat!("Alignment of ", stringify!(BlockedProcsData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).procs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(procs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).locks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(locks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).waiter_pids as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(waiter_pids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).nprocs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(nprocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).maxprocs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(maxprocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).nlocks as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(nlocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).maxlocks as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(maxlocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).npids as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(npids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockedProcsData>())).maxpids as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockedProcsData),
            "::",
            stringify!(maxpids)
        )
    );
}
pub const LockAcquireResult_LOCKACQUIRE_NOT_AVAIL: LockAcquireResult = 0;
pub const LockAcquireResult_LOCKACQUIRE_OK: LockAcquireResult = 1;
pub const LockAcquireResult_LOCKACQUIRE_ALREADY_HELD: LockAcquireResult = 2;
pub const LockAcquireResult_LOCKACQUIRE_ALREADY_CLEAR: LockAcquireResult = 3;
pub type LockAcquireResult = u32;
pub const DeadLockState_DS_NOT_YET_CHECKED: DeadLockState = 0;
pub const DeadLockState_DS_NO_DEADLOCK: DeadLockState = 1;
pub const DeadLockState_DS_SOFT_DEADLOCK: DeadLockState = 2;
pub const DeadLockState_DS_HARD_DEADLOCK: DeadLockState = 3;
pub const DeadLockState_DS_BLOCKED_BY_AUTOVACUUM: DeadLockState = 4;
pub type DeadLockState = u32;
extern "C" {
    pub fn InitLocks();
}
extern "C" {
    pub fn GetLocksMethodTable(lock: *const LOCK) -> LockMethod;
}
extern "C" {
    pub fn GetLockTagsMethodTable(locktag: *const LOCKTAG) -> LockMethod;
}
extern "C" {
    pub fn LockTagHashCode(locktag: *const LOCKTAG) -> uint32;
}
extern "C" {
    pub fn DoLockModesConflict(mode1: LOCKMODE, mode2: LOCKMODE) -> bool;
}
extern "C" {
    pub fn LockAcquire(
        locktag: *const LOCKTAG,
        lockmode: LOCKMODE,
        sessionLock: bool,
        dontWait: bool,
    ) -> LockAcquireResult;
}
extern "C" {
    pub fn LockAcquireExtended(
        locktag: *const LOCKTAG,
        lockmode: LOCKMODE,
        sessionLock: bool,
        dontWait: bool,
        reportMemoryError: bool,
        locallockp: *mut *mut LOCALLOCK,
    ) -> LockAcquireResult;
}
extern "C" {
    pub fn AbortStrongLockAcquire();
}
extern "C" {
    pub fn MarkLockClear(locallock: *mut LOCALLOCK);
}
extern "C" {
    pub fn LockRelease(locktag: *const LOCKTAG, lockmode: LOCKMODE, sessionLock: bool) -> bool;
}
extern "C" {
    pub fn LockReleaseAll(lockmethodid: LOCKMETHODID, allLocks: bool);
}
extern "C" {
    pub fn LockReleaseSession(lockmethodid: LOCKMETHODID);
}
extern "C" {
    pub fn LockReleaseCurrentOwner(locallocks: *mut *mut LOCALLOCK, nlocks: ::std::os::raw::c_int);
}
extern "C" {
    pub fn LockReassignCurrentOwner(locallocks: *mut *mut LOCALLOCK, nlocks: ::std::os::raw::c_int);
}
extern "C" {
    pub fn LockHasWaiters(locktag: *const LOCKTAG, lockmode: LOCKMODE, sessionLock: bool) -> bool;
}
extern "C" {
    pub fn GetLockConflicts(
        locktag: *const LOCKTAG,
        lockmode: LOCKMODE,
    ) -> *mut VirtualTransactionId;
}
extern "C" {
    pub fn AtPrepare_Locks();
}
extern "C" {
    pub fn PostPrepare_Locks(xid: TransactionId);
}
extern "C" {
    pub fn LockCheckConflicts(
        lockMethodTable: LockMethod,
        lockmode: LOCKMODE,
        lock: *mut LOCK,
        proclock: *mut PROCLOCK,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GrantLock(lock: *mut LOCK, proclock: *mut PROCLOCK, lockmode: LOCKMODE);
}
extern "C" {
    pub fn GrantAwaitedLock();
}
extern "C" {
    pub fn RemoveFromWaitQueue(proc_: *mut PGPROC, hashcode: uint32);
}
extern "C" {
    pub fn LockShmemSize() -> Size;
}
extern "C" {
    pub fn GetLockStatusData() -> *mut LockData;
}
extern "C" {
    pub fn GetBlockerStatusData(blocked_pid: ::std::os::raw::c_int) -> *mut BlockedProcsData;
}
extern "C" {
    pub fn GetRunningTransactionLocks(nlocks: *mut ::std::os::raw::c_int) -> *mut xl_standby_lock;
}
extern "C" {
    pub fn GetLockmodeName(
        lockmethodid: LOCKMETHODID,
        mode: LOCKMODE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lock_twophase_recover(
        xid: TransactionId,
        info: uint16,
        recdata: *mut ::std::os::raw::c_void,
        len: uint32,
    );
}
extern "C" {
    pub fn lock_twophase_postcommit(
        xid: TransactionId,
        info: uint16,
        recdata: *mut ::std::os::raw::c_void,
        len: uint32,
    );
}
extern "C" {
    pub fn lock_twophase_postabort(
        xid: TransactionId,
        info: uint16,
        recdata: *mut ::std::os::raw::c_void,
        len: uint32,
    );
}
extern "C" {
    pub fn lock_twophase_standby_recover(
        xid: TransactionId,
        info: uint16,
        recdata: *mut ::std::os::raw::c_void,
        len: uint32,
    );
}
extern "C" {
    pub fn DeadLockCheck(proc_: *mut PGPROC) -> DeadLockState;
}
extern "C" {
    pub fn GetBlockingAutoVacuumPgproc() -> *mut PGPROC;
}
extern "C" {
    pub fn DeadLockReport();
}
extern "C" {
    pub fn RememberSimpleDeadLock(
        proc1: *mut PGPROC,
        lockmode: LOCKMODE,
        lock: *mut LOCK,
        proc2: *mut PGPROC,
    );
}
extern "C" {
    pub fn InitDeadLockChecking();
}
extern "C" {
    pub fn LockWaiterCount(locktag: *const LOCKTAG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VirtualXactLockTableInsert(vxid: VirtualTransactionId);
}
extern "C" {
    pub fn VirtualXactLockTableCleanup();
}
extern "C" {
    pub fn VirtualXactLock(vxid: VirtualTransactionId, wait: bool) -> bool;
}
pub const relopt_type_RELOPT_TYPE_BOOL: relopt_type = 0;
pub const relopt_type_RELOPT_TYPE_INT: relopt_type = 1;
pub const relopt_type_RELOPT_TYPE_REAL: relopt_type = 2;
pub const relopt_type_RELOPT_TYPE_STRING: relopt_type = 3;
pub type relopt_type = u32;
pub const relopt_kind_RELOPT_KIND_HEAP: relopt_kind = 1;
pub const relopt_kind_RELOPT_KIND_TOAST: relopt_kind = 2;
pub const relopt_kind_RELOPT_KIND_BTREE: relopt_kind = 4;
pub const relopt_kind_RELOPT_KIND_HASH: relopt_kind = 8;
pub const relopt_kind_RELOPT_KIND_GIN: relopt_kind = 16;
pub const relopt_kind_RELOPT_KIND_GIST: relopt_kind = 32;
pub const relopt_kind_RELOPT_KIND_ATTRIBUTE: relopt_kind = 64;
pub const relopt_kind_RELOPT_KIND_TABLESPACE: relopt_kind = 128;
pub const relopt_kind_RELOPT_KIND_SPGIST: relopt_kind = 256;
pub const relopt_kind_RELOPT_KIND_VIEW: relopt_kind = 512;
pub const relopt_kind_RELOPT_KIND_BRIN: relopt_kind = 1024;
pub const relopt_kind_RELOPT_KIND_PARTITIONED: relopt_kind = 2048;
pub const relopt_kind_RELOPT_KIND_LAST_DEFAULT: relopt_kind = 2048;
pub const relopt_kind_RELOPT_KIND_INDEX: relopt_kind = 284;
pub const relopt_kind_RELOPT_KIND_MAX: relopt_kind = 1073741824;
pub type relopt_kind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct relopt_gen {
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub kinds: bits32,
    pub lockmode: LOCKMODE,
    pub namelen: ::std::os::raw::c_int,
    pub type_: relopt_type,
}
#[test]
fn bindgen_test_layout_relopt_gen() {
    assert_eq!(
        ::std::mem::size_of::<relopt_gen>(),
        32usize,
        concat!("Size of: ", stringify!(relopt_gen))
    );
    assert_eq!(
        ::std::mem::align_of::<relopt_gen>(),
        8usize,
        concat!("Alignment of ", stringify!(relopt_gen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_gen>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_gen),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_gen>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_gen),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_gen>())).kinds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_gen),
            "::",
            stringify!(kinds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_gen>())).lockmode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_gen),
            "::",
            stringify!(lockmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_gen>())).namelen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_gen),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_gen>())).type_ as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_gen),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct relopt_value {
    pub gen: *mut relopt_gen,
    pub isset: bool,
    pub values: relopt_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union relopt_value__bindgen_ty_1 {
    pub bool_val: bool,
    pub int_val: ::std::os::raw::c_int,
    pub real_val: f64,
    pub string_val: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_relopt_value__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<relopt_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(relopt_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<relopt_value__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(relopt_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<relopt_value__bindgen_ty_1>())).bool_val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_value__bindgen_ty_1),
            "::",
            stringify!(bool_val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<relopt_value__bindgen_ty_1>())).int_val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_value__bindgen_ty_1),
            "::",
            stringify!(int_val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<relopt_value__bindgen_ty_1>())).real_val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_value__bindgen_ty_1),
            "::",
            stringify!(real_val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<relopt_value__bindgen_ty_1>())).string_val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_value__bindgen_ty_1),
            "::",
            stringify!(string_val)
        )
    );
}
#[test]
fn bindgen_test_layout_relopt_value() {
    assert_eq!(
        ::std::mem::size_of::<relopt_value>(),
        24usize,
        concat!("Size of: ", stringify!(relopt_value))
    );
    assert_eq!(
        ::std::mem::align_of::<relopt_value>(),
        8usize,
        concat!("Alignment of ", stringify!(relopt_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_value>())).gen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_value),
            "::",
            stringify!(gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_value>())).isset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_value),
            "::",
            stringify!(isset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_value>())).values as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_value),
            "::",
            stringify!(values)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct relopt_bool {
    pub gen: relopt_gen,
    pub default_val: bool,
}
#[test]
fn bindgen_test_layout_relopt_bool() {
    assert_eq!(
        ::std::mem::size_of::<relopt_bool>(),
        40usize,
        concat!("Size of: ", stringify!(relopt_bool))
    );
    assert_eq!(
        ::std::mem::align_of::<relopt_bool>(),
        8usize,
        concat!("Alignment of ", stringify!(relopt_bool))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_bool>())).gen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_bool),
            "::",
            stringify!(gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_bool>())).default_val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_bool),
            "::",
            stringify!(default_val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct relopt_int {
    pub gen: relopt_gen,
    pub default_val: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_relopt_int() {
    assert_eq!(
        ::std::mem::size_of::<relopt_int>(),
        48usize,
        concat!("Size of: ", stringify!(relopt_int))
    );
    assert_eq!(
        ::std::mem::align_of::<relopt_int>(),
        8usize,
        concat!("Alignment of ", stringify!(relopt_int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_int>())).gen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_int),
            "::",
            stringify!(gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_int>())).default_val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_int),
            "::",
            stringify!(default_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_int>())).min as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_int),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_int>())).max as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_int),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct relopt_real {
    pub gen: relopt_gen,
    pub default_val: f64,
    pub min: f64,
    pub max: f64,
}
#[test]
fn bindgen_test_layout_relopt_real() {
    assert_eq!(
        ::std::mem::size_of::<relopt_real>(),
        56usize,
        concat!("Size of: ", stringify!(relopt_real))
    );
    assert_eq!(
        ::std::mem::align_of::<relopt_real>(),
        8usize,
        concat!("Alignment of ", stringify!(relopt_real))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_real>())).gen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_real),
            "::",
            stringify!(gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_real>())).default_val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_real),
            "::",
            stringify!(default_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_real>())).min as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_real),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_real>())).max as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_real),
            "::",
            stringify!(max)
        )
    );
}
pub type validate_string_relopt =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_char)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct relopt_string {
    pub gen: relopt_gen,
    pub default_len: ::std::os::raw::c_int,
    pub default_isnull: bool,
    pub validate_cb: validate_string_relopt,
    pub default_val: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_relopt_string() {
    assert_eq!(
        ::std::mem::size_of::<relopt_string>(),
        56usize,
        concat!("Size of: ", stringify!(relopt_string))
    );
    assert_eq!(
        ::std::mem::align_of::<relopt_string>(),
        8usize,
        concat!("Alignment of ", stringify!(relopt_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_string>())).gen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_string),
            "::",
            stringify!(gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_string>())).default_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_string),
            "::",
            stringify!(default_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_string>())).default_isnull as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_string),
            "::",
            stringify!(default_isnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_string>())).validate_cb as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_string),
            "::",
            stringify!(validate_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_string>())).default_val as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_string),
            "::",
            stringify!(default_val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct relopt_parse_elt {
    pub optname: *const ::std::os::raw::c_char,
    pub opttype: relopt_type,
    pub offset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_relopt_parse_elt() {
    assert_eq!(
        ::std::mem::size_of::<relopt_parse_elt>(),
        16usize,
        concat!("Size of: ", stringify!(relopt_parse_elt))
    );
    assert_eq!(
        ::std::mem::align_of::<relopt_parse_elt>(),
        8usize,
        concat!("Alignment of ", stringify!(relopt_parse_elt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_parse_elt>())).optname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_parse_elt),
            "::",
            stringify!(optname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_parse_elt>())).opttype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_parse_elt),
            "::",
            stringify!(opttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relopt_parse_elt>())).offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(relopt_parse_elt),
            "::",
            stringify!(offset)
        )
    );
}
extern "C" {
    pub fn add_reloption_kind() -> relopt_kind;
}
extern "C" {
    pub fn add_bool_reloption(
        kinds: bits32,
        name: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
        default_val: bool,
    );
}
extern "C" {
    pub fn add_int_reloption(
        kinds: bits32,
        name: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
        default_val: ::std::os::raw::c_int,
        min_val: ::std::os::raw::c_int,
        max_val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn add_real_reloption(
        kinds: bits32,
        name: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
        default_val: f64,
        min_val: f64,
        max_val: f64,
    );
}
extern "C" {
    pub fn add_string_reloption(
        kinds: bits32,
        name: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
        default_val: *const ::std::os::raw::c_char,
        validator: validate_string_relopt,
    );
}
extern "C" {
    pub fn transformRelOptions(
        oldOptions: Datum,
        defList: *mut List,
        namspace: *const ::std::os::raw::c_char,
        validnsps: *mut *mut ::std::os::raw::c_char,
        ignoreOids: bool,
        isReset: bool,
    ) -> Datum;
}
extern "C" {
    pub fn untransformRelOptions(options: Datum) -> *mut List;
}
extern "C" {
    pub fn extractRelOptions(
        tuple: HeapTuple,
        tupdesc: TupleDesc,
        amoptions: amoptions_function,
    ) -> *mut bytea;
}
extern "C" {
    pub fn parseRelOptions(
        options: Datum,
        validate: bool,
        kind: relopt_kind,
        numrelopts: *mut ::std::os::raw::c_int,
    ) -> *mut relopt_value;
}
extern "C" {
    pub fn allocateReloptStruct(
        base: Size,
        options: *mut relopt_value,
        numoptions: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fillRelOptions(
        rdopts: *mut ::std::os::raw::c_void,
        basesize: Size,
        options: *mut relopt_value,
        numoptions: ::std::os::raw::c_int,
        validate: bool,
        elems: *const relopt_parse_elt,
        nelems: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn default_reloptions(reloptions: Datum, validate: bool, kind: relopt_kind) -> *mut bytea;
}
extern "C" {
    pub fn heap_reloptions(
        relkind: ::std::os::raw::c_char,
        reloptions: Datum,
        validate: bool,
    ) -> *mut bytea;
}
extern "C" {
    pub fn view_reloptions(reloptions: Datum, validate: bool) -> *mut bytea;
}
extern "C" {
    pub fn index_reloptions(
        amoptions: amoptions_function,
        reloptions: Datum,
        validate: bool,
    ) -> *mut bytea;
}
extern "C" {
    pub fn index_generic_reloptions(reloptions: Datum, validate: bool) -> *mut bytea;
}
extern "C" {
    pub fn attribute_reloptions(reloptions: Datum, validate: bool) -> *mut bytea;
}
extern "C" {
    pub fn tablespace_reloptions(reloptions: Datum, validate: bool) -> *mut bytea;
}
extern "C" {
    pub fn AlterTableGetRelOptionsLockLevel(defList: *mut List) -> LOCKMODE;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dlist_node {
    pub prev: *mut dlist_node,
    pub next: *mut dlist_node,
}
#[test]
fn bindgen_test_layout_dlist_node() {
    assert_eq!(
        ::std::mem::size_of::<dlist_node>(),
        16usize,
        concat!("Size of: ", stringify!(dlist_node))
    );
    assert_eq!(
        ::std::mem::align_of::<dlist_node>(),
        8usize,
        concat!("Alignment of ", stringify!(dlist_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_node>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_node),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_node>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_node),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dlist_head {
    pub head: dlist_node,
}
#[test]
fn bindgen_test_layout_dlist_head() {
    assert_eq!(
        ::std::mem::size_of::<dlist_head>(),
        16usize,
        concat!("Size of: ", stringify!(dlist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<dlist_head>(),
        8usize,
        concat!("Alignment of ", stringify!(dlist_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_head>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_head),
            "::",
            stringify!(head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dlist_iter {
    pub cur: *mut dlist_node,
    pub end: *mut dlist_node,
}
#[test]
fn bindgen_test_layout_dlist_iter() {
    assert_eq!(
        ::std::mem::size_of::<dlist_iter>(),
        16usize,
        concat!("Size of: ", stringify!(dlist_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<dlist_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(dlist_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_iter>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_iter),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dlist_mutable_iter {
    pub cur: *mut dlist_node,
    pub next: *mut dlist_node,
    pub end: *mut dlist_node,
}
#[test]
fn bindgen_test_layout_dlist_mutable_iter() {
    assert_eq!(
        ::std::mem::size_of::<dlist_mutable_iter>(),
        24usize,
        concat!("Size of: ", stringify!(dlist_mutable_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<dlist_mutable_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(dlist_mutable_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_mutable_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_mutable_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_mutable_iter>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_mutable_iter),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_mutable_iter>())).end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_mutable_iter),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct slist_node {
    pub next: *mut slist_node,
}
#[test]
fn bindgen_test_layout_slist_node() {
    assert_eq!(
        ::std::mem::size_of::<slist_node>(),
        8usize,
        concat!("Size of: ", stringify!(slist_node))
    );
    assert_eq!(
        ::std::mem::align_of::<slist_node>(),
        8usize,
        concat!("Alignment of ", stringify!(slist_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_node>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_node),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct slist_head {
    pub head: slist_node,
}
#[test]
fn bindgen_test_layout_slist_head() {
    assert_eq!(
        ::std::mem::size_of::<slist_head>(),
        8usize,
        concat!("Size of: ", stringify!(slist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<slist_head>(),
        8usize,
        concat!("Alignment of ", stringify!(slist_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_head>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_head),
            "::",
            stringify!(head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct slist_iter {
    pub cur: *mut slist_node,
}
#[test]
fn bindgen_test_layout_slist_iter() {
    assert_eq!(
        ::std::mem::size_of::<slist_iter>(),
        8usize,
        concat!("Size of: ", stringify!(slist_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<slist_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(slist_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_iter),
            "::",
            stringify!(cur)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct slist_mutable_iter {
    pub cur: *mut slist_node,
    pub next: *mut slist_node,
    pub prev: *mut slist_node,
}
#[test]
fn bindgen_test_layout_slist_mutable_iter() {
    assert_eq!(
        ::std::mem::size_of::<slist_mutable_iter>(),
        24usize,
        concat!("Size of: ", stringify!(slist_mutable_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<slist_mutable_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(slist_mutable_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_mutable_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_mutable_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_mutable_iter>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_mutable_iter),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_mutable_iter>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_mutable_iter),
            "::",
            stringify!(prev)
        )
    );
}
extern "C" {
    pub fn slist_delete(head: *mut slist_head, node: *mut slist_node);
}
pub type bgworker_main_type = ::std::option::Option<unsafe extern "C" fn(main_arg: Datum)>;
pub const BgWorkerStartTime_BgWorkerStart_PostmasterStart: BgWorkerStartTime = 0;
pub const BgWorkerStartTime_BgWorkerStart_ConsistentState: BgWorkerStartTime = 1;
pub const BgWorkerStartTime_BgWorkerStart_RecoveryFinished: BgWorkerStartTime = 2;
pub type BgWorkerStartTime = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BackgroundWorker {
    pub bgw_name: [::std::os::raw::c_char; 96usize],
    pub bgw_type: [::std::os::raw::c_char; 96usize],
    pub bgw_flags: ::std::os::raw::c_int,
    pub bgw_start_time: BgWorkerStartTime,
    pub bgw_restart_time: ::std::os::raw::c_int,
    pub bgw_library_name: [::std::os::raw::c_char; 96usize],
    pub bgw_function_name: [::std::os::raw::c_char; 96usize],
    pub bgw_main_arg: Datum,
    pub bgw_extra: [::std::os::raw::c_char; 128usize],
    pub bgw_notify_pid: pid_t,
}
#[test]
fn bindgen_test_layout_BackgroundWorker() {
    assert_eq!(
        ::std::mem::size_of::<BackgroundWorker>(),
        544usize,
        concat!("Size of: ", stringify!(BackgroundWorker))
    );
    assert_eq!(
        ::std::mem::align_of::<BackgroundWorker>(),
        8usize,
        concat!("Alignment of ", stringify!(BackgroundWorker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BackgroundWorker>())).bgw_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BackgroundWorker>())).bgw_type as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BackgroundWorker>())).bgw_flags as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BackgroundWorker>())).bgw_start_time as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_start_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BackgroundWorker>())).bgw_restart_time as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_restart_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BackgroundWorker>())).bgw_library_name as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_library_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BackgroundWorker>())).bgw_function_name as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_function_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BackgroundWorker>())).bgw_main_arg as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_main_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BackgroundWorker>())).bgw_extra as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BackgroundWorker>())).bgw_notify_pid as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(BackgroundWorker),
            "::",
            stringify!(bgw_notify_pid)
        )
    );
}
pub const BgwHandleStatus_BGWH_STARTED: BgwHandleStatus = 0;
pub const BgwHandleStatus_BGWH_NOT_YET_STARTED: BgwHandleStatus = 1;
pub const BgwHandleStatus_BGWH_STOPPED: BgwHandleStatus = 2;
pub const BgwHandleStatus_BGWH_POSTMASTER_DIED: BgwHandleStatus = 3;
pub type BgwHandleStatus = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BackgroundWorkerHandle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn RegisterBackgroundWorker(worker: *mut BackgroundWorker);
}
extern "C" {
    pub fn RegisterDynamicBackgroundWorker(
        worker: *mut BackgroundWorker,
        handle: *mut *mut BackgroundWorkerHandle,
    ) -> bool;
}
extern "C" {
    pub fn GetBackgroundWorkerPid(
        handle: *mut BackgroundWorkerHandle,
        pidp: *mut pid_t,
    ) -> BgwHandleStatus;
}
extern "C" {
    pub fn WaitForBackgroundWorkerStartup(
        handle: *mut BackgroundWorkerHandle,
        pid: *mut pid_t,
    ) -> BgwHandleStatus;
}
extern "C" {
    pub fn WaitForBackgroundWorkerShutdown(arg1: *mut BackgroundWorkerHandle) -> BgwHandleStatus;
}
extern "C" {
    pub fn GetBackgroundWorkerTypeByPid(pid: pid_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TerminateBackgroundWorker(handle: *mut BackgroundWorkerHandle);
}
extern "C" {
    #[link_name = "\u{1}MyBgworkerEntry"]
    pub static mut MyBgworkerEntry: *mut BackgroundWorker;
}
extern "C" {
    pub fn BackgroundWorkerInitializeConnection(
        dbname: *const ::std::os::raw::c_char,
        username: *const ::std::os::raw::c_char,
        flags: uint32,
    );
}
extern "C" {
    pub fn BackgroundWorkerInitializeConnectionByOid(dboid: Oid, useroid: Oid, flags: uint32);
}
extern "C" {
    pub fn BackgroundWorkerBlockSignals();
}
extern "C" {
    pub fn BackgroundWorkerUnblockSignals();
}
pub type RmgrId = uint8;
pub const RmgrIds_RM_XLOG_ID: RmgrIds = 0;
pub const RmgrIds_RM_XACT_ID: RmgrIds = 1;
pub const RmgrIds_RM_SMGR_ID: RmgrIds = 2;
pub const RmgrIds_RM_CLOG_ID: RmgrIds = 3;
pub const RmgrIds_RM_DBASE_ID: RmgrIds = 4;
pub const RmgrIds_RM_TBLSPC_ID: RmgrIds = 5;
pub const RmgrIds_RM_MULTIXACT_ID: RmgrIds = 6;
pub const RmgrIds_RM_RELMAP_ID: RmgrIds = 7;
pub const RmgrIds_RM_STANDBY_ID: RmgrIds = 8;
pub const RmgrIds_RM_HEAP2_ID: RmgrIds = 9;
pub const RmgrIds_RM_HEAP_ID: RmgrIds = 10;
pub const RmgrIds_RM_BTREE_ID: RmgrIds = 11;
pub const RmgrIds_RM_HASH_ID: RmgrIds = 12;
pub const RmgrIds_RM_GIN_ID: RmgrIds = 13;
pub const RmgrIds_RM_GIST_ID: RmgrIds = 14;
pub const RmgrIds_RM_SEQ_ID: RmgrIds = 15;
pub const RmgrIds_RM_SPGIST_ID: RmgrIds = 16;
pub const RmgrIds_RM_BRIN_ID: RmgrIds = 17;
pub const RmgrIds_RM_COMMIT_TS_ID: RmgrIds = 18;
pub const RmgrIds_RM_REPLORIGIN_ID: RmgrIds = 19;
pub const RmgrIds_RM_GENERIC_ID: RmgrIds = 20;
pub const RmgrIds_RM_LOGICALMSG_ID: RmgrIds = 21;
pub const RmgrIds_RM_NEXT_ID: RmgrIds = 22;
pub type RmgrIds = u32;
pub type pg_crc32c = uint32;
extern "C" {
    pub fn pg_comp_crc32c_sb8(
        crc: pg_crc32c,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> pg_crc32c;
}
extern "C" {
    #[link_name = "\u{1}pg_comp_crc32c"]
    pub static mut pg_comp_crc32c: ::std::option::Option<
        unsafe extern "C" fn(
            crc: pg_crc32c,
            data: *const ::std::os::raw::c_void,
            len: usize,
        ) -> pg_crc32c,
    >;
}
extern "C" {
    pub fn pg_comp_crc32c_sse42(
        crc: pg_crc32c,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> pg_crc32c;
}
pub const ForkNumber_InvalidForkNumber: ForkNumber = -1;
pub const ForkNumber_MAIN_FORKNUM: ForkNumber = 0;
pub const ForkNumber_FSM_FORKNUM: ForkNumber = 1;
pub const ForkNumber_VISIBILITYMAP_FORKNUM: ForkNumber = 2;
pub const ForkNumber_INIT_FORKNUM: ForkNumber = 3;
pub type ForkNumber = i32;
extern "C" {
    #[link_name = "\u{1}forkNames"]
    pub static mut forkNames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn forkname_to_number(forkName: *const ::std::os::raw::c_char) -> ForkNumber;
}
extern "C" {
    pub fn forkname_chars(
        str: *const ::std::os::raw::c_char,
        fork: *mut ForkNumber,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetDatabasePath(dbNode: Oid, spcNode: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetRelationPath(
        dbNode: Oid,
        spcNode: Oid,
        relNode: Oid,
        backendId: ::std::os::raw::c_int,
        forkNumber: ForkNumber,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RelFileNode {
    pub spcNode: Oid,
    pub dbNode: Oid,
    pub relNode: Oid,
}
#[test]
fn bindgen_test_layout_RelFileNode() {
    assert_eq!(
        ::std::mem::size_of::<RelFileNode>(),
        12usize,
        concat!("Size of: ", stringify!(RelFileNode))
    );
    assert_eq!(
        ::std::mem::align_of::<RelFileNode>(),
        4usize,
        concat!("Alignment of ", stringify!(RelFileNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelFileNode>())).spcNode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RelFileNode),
            "::",
            stringify!(spcNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelFileNode>())).dbNode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RelFileNode),
            "::",
            stringify!(dbNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelFileNode>())).relNode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RelFileNode),
            "::",
            stringify!(relNode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RelFileNodeBackend {
    pub node: RelFileNode,
    pub backend: BackendId,
}
#[test]
fn bindgen_test_layout_RelFileNodeBackend() {
    assert_eq!(
        ::std::mem::size_of::<RelFileNodeBackend>(),
        16usize,
        concat!("Size of: ", stringify!(RelFileNodeBackend))
    );
    assert_eq!(
        ::std::mem::align_of::<RelFileNodeBackend>(),
        4usize,
        concat!("Alignment of ", stringify!(RelFileNodeBackend))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelFileNodeBackend>())).node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RelFileNodeBackend),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelFileNodeBackend>())).backend as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RelFileNodeBackend),
            "::",
            stringify!(backend)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XLogRecord {
    pub xl_tot_len: uint32,
    pub xl_xid: TransactionId,
    pub xl_prev: XLogRecPtr,
    pub xl_info: uint8,
    pub xl_rmid: RmgrId,
    pub xl_crc: pg_crc32c,
}
#[test]
fn bindgen_test_layout_XLogRecord() {
    assert_eq!(
        ::std::mem::size_of::<XLogRecord>(),
        24usize,
        concat!("Size of: ", stringify!(XLogRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogRecord>(),
        8usize,
        concat!("Alignment of ", stringify!(XLogRecord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecord>())).xl_tot_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_tot_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecord>())).xl_xid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecord>())).xl_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecord>())).xl_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecord>())).xl_rmid as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_rmid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecord>())).xl_crc as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_crc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XLogRecordBlockHeader {
    pub id: uint8,
    pub fork_flags: uint8,
    pub data_length: uint16,
}
#[test]
fn bindgen_test_layout_XLogRecordBlockHeader() {
    assert_eq!(
        ::std::mem::size_of::<XLogRecordBlockHeader>(),
        4usize,
        concat!("Size of: ", stringify!(XLogRecordBlockHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogRecordBlockHeader>(),
        2usize,
        concat!("Alignment of ", stringify!(XLogRecordBlockHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecordBlockHeader>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordBlockHeader),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogRecordBlockHeader>())).fork_flags as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordBlockHeader),
            "::",
            stringify!(fork_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogRecordBlockHeader>())).data_length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordBlockHeader),
            "::",
            stringify!(data_length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XLogRecordBlockImageHeader {
    pub length: uint16,
    pub hole_offset: uint16,
    pub bimg_info: uint8,
}
#[test]
fn bindgen_test_layout_XLogRecordBlockImageHeader() {
    assert_eq!(
        ::std::mem::size_of::<XLogRecordBlockImageHeader>(),
        6usize,
        concat!("Size of: ", stringify!(XLogRecordBlockImageHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogRecordBlockImageHeader>(),
        2usize,
        concat!("Alignment of ", stringify!(XLogRecordBlockImageHeader))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogRecordBlockImageHeader>())).length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordBlockImageHeader),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogRecordBlockImageHeader>())).hole_offset as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordBlockImageHeader),
            "::",
            stringify!(hole_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogRecordBlockImageHeader>())).bimg_info as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordBlockImageHeader),
            "::",
            stringify!(bimg_info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XLogRecordBlockCompressHeader {
    pub hole_length: uint16,
}
#[test]
fn bindgen_test_layout_XLogRecordBlockCompressHeader() {
    assert_eq!(
        ::std::mem::size_of::<XLogRecordBlockCompressHeader>(),
        2usize,
        concat!("Size of: ", stringify!(XLogRecordBlockCompressHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogRecordBlockCompressHeader>(),
        2usize,
        concat!("Alignment of ", stringify!(XLogRecordBlockCompressHeader))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogRecordBlockCompressHeader>())).hole_length as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordBlockCompressHeader),
            "::",
            stringify!(hole_length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XLogRecordDataHeaderShort {
    pub id: uint8,
    pub data_length: uint8,
}
#[test]
fn bindgen_test_layout_XLogRecordDataHeaderShort() {
    assert_eq!(
        ::std::mem::size_of::<XLogRecordDataHeaderShort>(),
        2usize,
        concat!("Size of: ", stringify!(XLogRecordDataHeaderShort))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogRecordDataHeaderShort>(),
        1usize,
        concat!("Alignment of ", stringify!(XLogRecordDataHeaderShort))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecordDataHeaderShort>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordDataHeaderShort),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogRecordDataHeaderShort>())).data_length as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordDataHeaderShort),
            "::",
            stringify!(data_length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XLogRecordDataHeaderLong {
    pub id: uint8,
}
#[test]
fn bindgen_test_layout_XLogRecordDataHeaderLong() {
    assert_eq!(
        ::std::mem::size_of::<XLogRecordDataHeaderLong>(),
        1usize,
        concat!("Size of: ", stringify!(XLogRecordDataHeaderLong))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogRecordDataHeaderLong>(),
        1usize,
        concat!("Alignment of ", stringify!(XLogRecordDataHeaderLong))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogRecordDataHeaderLong>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecordDataHeaderLong),
            "::",
            stringify!(id)
        )
    );
}
pub type XLogPageReadCB = ::std::option::Option<
    unsafe extern "C" fn(
        xlogreader: *mut XLogReaderState,
        targetPagePtr: XLogRecPtr,
        reqLen: ::std::os::raw::c_int,
        targetRecPtr: XLogRecPtr,
        readBuf: *mut ::std::os::raw::c_char,
        pageTLI: *mut TimeLineID,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DecodedBkpBlock {
    pub in_use: bool,
    pub rnode: RelFileNode,
    pub forknum: ForkNumber,
    pub blkno: BlockNumber,
    pub flags: uint8,
    pub has_image: bool,
    pub apply_image: bool,
    pub bkp_image: *mut ::std::os::raw::c_char,
    pub hole_offset: uint16,
    pub hole_length: uint16,
    pub bimg_len: uint16,
    pub bimg_info: uint8,
    pub has_data: bool,
    pub data: *mut ::std::os::raw::c_char,
    pub data_len: uint16,
    pub data_bufsz: uint16,
}
#[test]
fn bindgen_test_layout_DecodedBkpBlock() {
    assert_eq!(
        ::std::mem::size_of::<DecodedBkpBlock>(),
        64usize,
        concat!("Size of: ", stringify!(DecodedBkpBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<DecodedBkpBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(DecodedBkpBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).in_use as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(in_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).rnode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(rnode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).forknum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(forknum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).blkno as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(blkno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).has_image as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(has_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).apply_image as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(apply_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).bkp_image as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(bkp_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).hole_offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(hole_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).hole_length as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(hole_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).bimg_len as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(bimg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).bimg_info as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(bimg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).has_data as *const _ as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(has_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).data_len as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(data_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedBkpBlock>())).data_bufsz as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedBkpBlock),
            "::",
            stringify!(data_bufsz)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XLogReaderState {
    pub wal_segment_size: ::std::os::raw::c_int,
    pub read_page: XLogPageReadCB,
    pub system_identifier: uint64,
    pub private_data: *mut ::std::os::raw::c_void,
    pub ReadRecPtr: XLogRecPtr,
    pub EndRecPtr: XLogRecPtr,
    pub decoded_record: *mut XLogRecord,
    pub main_data: *mut ::std::os::raw::c_char,
    pub main_data_len: uint32,
    pub main_data_bufsz: uint32,
    pub record_origin: RepOriginId,
    pub blocks: [DecodedBkpBlock; 33usize],
    pub max_block_id: ::std::os::raw::c_int,
    pub readBuf: *mut ::std::os::raw::c_char,
    pub readLen: uint32,
    pub readSegNo: XLogSegNo,
    pub readOff: uint32,
    pub readPageTLI: TimeLineID,
    pub latestPagePtr: XLogRecPtr,
    pub latestPageTLI: TimeLineID,
    pub currRecPtr: XLogRecPtr,
    pub currTLI: TimeLineID,
    pub currTLIValidUntil: XLogRecPtr,
    pub nextTLI: TimeLineID,
    pub readRecordBuf: *mut ::std::os::raw::c_char,
    pub readRecordBufSize: uint32,
    pub errormsg_buf: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XLogReaderState() {
    assert_eq!(
        ::std::mem::size_of::<XLogReaderState>(),
        2304usize,
        concat!("Size of: ", stringify!(XLogReaderState))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogReaderState>(),
        8usize,
        concat!("Alignment of ", stringify!(XLogReaderState))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogReaderState>())).wal_segment_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(wal_segment_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).read_page as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(read_page)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogReaderState>())).system_identifier as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(system_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).private_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(private_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).ReadRecPtr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(ReadRecPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).EndRecPtr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(EndRecPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).decoded_record as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(decoded_record)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).main_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(main_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).main_data_len as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(main_data_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).main_data_bufsz as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(main_data_bufsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).record_origin as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(record_origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).blocks as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).max_block_id as *const _ as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(max_block_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).readBuf as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(readBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).readLen as *const _ as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(readLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).readSegNo as *const _ as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(readSegNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).readOff as *const _ as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(readOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).readPageTLI as *const _ as usize },
        2228usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(readPageTLI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).latestPagePtr as *const _ as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(latestPagePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).latestPageTLI as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(latestPageTLI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).currRecPtr as *const _ as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(currRecPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).currTLI as *const _ as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(currTLI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogReaderState>())).currTLIValidUntil as *const _ as usize
        },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(currTLIValidUntil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).nextTLI as *const _ as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(nextTLI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).readRecordBuf as *const _ as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(readRecordBuf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XLogReaderState>())).readRecordBufSize as *const _ as usize
        },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(readRecordBufSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XLogReaderState>())).errormsg_buf as *const _ as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogReaderState),
            "::",
            stringify!(errormsg_buf)
        )
    );
}
extern "C" {
    pub fn XLogReaderAllocate(
        wal_segment_size: ::std::os::raw::c_int,
        pagereadfunc: XLogPageReadCB,
        private_data: *mut ::std::os::raw::c_void,
    ) -> *mut XLogReaderState;
}
extern "C" {
    pub fn XLogReaderFree(state: *mut XLogReaderState);
}
extern "C" {
    pub fn XLogReadRecord(
        state: *mut XLogReaderState,
        recptr: XLogRecPtr,
        errormsg: *mut *mut ::std::os::raw::c_char,
    ) -> *mut XLogRecord;
}
extern "C" {
    pub fn XLogReaderValidatePageHeader(
        state: *mut XLogReaderState,
        recptr: XLogRecPtr,
        phdr: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn XLogReaderInvalReadState(state: *mut XLogReaderState);
}
extern "C" {
    pub fn DecodeXLogRecord(
        state: *mut XLogReaderState,
        record: *mut XLogRecord,
        errmsg: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn RestoreBlockImage(
        recoder: *mut XLogReaderState,
        block_id: uint8,
        dst: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn XLogRecGetBlockData(
        record: *mut XLogReaderState,
        block_id: uint8,
        len: *mut Size,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XLogRecGetBlockTag(
        record: *mut XLogReaderState,
        block_id: uint8,
        rnode: *mut RelFileNode,
        forknum: *mut ForkNumber,
        blknum: *mut BlockNumber,
    ) -> bool;
}
pub type XidStatus = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xl_clog_truncate {
    pub pageno: ::std::os::raw::c_int,
    pub oldestXact: TransactionId,
    pub oldestXactDb: Oid,
}
#[test]
fn bindgen_test_layout_xl_clog_truncate() {
    assert_eq!(
        ::std::mem::size_of::<xl_clog_truncate>(),
        12usize,
        concat!("Size of: ", stringify!(xl_clog_truncate))
    );
    assert_eq!(
        ::std::mem::align_of::<xl_clog_truncate>(),
        4usize,
        concat!("Alignment of ", stringify!(xl_clog_truncate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_clog_truncate>())).pageno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_clog_truncate),
            "::",
            stringify!(pageno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_clog_truncate>())).oldestXact as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_clog_truncate),
            "::",
            stringify!(oldestXact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_clog_truncate>())).oldestXactDb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_clog_truncate),
            "::",
            stringify!(oldestXactDb)
        )
    );
}
extern "C" {
    pub fn TransactionIdSetTreeStatus(
        xid: TransactionId,
        nsubxids: ::std::os::raw::c_int,
        subxids: *mut TransactionId,
        status: XidStatus,
        lsn: XLogRecPtr,
    );
}
extern "C" {
    pub fn TransactionIdGetStatus(xid: TransactionId, lsn: *mut XLogRecPtr) -> XidStatus;
}
extern "C" {
    pub fn CLOGShmemBuffers() -> Size;
}
extern "C" {
    pub fn CLOGShmemSize() -> Size;
}
extern "C" {
    pub fn CLOGShmemInit();
}
extern "C" {
    pub fn BootStrapCLOG();
}
extern "C" {
    pub fn StartupCLOG();
}
extern "C" {
    pub fn TrimCLOG();
}
extern "C" {
    pub fn ShutdownCLOG();
}
extern "C" {
    pub fn CheckPointCLOG();
}
extern "C" {
    pub fn ExtendCLOG(newestXact: TransactionId);
}
extern "C" {
    pub fn TruncateCLOG(oldestXact: TransactionId, oldestxid_datoid: Oid);
}
extern "C" {
    pub fn clog_redo(record: *mut XLogReaderState);
}
extern "C" {
    pub fn clog_desc(buf: StringInfo, record: *mut XLogReaderState);
}
extern "C" {
    pub fn clog_identify(info: uint8) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sigismember(
        arg1: *const __sigset_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type sigval_t = sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
    _bindgen_union_align: [u64; 14usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_tid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_overrun as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_status as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_utime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_stime as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))._lower
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))._upper
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr_lsb
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr_bnd
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_bnd)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_band as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_fd as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._call_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._syscall as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._arch as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._kill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._rt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigchld as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigfault as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigpoll as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigsys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>()))._sifields as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub const SI_ASYNCNL: _bindgen_ty_8 = -60;
pub const SI_TKILL: _bindgen_ty_8 = -6;
pub const SI_SIGIO: _bindgen_ty_8 = -5;
pub const SI_ASYNCIO: _bindgen_ty_8 = -4;
pub const SI_MESGQ: _bindgen_ty_8 = -3;
pub const SI_TIMER: _bindgen_ty_8 = -2;
pub const SI_QUEUE: _bindgen_ty_8 = -1;
pub const SI_USER: _bindgen_ty_8 = 0;
pub const SI_KERNEL: _bindgen_ty_8 = 128;
pub type _bindgen_ty_8 = i32;
pub const ILL_ILLOPC: _bindgen_ty_9 = 1;
pub const ILL_ILLOPN: _bindgen_ty_9 = 2;
pub const ILL_ILLADR: _bindgen_ty_9 = 3;
pub const ILL_ILLTRP: _bindgen_ty_9 = 4;
pub const ILL_PRVOPC: _bindgen_ty_9 = 5;
pub const ILL_PRVREG: _bindgen_ty_9 = 6;
pub const ILL_COPROC: _bindgen_ty_9 = 7;
pub const ILL_BADSTK: _bindgen_ty_9 = 8;
pub type _bindgen_ty_9 = u32;
pub const FPE_INTDIV: _bindgen_ty_10 = 1;
pub const FPE_INTOVF: _bindgen_ty_10 = 2;
pub const FPE_FLTDIV: _bindgen_ty_10 = 3;
pub const FPE_FLTOVF: _bindgen_ty_10 = 4;
pub const FPE_FLTUND: _bindgen_ty_10 = 5;
pub const FPE_FLTRES: _bindgen_ty_10 = 6;
pub const FPE_FLTINV: _bindgen_ty_10 = 7;
pub const FPE_FLTSUB: _bindgen_ty_10 = 8;
pub type _bindgen_ty_10 = u32;
pub const SEGV_MAPERR: _bindgen_ty_11 = 1;
pub const SEGV_ACCERR: _bindgen_ty_11 = 2;
pub type _bindgen_ty_11 = u32;
pub const BUS_ADRALN: _bindgen_ty_12 = 1;
pub const BUS_ADRERR: _bindgen_ty_12 = 2;
pub const BUS_OBJERR: _bindgen_ty_12 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_12 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_12 = 5;
pub type _bindgen_ty_12 = u32;
pub const CLD_EXITED: _bindgen_ty_13 = 1;
pub const CLD_KILLED: _bindgen_ty_13 = 2;
pub const CLD_DUMPED: _bindgen_ty_13 = 3;
pub const CLD_TRAPPED: _bindgen_ty_13 = 4;
pub const CLD_STOPPED: _bindgen_ty_13 = 5;
pub const CLD_CONTINUED: _bindgen_ty_13 = 6;
pub type _bindgen_ty_13 = u32;
pub const POLL_IN: _bindgen_ty_14 = 1;
pub const POLL_OUT: _bindgen_ty_14 = 2;
pub const POLL_MSG: _bindgen_ty_14 = 3;
pub const POLL_ERR: _bindgen_ty_14 = 4;
pub const POLL_PRI: _bindgen_ty_14 = 5;
pub const POLL_HUP: _bindgen_ty_14 = 6;
pub type _bindgen_ty_14 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._function as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._attribute as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._tid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._sigev_thread as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>()))._sigev_un as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_15 = 0;
pub const SIGEV_NONE: _bindgen_ty_15 = 1;
pub const SIGEV_THREAD: _bindgen_ty_15 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_15 = 4;
pub type _bindgen_ty_15 = u32;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_handler as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_sigaction as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_restorer as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sys_siglist"]
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    #[link_name = "\u{1}sys_siglist"]
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(
        ::std::mem::size_of::<_fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).magic1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).extended_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_bv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).padding as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpreg>(),
        10usize,
        concat!("Size of: ", stringify!(_fpreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(exponent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpxreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).padding as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmmreg>())).element as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).swd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).rip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).rdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>()))._st as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>()))._xmm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).padding as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).fpstate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).__fpstate_word as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(__fpstate_word)
        )
    );
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r9 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r10 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r11 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r12 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r13 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r14 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r15 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rdi as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rsi as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rbp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rbx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rdx as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rax as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rcx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rsp as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rip as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).eflags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).cs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).gs as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).fs as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).__pad0 as *const _ as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).err as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).trapno as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).oldmask as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).cr2 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).__reserved1 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(
        ::std::mem::size_of::<_xsave_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsave_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).xstate_bv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).reserved1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).reserved2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(
        ::std::mem::size_of::<_ymmh_state>(),
        256usize,
        concat!("Size of: ", stringify!(_ymmh_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_ymmh_state>(),
        4usize,
        concat!("Alignment of ", stringify!(_ymmh_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ymmh_state>())).ymmh_space as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ymmh_state),
            "::",
            stringify!(ymmh_space)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(
        ::std::mem::size_of::<_xstate>(),
        832usize,
        concat!("Size of: ", stringify!(_xstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_xstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_xstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).fpstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).xstate_hdr as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(xstate_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).ymmh as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(ymmh)
        )
    );
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
pub const SS_ONSTACK: _bindgen_ty_16 = 1;
pub const SS_DISABLE: _bindgen_ty_16 = 2;
pub type _bindgen_ty_16 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaltstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaltstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaltstack>())).ss_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaltstack>())).ss_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type stack_t = sigaltstack;
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).padding as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_xmmreg>())).element as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).swd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._st as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._xmm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).padding as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(padding)
        )
    );
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        256usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).gregs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(gregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).fpregs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fpregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).__reserved1 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: _libc_fpstate,
}
#[test]
fn bindgen_test_layout_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<ucontext>(),
        936usize,
        concat!("Size of: ", stringify!(ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(ucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext>())).uc_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext>())).uc_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext>())).uc_stack as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext>())).uc_mcontext as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext>())).uc_sigmask as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext>())).__fpregs_mem as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(__fpregs_mem)
        )
    );
}
pub type ucontext_t = ucontext;
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(__ss: *const sigaltstack, __oss: *mut sigaltstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Latch {
    pub is_set: sig_atomic_t,
    pub is_shared: bool,
    pub owner_pid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Latch() {
    assert_eq!(
        ::std::mem::size_of::<Latch>(),
        12usize,
        concat!("Size of: ", stringify!(Latch))
    );
    assert_eq!(
        ::std::mem::align_of::<Latch>(),
        4usize,
        concat!("Alignment of ", stringify!(Latch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Latch>())).is_set as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Latch),
            "::",
            stringify!(is_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Latch>())).is_shared as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Latch),
            "::",
            stringify!(is_shared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Latch>())).owner_pid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Latch),
            "::",
            stringify!(owner_pid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WaitEvent {
    pub pos: ::std::os::raw::c_int,
    pub events: uint32,
    pub fd: pgsocket,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_WaitEvent() {
    assert_eq!(
        ::std::mem::size_of::<WaitEvent>(),
        24usize,
        concat!("Size of: ", stringify!(WaitEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<WaitEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(WaitEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WaitEvent>())).pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WaitEvent),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WaitEvent>())).events as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WaitEvent),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WaitEvent>())).fd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WaitEvent),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WaitEvent>())).user_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WaitEvent),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WaitEventSet {
    _unused: [u8; 0],
}
extern "C" {
    pub fn InitializeLatchSupport();
}
extern "C" {
    pub fn InitLatch(latch: *mut Latch);
}
extern "C" {
    pub fn InitSharedLatch(latch: *mut Latch);
}
extern "C" {
    pub fn OwnLatch(latch: *mut Latch);
}
extern "C" {
    pub fn DisownLatch(latch: *mut Latch);
}
extern "C" {
    pub fn SetLatch(latch: *mut Latch);
}
extern "C" {
    pub fn ResetLatch(latch: *mut Latch);
}
extern "C" {
    pub fn CreateWaitEventSet(
        context: MemoryContext,
        nevents: ::std::os::raw::c_int,
    ) -> *mut WaitEventSet;
}
extern "C" {
    pub fn FreeWaitEventSet(set: *mut WaitEventSet);
}
extern "C" {
    pub fn AddWaitEventToSet(
        set: *mut WaitEventSet,
        events: uint32,
        fd: pgsocket,
        latch: *mut Latch,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ModifyWaitEvent(
        set: *mut WaitEventSet,
        pos: ::std::os::raw::c_int,
        events: uint32,
        latch: *mut Latch,
    );
}
extern "C" {
    pub fn WaitEventSetWait(
        set: *mut WaitEventSet,
        timeout: ::std::os::raw::c_long,
        occurred_events: *mut WaitEvent,
        nevents: ::std::os::raw::c_int,
        wait_event_info: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WaitLatch(
        latch: *mut Latch,
        wakeEvents: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_long,
        wait_event_info: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WaitLatchOrSocket(
        latch: *mut Latch,
        wakeEvents: ::std::os::raw::c_int,
        sock: pgsocket,
        timeout: ::std::os::raw::c_long,
        wait_event_info: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latch_sigusr1_handler();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PGSemaphoreData {
    _unused: [u8; 0],
}
pub type PGSemaphore = *mut PGSemaphoreData;
extern "C" {
    pub fn PGSemaphoreShmemSize(maxSemas: ::std::os::raw::c_int) -> Size;
}
extern "C" {
    pub fn PGReserveSemaphores(maxSemas: ::std::os::raw::c_int, port: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PGSemaphoreCreate() -> PGSemaphore;
}
extern "C" {
    pub fn PGSemaphoreReset(sema: PGSemaphore);
}
extern "C" {
    pub fn PGSemaphoreLock(sema: PGSemaphore);
}
extern "C" {
    pub fn PGSemaphoreUnlock(sema: PGSemaphore);
}
extern "C" {
    pub fn PGSemaphoreTryLock(sema: PGSemaphore) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XidCache {
    pub xids: [TransactionId; 64usize],
}
#[test]
fn bindgen_test_layout_XidCache() {
    assert_eq!(
        ::std::mem::size_of::<XidCache>(),
        256usize,
        concat!("Size of: ", stringify!(XidCache))
    );
    assert_eq!(
        ::std::mem::align_of::<XidCache>(),
        4usize,
        concat!("Alignment of ", stringify!(XidCache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XidCache>())).xids as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XidCache),
            "::",
            stringify!(xids)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PGPROC {
    pub links: SHM_QUEUE,
    pub procgloballist: *mut *mut PGPROC,
    pub sem: PGSemaphore,
    pub waitStatus: ::std::os::raw::c_int,
    pub procLatch: Latch,
    pub lxid: LocalTransactionId,
    pub pid: ::std::os::raw::c_int,
    pub pgprocno: ::std::os::raw::c_int,
    pub backendId: BackendId,
    pub databaseId: Oid,
    pub roleId: Oid,
    pub tempNamespaceId: Oid,
    pub isBackgroundWorker: bool,
    pub recoveryConflictPending: bool,
    pub lwWaiting: bool,
    pub lwWaitMode: uint8,
    pub lwWaitLink: proclist_node,
    pub cvWaitLink: proclist_node,
    pub waitLock: *mut LOCK,
    pub waitProcLock: *mut PROCLOCK,
    pub waitLockMode: LOCKMODE,
    pub heldLocks: LOCKMASK,
    pub waitLSN: XLogRecPtr,
    pub syncRepState: ::std::os::raw::c_int,
    pub syncRepLinks: SHM_QUEUE,
    pub myProcLocks: [SHM_QUEUE; 16usize],
    pub subxids: XidCache,
    pub procArrayGroupMember: bool,
    pub procArrayGroupNext: pg_atomic_uint32,
    pub procArrayGroupMemberXid: TransactionId,
    pub wait_event_info: uint32,
    pub clogGroupMember: bool,
    pub clogGroupNext: pg_atomic_uint32,
    pub clogGroupMemberXid: TransactionId,
    pub clogGroupMemberXidStatus: XidStatus,
    pub clogGroupMemberPage: ::std::os::raw::c_int,
    pub clogGroupMemberLsn: XLogRecPtr,
    pub backendLock: LWLock,
    pub fpLockBits: uint64,
    pub fpRelId: [Oid; 16usize],
    pub fpVXIDLock: bool,
    pub fpLocalTransactionId: LocalTransactionId,
    pub lockGroupLeader: *mut PGPROC,
    pub lockGroupMembers: dlist_head,
    pub lockGroupLink: dlist_node,
}
#[test]
fn bindgen_test_layout_PGPROC() {
    assert_eq!(
        ::std::mem::size_of::<PGPROC>(),
        848usize,
        concat!("Size of: ", stringify!(PGPROC))
    );
    assert_eq!(
        ::std::mem::align_of::<PGPROC>(),
        8usize,
        concat!("Alignment of ", stringify!(PGPROC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).links as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(links)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).procgloballist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(procgloballist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).sem as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(sem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).waitStatus as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(waitStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).procLatch as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(procLatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).lxid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(lxid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).pid as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).pgprocno as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(pgprocno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).backendId as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(backendId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).databaseId as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(databaseId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).roleId as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(roleId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).tempNamespaceId as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(tempNamespaceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).isBackgroundWorker as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(isBackgroundWorker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).recoveryConflictPending as *const _ as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(recoveryConflictPending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).lwWaiting as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(lwWaiting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).lwWaitMode as *const _ as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(lwWaitMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).lwWaitLink as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(lwWaitLink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).cvWaitLink as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(cvWaitLink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).waitLock as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(waitLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).waitProcLock as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(waitProcLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).waitLockMode as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(waitLockMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).heldLocks as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(heldLocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).waitLSN as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(waitLSN)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).syncRepState as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(syncRepState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).syncRepLinks as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(syncRepLinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).myProcLocks as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(myProcLocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).subxids as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(subxids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).procArrayGroupMember as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(procArrayGroupMember)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).procArrayGroupNext as *const _ as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(procArrayGroupNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).procArrayGroupMemberXid as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(procArrayGroupMemberXid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).wait_event_info as *const _ as usize },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(wait_event_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).clogGroupMember as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(clogGroupMember)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).clogGroupNext as *const _ as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(clogGroupNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).clogGroupMemberXid as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(clogGroupMemberXid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).clogGroupMemberXidStatus as *const _ as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(clogGroupMemberXidStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).clogGroupMemberPage as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(clogGroupMemberPage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).clogGroupMemberLsn as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(clogGroupMemberLsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).backendLock as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(backendLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).fpLockBits as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(fpLockBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).fpRelId as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(fpRelId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).fpVXIDLock as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(fpVXIDLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).fpLocalTransactionId as *const _ as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(fpLocalTransactionId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).lockGroupLeader as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(lockGroupLeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).lockGroupMembers as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(lockGroupMembers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGPROC>())).lockGroupLink as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(PGPROC),
            "::",
            stringify!(lockGroupLink)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}MyProc"]
    pub static mut MyProc: *mut PGPROC;
}
extern "C" {
    #[link_name = "\u{1}MyPgXact"]
    pub static mut MyPgXact: *mut PGXACT;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PGXACT {
    pub xid: TransactionId,
    pub xmin: TransactionId,
    pub vacuumFlags: uint8,
    pub overflowed: bool,
    pub delayChkpt: bool,
    pub nxids: uint8,
}
#[test]
fn bindgen_test_layout_PGXACT() {
    assert_eq!(
        ::std::mem::size_of::<PGXACT>(),
        12usize,
        concat!("Size of: ", stringify!(PGXACT))
    );
    assert_eq!(
        ::std::mem::align_of::<PGXACT>(),
        4usize,
        concat!("Alignment of ", stringify!(PGXACT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGXACT>())).xid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PGXACT),
            "::",
            stringify!(xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGXACT>())).xmin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PGXACT),
            "::",
            stringify!(xmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGXACT>())).vacuumFlags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PGXACT),
            "::",
            stringify!(vacuumFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGXACT>())).overflowed as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(PGXACT),
            "::",
            stringify!(overflowed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGXACT>())).delayChkpt as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(PGXACT),
            "::",
            stringify!(delayChkpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PGXACT>())).nxids as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(PGXACT),
            "::",
            stringify!(nxids)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PROC_HDR {
    pub allProcs: *mut PGPROC,
    pub allPgXact: *mut PGXACT,
    pub allProcCount: uint32,
    pub freeProcs: *mut PGPROC,
    pub autovacFreeProcs: *mut PGPROC,
    pub bgworkerFreeProcs: *mut PGPROC,
    pub procArrayGroupFirst: pg_atomic_uint32,
    pub clogGroupFirst: pg_atomic_uint32,
    pub walwriterLatch: *mut Latch,
    pub checkpointerLatch: *mut Latch,
    pub spins_per_delay: ::std::os::raw::c_int,
    pub startupProc: *mut PGPROC,
    pub startupProcPid: ::std::os::raw::c_int,
    pub startupBufferPinWaitBufId: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PROC_HDR() {
    assert_eq!(
        ::std::mem::size_of::<PROC_HDR>(),
        96usize,
        concat!("Size of: ", stringify!(PROC_HDR))
    );
    assert_eq!(
        ::std::mem::align_of::<PROC_HDR>(),
        8usize,
        concat!("Alignment of ", stringify!(PROC_HDR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).allProcs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(allProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).allPgXact as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(allPgXact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).allProcCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(allProcCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).freeProcs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(freeProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).autovacFreeProcs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(autovacFreeProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).bgworkerFreeProcs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(bgworkerFreeProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).procArrayGroupFirst as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(procArrayGroupFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).clogGroupFirst as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(clogGroupFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).walwriterLatch as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(walwriterLatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).checkpointerLatch as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(checkpointerLatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).spins_per_delay as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(spins_per_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).startupProc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(startupProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROC_HDR>())).startupProcPid as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(startupProcPid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PROC_HDR>())).startupBufferPinWaitBufId as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(PROC_HDR),
            "::",
            stringify!(startupBufferPinWaitBufId)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}ProcGlobal"]
    pub static mut ProcGlobal: *mut PROC_HDR;
}
extern "C" {
    #[link_name = "\u{1}PreparedXactProcs"]
    pub static mut PreparedXactProcs: *mut PGPROC;
}
extern "C" {
    #[link_name = "\u{1}DeadlockTimeout"]
    pub static mut DeadlockTimeout: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}StatementTimeout"]
    pub static mut StatementTimeout: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}LockTimeout"]
    pub static mut LockTimeout: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}IdleInTransactionSessionTimeout"]
    pub static mut IdleInTransactionSessionTimeout: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}log_lock_waits"]
    pub static mut log_lock_waits: bool;
}
extern "C" {
    pub fn ProcGlobalSemas() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ProcGlobalShmemSize() -> Size;
}
extern "C" {
    pub fn InitProcGlobal();
}
extern "C" {
    pub fn InitProcess();
}
extern "C" {
    pub fn InitProcessPhase2();
}
extern "C" {
    pub fn InitAuxiliaryProcess();
}
extern "C" {
    pub fn PublishStartupProcessInformation();
}
extern "C" {
    pub fn SetStartupBufferPinWaitBufId(bufid: ::std::os::raw::c_int);
}
extern "C" {
    pub fn GetStartupBufferPinWaitBufId() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HaveNFreeProcs(n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ProcReleaseLocks(isCommit: bool);
}
extern "C" {
    pub fn ProcQueueInit(queue: *mut PROC_QUEUE);
}
extern "C" {
    pub fn ProcSleep(
        locallock: *mut LOCALLOCK,
        lockMethodTable: LockMethod,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ProcWakeup(proc_: *mut PGPROC, waitStatus: ::std::os::raw::c_int) -> *mut PGPROC;
}
extern "C" {
    pub fn ProcLockWakeup(lockMethodTable: LockMethod, lock: *mut LOCK);
}
extern "C" {
    pub fn CheckDeadLockAlert();
}
extern "C" {
    pub fn IsWaitingForLock() -> bool;
}
extern "C" {
    pub fn LockErrorCleanup();
}
extern "C" {
    pub fn ProcWaitForSignal(wait_event_info: uint32);
}
extern "C" {
    pub fn ProcSendSignal(pid: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AuxiliaryPidGetProc(pid: ::std::os::raw::c_int) -> *mut PGPROC;
}
extern "C" {
    pub fn BecomeLockGroupLeader();
}
extern "C" {
    pub fn BecomeLockGroupMember(leader: *mut PGPROC, pid: ::std::os::raw::c_int) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shm_mq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shm_mq_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shm_mq_iovec {
    pub data: *const ::std::os::raw::c_char,
    pub len: Size,
}
#[test]
fn bindgen_test_layout_shm_mq_iovec() {
    assert_eq!(
        ::std::mem::size_of::<shm_mq_iovec>(),
        16usize,
        concat!("Size of: ", stringify!(shm_mq_iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<shm_mq_iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(shm_mq_iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shm_mq_iovec>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_mq_iovec),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shm_mq_iovec>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_mq_iovec),
            "::",
            stringify!(len)
        )
    );
}
pub const shm_mq_result_SHM_MQ_SUCCESS: shm_mq_result = 0;
pub const shm_mq_result_SHM_MQ_WOULD_BLOCK: shm_mq_result = 1;
pub const shm_mq_result_SHM_MQ_DETACHED: shm_mq_result = 2;
pub type shm_mq_result = u32;
extern "C" {
    pub fn shm_mq_create(address: *mut ::std::os::raw::c_void, size: Size) -> *mut shm_mq;
}
extern "C" {
    pub fn shm_mq_set_receiver(mq: *mut shm_mq, arg1: *mut PGPROC);
}
extern "C" {
    pub fn shm_mq_set_sender(mq: *mut shm_mq, arg1: *mut PGPROC);
}
extern "C" {
    pub fn shm_mq_get_receiver(arg1: *mut shm_mq) -> *mut PGPROC;
}
extern "C" {
    pub fn shm_mq_get_sender(arg1: *mut shm_mq) -> *mut PGPROC;
}
extern "C" {
    pub fn shm_mq_attach(
        mq: *mut shm_mq,
        seg: *mut dsm_segment,
        handle: *mut BackgroundWorkerHandle,
    ) -> *mut shm_mq_handle;
}
extern "C" {
    pub fn shm_mq_set_handle(arg1: *mut shm_mq_handle, arg2: *mut BackgroundWorkerHandle);
}
extern "C" {
    pub fn shm_mq_detach(mqh: *mut shm_mq_handle);
}
extern "C" {
    pub fn shm_mq_get_queue(mqh: *mut shm_mq_handle) -> *mut shm_mq;
}
extern "C" {
    pub fn shm_mq_send(
        mqh: *mut shm_mq_handle,
        nbytes: Size,
        data: *const ::std::os::raw::c_void,
        nowait: bool,
    ) -> shm_mq_result;
}
extern "C" {
    pub fn shm_mq_sendv(
        mqh: *mut shm_mq_handle,
        iov: *mut shm_mq_iovec,
        iovcnt: ::std::os::raw::c_int,
        nowait: bool,
    ) -> shm_mq_result;
}
extern "C" {
    pub fn shm_mq_receive(
        mqh: *mut shm_mq_handle,
        nbytesp: *mut Size,
        datap: *mut *mut ::std::os::raw::c_void,
        nowait: bool,
    ) -> shm_mq_result;
}
extern "C" {
    pub fn shm_mq_wait_for_attach(mqh: *mut shm_mq_handle) -> shm_mq_result;
}
extern "C" {
    #[link_name = "\u{1}shm_mq_minimum_size"]
    pub static shm_mq_minimum_size: Size;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shm_toc {
    _unused: [u8; 0],
}
extern "C" {
    pub fn shm_toc_create(
        magic: uint64,
        address: *mut ::std::os::raw::c_void,
        nbytes: Size,
    ) -> *mut shm_toc;
}
extern "C" {
    pub fn shm_toc_attach(magic: uint64, address: *mut ::std::os::raw::c_void) -> *mut shm_toc;
}
extern "C" {
    pub fn shm_toc_allocate(toc: *mut shm_toc, nbytes: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn shm_toc_freespace(toc: *mut shm_toc) -> Size;
}
extern "C" {
    pub fn shm_toc_insert(toc: *mut shm_toc, key: uint64, address: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn shm_toc_lookup(
        toc: *mut shm_toc,
        key: uint64,
        noError: bool,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shm_toc_estimator {
    pub space_for_chunks: Size,
    pub number_of_keys: Size,
}
#[test]
fn bindgen_test_layout_shm_toc_estimator() {
    assert_eq!(
        ::std::mem::size_of::<shm_toc_estimator>(),
        16usize,
        concat!("Size of: ", stringify!(shm_toc_estimator))
    );
    assert_eq!(
        ::std::mem::align_of::<shm_toc_estimator>(),
        8usize,
        concat!("Alignment of ", stringify!(shm_toc_estimator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<shm_toc_estimator>())).space_for_chunks as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_toc_estimator),
            "::",
            stringify!(space_for_chunks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<shm_toc_estimator>())).number_of_keys as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_toc_estimator),
            "::",
            stringify!(number_of_keys)
        )
    );
}
extern "C" {
    pub fn shm_toc_estimate(e: *mut shm_toc_estimator) -> Size;
}
pub type parallel_worker_main_type =
    ::std::option::Option<unsafe extern "C" fn(seg: *mut dsm_segment, toc: *mut shm_toc)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParallelWorkerInfo {
    pub bgwhandle: *mut BackgroundWorkerHandle,
    pub error_mqh: *mut shm_mq_handle,
    pub pid: int32,
}
#[test]
fn bindgen_test_layout_ParallelWorkerInfo() {
    assert_eq!(
        ::std::mem::size_of::<ParallelWorkerInfo>(),
        24usize,
        concat!("Size of: ", stringify!(ParallelWorkerInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ParallelWorkerInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ParallelWorkerInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelWorkerInfo>())).bgwhandle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelWorkerInfo),
            "::",
            stringify!(bgwhandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelWorkerInfo>())).error_mqh as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelWorkerInfo),
            "::",
            stringify!(error_mqh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelWorkerInfo>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelWorkerInfo),
            "::",
            stringify!(pid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParallelContext {
    pub node: dlist_node,
    pub subid: SubTransactionId,
    pub nworkers: ::std::os::raw::c_int,
    pub nworkers_launched: ::std::os::raw::c_int,
    pub library_name: *mut ::std::os::raw::c_char,
    pub function_name: *mut ::std::os::raw::c_char,
    pub error_context_stack: *mut ErrorContextCallback,
    pub estimator: shm_toc_estimator,
    pub seg: *mut dsm_segment,
    pub private_memory: *mut ::std::os::raw::c_void,
    pub toc: *mut shm_toc,
    pub worker: *mut ParallelWorkerInfo,
    pub nknown_attached_workers: ::std::os::raw::c_int,
    pub known_attached_workers: *mut bool,
}
#[test]
fn bindgen_test_layout_ParallelContext() {
    assert_eq!(
        ::std::mem::size_of::<ParallelContext>(),
        120usize,
        concat!("Size of: ", stringify!(ParallelContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ParallelContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ParallelContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).subid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(subid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).nworkers as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(nworkers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParallelContext>())).nworkers_launched as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(nworkers_launched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).library_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(library_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).function_name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParallelContext>())).error_context_stack as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(error_context_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).estimator as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(estimator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).seg as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(seg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).private_memory as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(private_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).toc as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(toc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelContext>())).worker as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(worker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParallelContext>())).nknown_attached_workers as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(nknown_attached_workers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParallelContext>())).known_attached_workers as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelContext),
            "::",
            stringify!(known_attached_workers)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParallelWorkerContext {
    pub seg: *mut dsm_segment,
    pub toc: *mut shm_toc,
}
#[test]
fn bindgen_test_layout_ParallelWorkerContext() {
    assert_eq!(
        ::std::mem::size_of::<ParallelWorkerContext>(),
        16usize,
        concat!("Size of: ", stringify!(ParallelWorkerContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ParallelWorkerContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ParallelWorkerContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelWorkerContext>())).seg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelWorkerContext),
            "::",
            stringify!(seg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParallelWorkerContext>())).toc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParallelWorkerContext),
            "::",
            stringify!(toc)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}ParallelMessagePending"]
    pub static mut ParallelMessagePending: bool;
}
extern "C" {
    #[link_name = "\u{1}ParallelWorkerNumber"]
    pub static mut ParallelWorkerNumber: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}InitializingParallelWorker"]
    pub static mut InitializingParallelWorker: bool;
}
extern "C" {
    pub fn CreateParallelContext(
        library_name: *const ::std::os::raw::c_char,
        function_name: *const ::std::os::raw::c_char,
        nworkers: ::std::os::raw::c_int,
        serializable_okay: bool,
    ) -> *mut ParallelContext;
}
extern "C" {
    pub fn InitializeParallelDSM(pcxt: *mut ParallelContext);
}
extern "C" {
    pub fn ReinitializeParallelDSM(pcxt: *mut ParallelContext);
}
extern "C" {
    pub fn LaunchParallelWorkers(pcxt: *mut ParallelContext);
}
extern "C" {
    pub fn WaitForParallelWorkersToAttach(pcxt: *mut ParallelContext);
}
extern "C" {
    pub fn WaitForParallelWorkersToFinish(pcxt: *mut ParallelContext);
}
extern "C" {
    pub fn DestroyParallelContext(pcxt: *mut ParallelContext);
}
extern "C" {
    pub fn ParallelContextActive() -> bool;
}
extern "C" {
    pub fn HandleParallelMessageInterrupt();
}
extern "C" {
    pub fn HandleParallelMessages();
}
extern "C" {
    pub fn AtEOXact_Parallel(isCommit: bool);
}
extern "C" {
    pub fn AtEOSubXact_Parallel(isCommit: bool, mySubId: SubTransactionId);
}
extern "C" {
    pub fn ParallelWorkerReportLastRecEnd(last_xlog_end: XLogRecPtr);
}
extern "C" {
    pub fn ParallelWorkerMain(main_arg: Datum);
}
pub const LockClauseStrength_LCS_NONE: LockClauseStrength = 0;
pub const LockClauseStrength_LCS_FORKEYSHARE: LockClauseStrength = 1;
pub const LockClauseStrength_LCS_FORSHARE: LockClauseStrength = 2;
pub const LockClauseStrength_LCS_FORNOKEYUPDATE: LockClauseStrength = 3;
pub const LockClauseStrength_LCS_FORUPDATE: LockClauseStrength = 4;
pub type LockClauseStrength = u32;
pub const LockWaitPolicy_LockWaitBlock: LockWaitPolicy = 0;
pub const LockWaitPolicy_LockWaitSkip: LockWaitPolicy = 1;
pub const LockWaitPolicy_LockWaitError: LockWaitPolicy = 2;
pub type LockWaitPolicy = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Alias {
    pub type_: NodeTag,
    pub aliasname: *mut ::std::os::raw::c_char,
    pub colnames: *mut List,
}
#[test]
fn bindgen_test_layout_Alias() {
    assert_eq!(
        ::std::mem::size_of::<Alias>(),
        24usize,
        concat!("Size of: ", stringify!(Alias))
    );
    assert_eq!(
        ::std::mem::align_of::<Alias>(),
        8usize,
        concat!("Alignment of ", stringify!(Alias))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Alias>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Alias),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Alias>())).aliasname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Alias),
            "::",
            stringify!(aliasname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Alias>())).colnames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Alias),
            "::",
            stringify!(colnames)
        )
    );
}
pub const OnCommitAction_ONCOMMIT_NOOP: OnCommitAction = 0;
pub const OnCommitAction_ONCOMMIT_PRESERVE_ROWS: OnCommitAction = 1;
pub const OnCommitAction_ONCOMMIT_DELETE_ROWS: OnCommitAction = 2;
pub const OnCommitAction_ONCOMMIT_DROP: OnCommitAction = 3;
pub type OnCommitAction = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeVar {
    pub type_: NodeTag,
    pub catalogname: *mut ::std::os::raw::c_char,
    pub schemaname: *mut ::std::os::raw::c_char,
    pub relname: *mut ::std::os::raw::c_char,
    pub inh: bool,
    pub relpersistence: ::std::os::raw::c_char,
    pub alias: *mut Alias,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeVar() {
    assert_eq!(
        ::std::mem::size_of::<RangeVar>(),
        56usize,
        concat!("Size of: ", stringify!(RangeVar))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeVar>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeVar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).catalogname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(catalogname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).schemaname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(schemaname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).relname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(relname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).inh as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(inh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).relpersistence as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(relpersistence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).alias as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TableFunc {
    pub type_: NodeTag,
    pub ns_uris: *mut List,
    pub ns_names: *mut List,
    pub docexpr: *mut Node,
    pub rowexpr: *mut Node,
    pub colnames: *mut List,
    pub coltypes: *mut List,
    pub coltypmods: *mut List,
    pub colcollations: *mut List,
    pub colexprs: *mut List,
    pub coldefexprs: *mut List,
    pub notnulls: *mut Bitmapset,
    pub ordinalitycol: ::std::os::raw::c_int,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TableFunc() {
    assert_eq!(
        ::std::mem::size_of::<TableFunc>(),
        104usize,
        concat!("Size of: ", stringify!(TableFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<TableFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(TableFunc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).ns_uris as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(ns_uris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).ns_names as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(ns_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).docexpr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(docexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).rowexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(rowexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).colnames as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(colnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).coltypes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(coltypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).coltypmods as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(coltypmods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).colcollations as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(colcollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).colexprs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(colexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).coldefexprs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(coldefexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).notnulls as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(notnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).ordinalitycol as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(ordinalitycol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).location as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IntoClause {
    pub type_: NodeTag,
    pub rel: *mut RangeVar,
    pub colNames: *mut List,
    pub options: *mut List,
    pub onCommit: OnCommitAction,
    pub tableSpaceName: *mut ::std::os::raw::c_char,
    pub viewQuery: *mut Node,
    pub skipData: bool,
}
#[test]
fn bindgen_test_layout_IntoClause() {
    assert_eq!(
        ::std::mem::size_of::<IntoClause>(),
        64usize,
        concat!("Size of: ", stringify!(IntoClause))
    );
    assert_eq!(
        ::std::mem::align_of::<IntoClause>(),
        8usize,
        concat!("Alignment of ", stringify!(IntoClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).rel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).colNames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(colNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).onCommit as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(onCommit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).tableSpaceName as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(tableSpaceName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).viewQuery as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(viewQuery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).skipData as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(skipData)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Expr {
    pub type_: NodeTag,
}
#[test]
fn bindgen_test_layout_Expr() {
    assert_eq!(
        ::std::mem::size_of::<Expr>(),
        4usize,
        concat!("Size of: ", stringify!(Expr))
    );
    assert_eq!(
        ::std::mem::align_of::<Expr>(),
        4usize,
        concat!("Alignment of ", stringify!(Expr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Expr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Expr),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Var {
    pub xpr: Expr,
    pub varno: Index,
    pub varattno: AttrNumber,
    pub vartype: Oid,
    pub vartypmod: int32,
    pub varcollid: Oid,
    pub varlevelsup: Index,
    pub varnoold: Index,
    pub varoattno: AttrNumber,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Var() {
    assert_eq!(
        ::std::mem::size_of::<Var>(),
        40usize,
        concat!("Size of: ", stringify!(Var))
    );
    assert_eq!(
        ::std::mem::align_of::<Var>(),
        4usize,
        concat!("Alignment of ", stringify!(Var))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).xpr as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Var), "::", stringify!(xpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varattno as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varattno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).vartype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(vartype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).vartypmod as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(vartypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varcollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varlevelsup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varlevelsup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varnoold as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varnoold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varoattno as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varoattno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).location as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Const {
    pub xpr: Expr,
    pub consttype: Oid,
    pub consttypmod: int32,
    pub constcollid: Oid,
    pub constlen: ::std::os::raw::c_int,
    pub constvalue: Datum,
    pub constisnull: bool,
    pub constbyval: bool,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Const() {
    assert_eq!(
        ::std::mem::size_of::<Const>(),
        40usize,
        concat!("Size of: ", stringify!(Const))
    );
    assert_eq!(
        ::std::mem::align_of::<Const>(),
        8usize,
        concat!("Alignment of ", stringify!(Const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).consttype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(consttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).consttypmod as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(consttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constcollid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constvalue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constisnull as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constisnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constbyval as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).location as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(location)
        )
    );
}
pub const ParamKind_PARAM_EXTERN: ParamKind = 0;
pub const ParamKind_PARAM_EXEC: ParamKind = 1;
pub const ParamKind_PARAM_SUBLINK: ParamKind = 2;
pub const ParamKind_PARAM_MULTIEXPR: ParamKind = 3;
pub type ParamKind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Param {
    pub xpr: Expr,
    pub paramkind: ParamKind,
    pub paramid: ::std::os::raw::c_int,
    pub paramtype: Oid,
    pub paramtypmod: int32,
    pub paramcollid: Oid,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Param() {
    assert_eq!(
        ::std::mem::size_of::<Param>(),
        28usize,
        concat!("Size of: ", stringify!(Param))
    );
    assert_eq!(
        ::std::mem::align_of::<Param>(),
        4usize,
        concat!("Alignment of ", stringify!(Param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramkind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramtype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramtypmod as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramtypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramcollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Aggref {
    pub xpr: Expr,
    pub aggfnoid: Oid,
    pub aggtype: Oid,
    pub aggcollid: Oid,
    pub inputcollid: Oid,
    pub aggtranstype: Oid,
    pub aggargtypes: *mut List,
    pub aggdirectargs: *mut List,
    pub args: *mut List,
    pub aggorder: *mut List,
    pub aggdistinct: *mut List,
    pub aggfilter: *mut Expr,
    pub aggstar: bool,
    pub aggvariadic: bool,
    pub aggkind: ::std::os::raw::c_char,
    pub agglevelsup: Index,
    pub aggsplit: AggSplit,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Aggref() {
    assert_eq!(
        ::std::mem::size_of::<Aggref>(),
        88usize,
        concat!("Size of: ", stringify!(Aggref))
    );
    assert_eq!(
        ::std::mem::align_of::<Aggref>(),
        8usize,
        concat!("Alignment of ", stringify!(Aggref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggfnoid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggfnoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggcollid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).inputcollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggtranstype as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggtranstype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggargtypes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggargtypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggdirectargs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggdirectargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).args as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggorder as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggorder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggdistinct as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggdistinct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggfilter as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggstar as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggstar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggvariadic as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggvariadic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggkind as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).agglevelsup as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(agglevelsup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggsplit as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggsplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).location as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GroupingFunc {
    pub xpr: Expr,
    pub args: *mut List,
    pub refs: *mut List,
    pub cols: *mut List,
    pub agglevelsup: Index,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GroupingFunc() {
    assert_eq!(
        ::std::mem::size_of::<GroupingFunc>(),
        40usize,
        concat!("Size of: ", stringify!(GroupingFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupingFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupingFunc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).cols as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).agglevelsup as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(agglevelsup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).location as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowFunc {
    pub xpr: Expr,
    pub winfnoid: Oid,
    pub wintype: Oid,
    pub wincollid: Oid,
    pub inputcollid: Oid,
    pub args: *mut List,
    pub aggfilter: *mut Expr,
    pub winref: Index,
    pub winstar: bool,
    pub winagg: bool,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WindowFunc() {
    assert_eq!(
        ::std::mem::size_of::<WindowFunc>(),
        56usize,
        concat!("Size of: ", stringify!(WindowFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowFunc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).winfnoid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(winfnoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).wintype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(wintype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).wincollid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(wincollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).inputcollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).aggfilter as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(aggfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).winref as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(winref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).winstar as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(winstar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).winagg as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(winagg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayRef {
    pub xpr: Expr,
    pub refarraytype: Oid,
    pub refelemtype: Oid,
    pub reftypmod: int32,
    pub refcollid: Oid,
    pub refupperindexpr: *mut List,
    pub reflowerindexpr: *mut List,
    pub refexpr: *mut Expr,
    pub refassgnexpr: *mut Expr,
}
#[test]
fn bindgen_test_layout_ArrayRef() {
    assert_eq!(
        ::std::mem::size_of::<ArrayRef>(),
        56usize,
        concat!("Size of: ", stringify!(ArrayRef))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayRef>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refarraytype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refarraytype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refelemtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refelemtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).reftypmod as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(reftypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refcollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refupperindexpr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refupperindexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).reflowerindexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(reflowerindexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refexpr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refassgnexpr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refassgnexpr)
        )
    );
}
pub const CoercionContext_COERCION_IMPLICIT: CoercionContext = 0;
pub const CoercionContext_COERCION_ASSIGNMENT: CoercionContext = 1;
pub const CoercionContext_COERCION_EXPLICIT: CoercionContext = 2;
pub type CoercionContext = u32;
pub const CoercionForm_COERCE_EXPLICIT_CALL: CoercionForm = 0;
pub const CoercionForm_COERCE_EXPLICIT_CAST: CoercionForm = 1;
pub const CoercionForm_COERCE_IMPLICIT_CAST: CoercionForm = 2;
pub type CoercionForm = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FuncExpr {
    pub xpr: Expr,
    pub funcid: Oid,
    pub funcresulttype: Oid,
    pub funcretset: bool,
    pub funcvariadic: bool,
    pub funcformat: CoercionForm,
    pub funccollid: Oid,
    pub inputcollid: Oid,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FuncExpr() {
    assert_eq!(
        ::std::mem::size_of::<FuncExpr>(),
        48usize,
        concat!("Size of: ", stringify!(FuncExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<FuncExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(FuncExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcresulttype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcresulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcretset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcretset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcvariadic as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcvariadic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcformat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funccollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funccollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).inputcollid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NamedArgExpr {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub name: *mut ::std::os::raw::c_char,
    pub argnumber: ::std::os::raw::c_int,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NamedArgExpr() {
    assert_eq!(
        ::std::mem::size_of::<NamedArgExpr>(),
        32usize,
        concat!("Size of: ", stringify!(NamedArgExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedArgExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedArgExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).argnumber as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(argnumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).location as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OpExpr {
    pub xpr: Expr,
    pub opno: Oid,
    pub opfuncid: Oid,
    pub opresulttype: Oid,
    pub opretset: bool,
    pub opcollid: Oid,
    pub inputcollid: Oid,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OpExpr() {
    assert_eq!(
        ::std::mem::size_of::<OpExpr>(),
        48usize,
        concat!("Size of: ", stringify!(OpExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<OpExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(OpExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opfuncid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opfuncid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opresulttype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opresulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opretset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opretset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opcollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).inputcollid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(location)
        )
    );
}
pub type DistinctExpr = OpExpr;
pub type NullIfExpr = OpExpr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ScalarArrayOpExpr {
    pub xpr: Expr,
    pub opno: Oid,
    pub opfuncid: Oid,
    pub useOr: bool,
    pub inputcollid: Oid,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ScalarArrayOpExpr() {
    assert_eq!(
        ::std::mem::size_of::<ScalarArrayOpExpr>(),
        40usize,
        concat!("Size of: ", stringify!(ScalarArrayOpExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<ScalarArrayOpExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(ScalarArrayOpExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).opno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(opno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).opfuncid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(opfuncid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).useOr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(useOr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).inputcollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const BoolExprType_AND_EXPR: BoolExprType = 0;
pub const BoolExprType_OR_EXPR: BoolExprType = 1;
pub const BoolExprType_NOT_EXPR: BoolExprType = 2;
pub type BoolExprType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BoolExpr {
    pub xpr: Expr,
    pub boolop: BoolExprType,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BoolExpr() {
    assert_eq!(
        ::std::mem::size_of::<BoolExpr>(),
        24usize,
        concat!("Size of: ", stringify!(BoolExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<BoolExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(BoolExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoolExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BoolExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoolExpr>())).boolop as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BoolExpr),
            "::",
            stringify!(boolop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoolExpr>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BoolExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoolExpr>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BoolExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const SubLinkType_EXISTS_SUBLINK: SubLinkType = 0;
pub const SubLinkType_ALL_SUBLINK: SubLinkType = 1;
pub const SubLinkType_ANY_SUBLINK: SubLinkType = 2;
pub const SubLinkType_ROWCOMPARE_SUBLINK: SubLinkType = 3;
pub const SubLinkType_EXPR_SUBLINK: SubLinkType = 4;
pub const SubLinkType_MULTIEXPR_SUBLINK: SubLinkType = 5;
pub const SubLinkType_ARRAY_SUBLINK: SubLinkType = 6;
pub const SubLinkType_CTE_SUBLINK: SubLinkType = 7;
pub type SubLinkType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SubLink {
    pub xpr: Expr,
    pub subLinkType: SubLinkType,
    pub subLinkId: ::std::os::raw::c_int,
    pub testexpr: *mut Node,
    pub operName: *mut List,
    pub subselect: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SubLink() {
    assert_eq!(
        ::std::mem::size_of::<SubLink>(),
        48usize,
        concat!("Size of: ", stringify!(SubLink))
    );
    assert_eq!(
        ::std::mem::align_of::<SubLink>(),
        8usize,
        concat!("Alignment of ", stringify!(SubLink))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).subLinkType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(subLinkType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).subLinkId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(subLinkId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).testexpr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(testexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).operName as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(operName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).subselect as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(subselect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SubPlan {
    pub xpr: Expr,
    pub subLinkType: SubLinkType,
    pub testexpr: *mut Node,
    pub paramIds: *mut List,
    pub plan_id: ::std::os::raw::c_int,
    pub plan_name: *mut ::std::os::raw::c_char,
    pub firstColType: Oid,
    pub firstColTypmod: int32,
    pub firstColCollation: Oid,
    pub useHashTable: bool,
    pub unknownEqFalse: bool,
    pub parallel_safe: bool,
    pub setParam: *mut List,
    pub parParam: *mut List,
    pub args: *mut List,
    pub startup_cost: Cost,
    pub per_call_cost: Cost,
}
#[test]
fn bindgen_test_layout_SubPlan() {
    assert_eq!(
        ::std::mem::size_of::<SubPlan>(),
        96usize,
        concat!("Size of: ", stringify!(SubPlan))
    );
    assert_eq!(
        ::std::mem::align_of::<SubPlan>(),
        8usize,
        concat!("Alignment of ", stringify!(SubPlan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).subLinkType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(subLinkType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).testexpr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(testexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).paramIds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(paramIds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).plan_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(plan_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).plan_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(plan_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).firstColType as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(firstColType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).firstColTypmod as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(firstColTypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).firstColCollation as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(firstColCollation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).useHashTable as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(useHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).unknownEqFalse as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(unknownEqFalse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).parallel_safe as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(parallel_safe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).setParam as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(setParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).parParam as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(parParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).args as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).startup_cost as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(startup_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).per_call_cost as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(per_call_cost)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlternativeSubPlan {
    pub xpr: Expr,
    pub subplans: *mut List,
}
#[test]
fn bindgen_test_layout_AlternativeSubPlan() {
    assert_eq!(
        ::std::mem::size_of::<AlternativeSubPlan>(),
        16usize,
        concat!("Size of: ", stringify!(AlternativeSubPlan))
    );
    assert_eq!(
        ::std::mem::align_of::<AlternativeSubPlan>(),
        8usize,
        concat!("Alignment of ", stringify!(AlternativeSubPlan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlan>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlan),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlan>())).subplans as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlan),
            "::",
            stringify!(subplans)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FieldSelect {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub fieldnum: AttrNumber,
    pub resulttype: Oid,
    pub resulttypmod: int32,
    pub resultcollid: Oid,
}
#[test]
fn bindgen_test_layout_FieldSelect() {
    assert_eq!(
        ::std::mem::size_of::<FieldSelect>(),
        32usize,
        concat!("Size of: ", stringify!(FieldSelect))
    );
    assert_eq!(
        ::std::mem::align_of::<FieldSelect>(),
        8usize,
        concat!("Alignment of ", stringify!(FieldSelect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).fieldnum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(fieldnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).resulttype as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).resulttypmod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(resulttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).resultcollid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(resultcollid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FieldStore {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub newvals: *mut List,
    pub fieldnums: *mut List,
    pub resulttype: Oid,
}
#[test]
fn bindgen_test_layout_FieldStore() {
    assert_eq!(
        ::std::mem::size_of::<FieldStore>(),
        40usize,
        concat!("Size of: ", stringify!(FieldStore))
    );
    assert_eq!(
        ::std::mem::align_of::<FieldStore>(),
        8usize,
        concat!("Alignment of ", stringify!(FieldStore))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).newvals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(newvals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).fieldnums as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(fieldnums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).resulttype as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(resulttype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RelabelType {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub resulttype: Oid,
    pub resulttypmod: int32,
    pub resultcollid: Oid,
    pub relabelformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RelabelType() {
    assert_eq!(
        ::std::mem::size_of::<RelabelType>(),
        40usize,
        concat!("Size of: ", stringify!(RelabelType))
    );
    assert_eq!(
        ::std::mem::align_of::<RelabelType>(),
        8usize,
        concat!("Alignment of ", stringify!(RelabelType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).resulttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).resulttypmod as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(resulttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).resultcollid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(resultcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).relabelformat as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(relabelformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CoerceViaIO {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub resulttype: Oid,
    pub resultcollid: Oid,
    pub coerceformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoerceViaIO() {
    assert_eq!(
        ::std::mem::size_of::<CoerceViaIO>(),
        32usize,
        concat!("Size of: ", stringify!(CoerceViaIO))
    );
    assert_eq!(
        ::std::mem::align_of::<CoerceViaIO>(),
        8usize,
        concat!("Alignment of ", stringify!(CoerceViaIO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).resulttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).resultcollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(resultcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).coerceformat as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(coerceformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).location as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayCoerceExpr {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub elemexpr: *mut Expr,
    pub resulttype: Oid,
    pub resulttypmod: int32,
    pub resultcollid: Oid,
    pub coerceformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ArrayCoerceExpr() {
    assert_eq!(
        ::std::mem::size_of::<ArrayCoerceExpr>(),
        48usize,
        concat!("Size of: ", stringify!(ArrayCoerceExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayCoerceExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayCoerceExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).elemexpr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(elemexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).resulttype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).resulttypmod as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(resulttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).resultcollid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(resultcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).coerceformat as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(coerceformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ConvertRowtypeExpr {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub resulttype: Oid,
    pub convertformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ConvertRowtypeExpr() {
    assert_eq!(
        ::std::mem::size_of::<ConvertRowtypeExpr>(),
        32usize,
        concat!("Size of: ", stringify!(ConvertRowtypeExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<ConvertRowtypeExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(ConvertRowtypeExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConvertRowtypeExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConvertRowtypeExpr>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConvertRowtypeExpr>())).resulttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ConvertRowtypeExpr>())).convertformat as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(convertformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConvertRowtypeExpr>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CollateExpr {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub collOid: Oid,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CollateExpr() {
    assert_eq!(
        ::std::mem::size_of::<CollateExpr>(),
        24usize,
        concat!("Size of: ", stringify!(CollateExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CollateExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CollateExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateExpr>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateExpr>())).collOid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateExpr),
            "::",
            stringify!(collOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateExpr>())).location as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CaseExpr {
    pub xpr: Expr,
    pub casetype: Oid,
    pub casecollid: Oid,
    pub arg: *mut Expr,
    pub args: *mut List,
    pub defresult: *mut Expr,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CaseExpr() {
    assert_eq!(
        ::std::mem::size_of::<CaseExpr>(),
        48usize,
        concat!("Size of: ", stringify!(CaseExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CaseExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CaseExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).casetype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(casetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).casecollid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(casecollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).arg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).defresult as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(defresult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CaseWhen {
    pub xpr: Expr,
    pub expr: *mut Expr,
    pub result: *mut Expr,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CaseWhen() {
    assert_eq!(
        ::std::mem::size_of::<CaseWhen>(),
        32usize,
        concat!("Size of: ", stringify!(CaseWhen))
    );
    assert_eq!(
        ::std::mem::align_of::<CaseWhen>(),
        8usize,
        concat!("Alignment of ", stringify!(CaseWhen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseWhen>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseWhen),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseWhen>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseWhen),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseWhen>())).result as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseWhen),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseWhen>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseWhen),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CaseTestExpr {
    pub xpr: Expr,
    pub typeId: Oid,
    pub typeMod: int32,
    pub collation: Oid,
}
#[test]
fn bindgen_test_layout_CaseTestExpr() {
    assert_eq!(
        ::std::mem::size_of::<CaseTestExpr>(),
        16usize,
        concat!("Size of: ", stringify!(CaseTestExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CaseTestExpr>(),
        4usize,
        concat!("Alignment of ", stringify!(CaseTestExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseTestExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseTestExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseTestExpr>())).typeId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseTestExpr),
            "::",
            stringify!(typeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseTestExpr>())).typeMod as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseTestExpr),
            "::",
            stringify!(typeMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseTestExpr>())).collation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseTestExpr),
            "::",
            stringify!(collation)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayExpr {
    pub xpr: Expr,
    pub array_typeid: Oid,
    pub array_collid: Oid,
    pub element_typeid: Oid,
    pub elements: *mut List,
    pub multidims: bool,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ArrayExpr() {
    assert_eq!(
        ::std::mem::size_of::<ArrayExpr>(),
        32usize,
        concat!("Size of: ", stringify!(ArrayExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).array_typeid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(array_typeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).array_collid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(array_collid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).element_typeid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(element_typeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).elements as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).multidims as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(multidims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).location as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RowExpr {
    pub xpr: Expr,
    pub args: *mut List,
    pub row_typeid: Oid,
    pub row_format: CoercionForm,
    pub colnames: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RowExpr() {
    assert_eq!(
        ::std::mem::size_of::<RowExpr>(),
        40usize,
        concat!("Size of: ", stringify!(RowExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<RowExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(RowExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).row_typeid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(row_typeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).row_format as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(row_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).colnames as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(colnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const RowCompareType_ROWCOMPARE_LT: RowCompareType = 1;
pub const RowCompareType_ROWCOMPARE_LE: RowCompareType = 2;
pub const RowCompareType_ROWCOMPARE_EQ: RowCompareType = 3;
pub const RowCompareType_ROWCOMPARE_GE: RowCompareType = 4;
pub const RowCompareType_ROWCOMPARE_GT: RowCompareType = 5;
pub const RowCompareType_ROWCOMPARE_NE: RowCompareType = 6;
pub type RowCompareType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RowCompareExpr {
    pub xpr: Expr,
    pub rctype: RowCompareType,
    pub opnos: *mut List,
    pub opfamilies: *mut List,
    pub inputcollids: *mut List,
    pub largs: *mut List,
    pub rargs: *mut List,
}
#[test]
fn bindgen_test_layout_RowCompareExpr() {
    assert_eq!(
        ::std::mem::size_of::<RowCompareExpr>(),
        48usize,
        concat!("Size of: ", stringify!(RowCompareExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<RowCompareExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(RowCompareExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).rctype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(rctype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).opnos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(opnos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).opfamilies as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(opfamilies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).inputcollids as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(inputcollids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).largs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(largs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).rargs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(rargs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CoalesceExpr {
    pub xpr: Expr,
    pub coalescetype: Oid,
    pub coalescecollid: Oid,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoalesceExpr() {
    assert_eq!(
        ::std::mem::size_of::<CoalesceExpr>(),
        32usize,
        concat!("Size of: ", stringify!(CoalesceExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CoalesceExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CoalesceExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).coalescetype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(coalescetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).coalescecollid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(coalescecollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const MinMaxOp_IS_GREATEST: MinMaxOp = 0;
pub const MinMaxOp_IS_LEAST: MinMaxOp = 1;
pub type MinMaxOp = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MinMaxExpr {
    pub xpr: Expr,
    pub minmaxtype: Oid,
    pub minmaxcollid: Oid,
    pub inputcollid: Oid,
    pub op: MinMaxOp,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MinMaxExpr() {
    assert_eq!(
        ::std::mem::size_of::<MinMaxExpr>(),
        40usize,
        concat!("Size of: ", stringify!(MinMaxExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<MinMaxExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(MinMaxExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).minmaxtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(minmaxtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).minmaxcollid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(minmaxcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).inputcollid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).op as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const SQLValueFunctionOp_SVFOP_CURRENT_DATE: SQLValueFunctionOp = 0;
pub const SQLValueFunctionOp_SVFOP_CURRENT_TIME: SQLValueFunctionOp = 1;
pub const SQLValueFunctionOp_SVFOP_CURRENT_TIME_N: SQLValueFunctionOp = 2;
pub const SQLValueFunctionOp_SVFOP_CURRENT_TIMESTAMP: SQLValueFunctionOp = 3;
pub const SQLValueFunctionOp_SVFOP_CURRENT_TIMESTAMP_N: SQLValueFunctionOp = 4;
pub const SQLValueFunctionOp_SVFOP_LOCALTIME: SQLValueFunctionOp = 5;
pub const SQLValueFunctionOp_SVFOP_LOCALTIME_N: SQLValueFunctionOp = 6;
pub const SQLValueFunctionOp_SVFOP_LOCALTIMESTAMP: SQLValueFunctionOp = 7;
pub const SQLValueFunctionOp_SVFOP_LOCALTIMESTAMP_N: SQLValueFunctionOp = 8;
pub const SQLValueFunctionOp_SVFOP_CURRENT_ROLE: SQLValueFunctionOp = 9;
pub const SQLValueFunctionOp_SVFOP_CURRENT_USER: SQLValueFunctionOp = 10;
pub const SQLValueFunctionOp_SVFOP_USER: SQLValueFunctionOp = 11;
pub const SQLValueFunctionOp_SVFOP_SESSION_USER: SQLValueFunctionOp = 12;
pub const SQLValueFunctionOp_SVFOP_CURRENT_CATALOG: SQLValueFunctionOp = 13;
pub const SQLValueFunctionOp_SVFOP_CURRENT_SCHEMA: SQLValueFunctionOp = 14;
pub type SQLValueFunctionOp = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SQLValueFunction {
    pub xpr: Expr,
    pub op: SQLValueFunctionOp,
    pub type_: Oid,
    pub typmod: int32,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SQLValueFunction() {
    assert_eq!(
        ::std::mem::size_of::<SQLValueFunction>(),
        20usize,
        concat!("Size of: ", stringify!(SQLValueFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<SQLValueFunction>(),
        4usize,
        concat!("Alignment of ", stringify!(SQLValueFunction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).typmod as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(typmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(location)
        )
    );
}
pub const XmlExprOp_IS_XMLCONCAT: XmlExprOp = 0;
pub const XmlExprOp_IS_XMLELEMENT: XmlExprOp = 1;
pub const XmlExprOp_IS_XMLFOREST: XmlExprOp = 2;
pub const XmlExprOp_IS_XMLPARSE: XmlExprOp = 3;
pub const XmlExprOp_IS_XMLPI: XmlExprOp = 4;
pub const XmlExprOp_IS_XMLROOT: XmlExprOp = 5;
pub const XmlExprOp_IS_XMLSERIALIZE: XmlExprOp = 6;
pub const XmlExprOp_IS_DOCUMENT: XmlExprOp = 7;
pub type XmlExprOp = u32;
pub const XmlOptionType_XMLOPTION_DOCUMENT: XmlOptionType = 0;
pub const XmlOptionType_XMLOPTION_CONTENT: XmlOptionType = 1;
pub type XmlOptionType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XmlExpr {
    pub xpr: Expr,
    pub op: XmlExprOp,
    pub name: *mut ::std::os::raw::c_char,
    pub named_args: *mut List,
    pub arg_names: *mut List,
    pub args: *mut List,
    pub xmloption: XmlOptionType,
    pub type_: Oid,
    pub typmod: int32,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_XmlExpr() {
    assert_eq!(
        ::std::mem::size_of::<XmlExpr>(),
        56usize,
        concat!("Size of: ", stringify!(XmlExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<XmlExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(XmlExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).named_args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(named_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).arg_names as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(arg_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).xmloption as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(xmloption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).type_ as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).typmod as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(typmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).location as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const NullTestType_IS_NULL: NullTestType = 0;
pub const NullTestType_IS_NOT_NULL: NullTestType = 1;
pub type NullTestType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NullTest {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub nulltesttype: NullTestType,
    pub argisrow: bool,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NullTest() {
    assert_eq!(
        ::std::mem::size_of::<NullTest>(),
        32usize,
        concat!("Size of: ", stringify!(NullTest))
    );
    assert_eq!(
        ::std::mem::align_of::<NullTest>(),
        8usize,
        concat!("Alignment of ", stringify!(NullTest))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).nulltesttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(nulltesttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).argisrow as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(argisrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(location)
        )
    );
}
pub const BoolTestType_IS_TRUE: BoolTestType = 0;
pub const BoolTestType_IS_NOT_TRUE: BoolTestType = 1;
pub const BoolTestType_IS_FALSE: BoolTestType = 2;
pub const BoolTestType_IS_NOT_FALSE: BoolTestType = 3;
pub const BoolTestType_IS_UNKNOWN: BoolTestType = 4;
pub const BoolTestType_IS_NOT_UNKNOWN: BoolTestType = 5;
pub type BoolTestType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BooleanTest {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub booltesttype: BoolTestType,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BooleanTest() {
    assert_eq!(
        ::std::mem::size_of::<BooleanTest>(),
        24usize,
        concat!("Size of: ", stringify!(BooleanTest))
    );
    assert_eq!(
        ::std::mem::align_of::<BooleanTest>(),
        8usize,
        concat!("Alignment of ", stringify!(BooleanTest))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BooleanTest>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BooleanTest),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BooleanTest>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BooleanTest),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BooleanTest>())).booltesttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BooleanTest),
            "::",
            stringify!(booltesttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BooleanTest>())).location as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(BooleanTest),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CoerceToDomain {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub resulttype: Oid,
    pub resulttypmod: int32,
    pub resultcollid: Oid,
    pub coercionformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoerceToDomain() {
    assert_eq!(
        ::std::mem::size_of::<CoerceToDomain>(),
        40usize,
        concat!("Size of: ", stringify!(CoerceToDomain))
    );
    assert_eq!(
        ::std::mem::align_of::<CoerceToDomain>(),
        8usize,
        concat!("Alignment of ", stringify!(CoerceToDomain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).resulttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).resulttypmod as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(resulttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).resultcollid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(resultcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).coercionformat as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(coercionformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CoerceToDomainValue {
    pub xpr: Expr,
    pub typeId: Oid,
    pub typeMod: int32,
    pub collation: Oid,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoerceToDomainValue() {
    assert_eq!(
        ::std::mem::size_of::<CoerceToDomainValue>(),
        20usize,
        concat!("Size of: ", stringify!(CoerceToDomainValue))
    );
    assert_eq!(
        ::std::mem::align_of::<CoerceToDomainValue>(),
        4usize,
        concat!("Alignment of ", stringify!(CoerceToDomainValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).typeId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(typeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).typeMod as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(typeMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).collation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SetToDefault {
    pub xpr: Expr,
    pub typeId: Oid,
    pub typeMod: int32,
    pub collation: Oid,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SetToDefault() {
    assert_eq!(
        ::std::mem::size_of::<SetToDefault>(),
        20usize,
        concat!("Size of: ", stringify!(SetToDefault))
    );
    assert_eq!(
        ::std::mem::align_of::<SetToDefault>(),
        4usize,
        concat!("Alignment of ", stringify!(SetToDefault))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).typeId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(typeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).typeMod as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(typeMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).collation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CurrentOfExpr {
    pub xpr: Expr,
    pub cvarno: Index,
    pub cursor_name: *mut ::std::os::raw::c_char,
    pub cursor_param: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CurrentOfExpr() {
    assert_eq!(
        ::std::mem::size_of::<CurrentOfExpr>(),
        24usize,
        concat!("Size of: ", stringify!(CurrentOfExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CurrentOfExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CurrentOfExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CurrentOfExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CurrentOfExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CurrentOfExpr>())).cvarno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CurrentOfExpr),
            "::",
            stringify!(cvarno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CurrentOfExpr>())).cursor_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CurrentOfExpr),
            "::",
            stringify!(cursor_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CurrentOfExpr>())).cursor_param as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CurrentOfExpr),
            "::",
            stringify!(cursor_param)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NextValueExpr {
    pub xpr: Expr,
    pub seqid: Oid,
    pub typeId: Oid,
}
#[test]
fn bindgen_test_layout_NextValueExpr() {
    assert_eq!(
        ::std::mem::size_of::<NextValueExpr>(),
        12usize,
        concat!("Size of: ", stringify!(NextValueExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<NextValueExpr>(),
        4usize,
        concat!("Alignment of ", stringify!(NextValueExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NextValueExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NextValueExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NextValueExpr>())).seqid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NextValueExpr),
            "::",
            stringify!(seqid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NextValueExpr>())).typeId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NextValueExpr),
            "::",
            stringify!(typeId)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct InferenceElem {
    pub xpr: Expr,
    pub expr: *mut Node,
    pub infercollid: Oid,
    pub inferopclass: Oid,
}
#[test]
fn bindgen_test_layout_InferenceElem() {
    assert_eq!(
        ::std::mem::size_of::<InferenceElem>(),
        24usize,
        concat!("Size of: ", stringify!(InferenceElem))
    );
    assert_eq!(
        ::std::mem::align_of::<InferenceElem>(),
        8usize,
        concat!("Alignment of ", stringify!(InferenceElem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferenceElem>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InferenceElem),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferenceElem>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InferenceElem),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferenceElem>())).infercollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InferenceElem),
            "::",
            stringify!(infercollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferenceElem>())).inferopclass as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(InferenceElem),
            "::",
            stringify!(inferopclass)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TargetEntry {
    pub xpr: Expr,
    pub expr: *mut Expr,
    pub resno: AttrNumber,
    pub resname: *mut ::std::os::raw::c_char,
    pub ressortgroupref: Index,
    pub resorigtbl: Oid,
    pub resorigcol: AttrNumber,
    pub resjunk: bool,
}
#[test]
fn bindgen_test_layout_TargetEntry() {
    assert_eq!(
        ::std::mem::size_of::<TargetEntry>(),
        48usize,
        concat!("Size of: ", stringify!(TargetEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<TargetEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(TargetEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).ressortgroupref as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(ressortgroupref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resorigtbl as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resorigtbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resorigcol as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resorigcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resjunk as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resjunk)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeTblRef {
    pub type_: NodeTag,
    pub rtindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeTblRef() {
    assert_eq!(
        ::std::mem::size_of::<RangeTblRef>(),
        8usize,
        concat!("Size of: ", stringify!(RangeTblRef))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTblRef>(),
        4usize,
        concat!("Alignment of ", stringify!(RangeTblRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblRef>())).rtindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblRef),
            "::",
            stringify!(rtindex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JoinExpr {
    pub type_: NodeTag,
    pub jointype: JoinType,
    pub isNatural: bool,
    pub larg: *mut Node,
    pub rarg: *mut Node,
    pub usingClause: *mut List,
    pub quals: *mut Node,
    pub alias: *mut Alias,
    pub rtindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_JoinExpr() {
    assert_eq!(
        ::std::mem::size_of::<JoinExpr>(),
        64usize,
        concat!("Size of: ", stringify!(JoinExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<JoinExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(JoinExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).jointype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).isNatural as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(isNatural)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).larg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(larg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).rarg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(rarg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).usingClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(usingClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).quals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(quals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).alias as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).rtindex as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(rtindex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FromExpr {
    pub type_: NodeTag,
    pub fromlist: *mut List,
    pub quals: *mut Node,
}
#[test]
fn bindgen_test_layout_FromExpr() {
    assert_eq!(
        ::std::mem::size_of::<FromExpr>(),
        24usize,
        concat!("Size of: ", stringify!(FromExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<FromExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(FromExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FromExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FromExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FromExpr>())).fromlist as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FromExpr),
            "::",
            stringify!(fromlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FromExpr>())).quals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FromExpr),
            "::",
            stringify!(quals)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OnConflictExpr {
    pub type_: NodeTag,
    pub action: OnConflictAction,
    pub arbiterElems: *mut List,
    pub arbiterWhere: *mut Node,
    pub constraint: Oid,
    pub onConflictSet: *mut List,
    pub onConflictWhere: *mut Node,
    pub exclRelIndex: ::std::os::raw::c_int,
    pub exclRelTlist: *mut List,
}
#[test]
fn bindgen_test_layout_OnConflictExpr() {
    assert_eq!(
        ::std::mem::size_of::<OnConflictExpr>(),
        64usize,
        concat!("Size of: ", stringify!(OnConflictExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<OnConflictExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(OnConflictExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).action as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).arbiterElems as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(arbiterElems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).arbiterWhere as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(arbiterWhere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).constraint as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(constraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).onConflictSet as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(onConflictSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).onConflictWhere as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(onConflictWhere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).exclRelIndex as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(exclRelIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).exclRelTlist as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(exclRelTlist)
        )
    );
}
pub type Item = Pointer;
pub type Page = Pointer;
pub type LocationIndex = uint16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PageXLogRecPtr {
    pub xlogid: uint32,
    pub xrecoff: uint32,
}
#[test]
fn bindgen_test_layout_PageXLogRecPtr() {
    assert_eq!(
        ::std::mem::size_of::<PageXLogRecPtr>(),
        8usize,
        concat!("Size of: ", stringify!(PageXLogRecPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<PageXLogRecPtr>(),
        4usize,
        concat!("Alignment of ", stringify!(PageXLogRecPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PageXLogRecPtr>())).xlogid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PageXLogRecPtr),
            "::",
            stringify!(xlogid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PageXLogRecPtr>())).xrecoff as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PageXLogRecPtr),
            "::",
            stringify!(xrecoff)
        )
    );
}
#[repr(C)]
pub struct PageHeaderData {
    pub pd_lsn: PageXLogRecPtr,
    pub pd_checksum: uint16,
    pub pd_flags: uint16,
    pub pd_lower: LocationIndex,
    pub pd_upper: LocationIndex,
    pub pd_special: LocationIndex,
    pub pd_pagesize_version: uint16,
    pub pd_prune_xid: TransactionId,
    pub pd_linp: __IncompleteArrayField<ItemIdData>,
}
#[test]
fn bindgen_test_layout_PageHeaderData() {
    assert_eq!(
        ::std::mem::size_of::<PageHeaderData>(),
        24usize,
        concat!("Size of: ", stringify!(PageHeaderData))
    );
    assert_eq!(
        ::std::mem::align_of::<PageHeaderData>(),
        4usize,
        concat!("Alignment of ", stringify!(PageHeaderData))
    );
}
pub type PageHeader = *mut PageHeaderData;
extern "C" {
    pub fn PageInit(page: Page, pageSize: Size, specialSize: Size);
}
extern "C" {
    pub fn PageIsVerified(page: Page, blkno: BlockNumber) -> bool;
}
extern "C" {
    pub fn PageAddItemExtended(
        page: Page,
        item: Item,
        size: Size,
        offsetNumber: OffsetNumber,
        flags: ::std::os::raw::c_int,
    ) -> OffsetNumber;
}
extern "C" {
    pub fn PageGetTempPage(page: Page) -> Page;
}
extern "C" {
    pub fn PageGetTempPageCopy(page: Page) -> Page;
}
extern "C" {
    pub fn PageGetTempPageCopySpecial(page: Page) -> Page;
}
extern "C" {
    pub fn PageRestoreTempPage(tempPage: Page, oldPage: Page);
}
extern "C" {
    pub fn PageRepairFragmentation(page: Page);
}
extern "C" {
    pub fn PageGetFreeSpace(page: Page) -> Size;
}
extern "C" {
    pub fn PageGetFreeSpaceForMultipleTuples(page: Page, ntups: ::std::os::raw::c_int) -> Size;
}
extern "C" {
    pub fn PageGetExactFreeSpace(page: Page) -> Size;
}
extern "C" {
    pub fn PageGetHeapFreeSpace(page: Page) -> Size;
}
extern "C" {
    pub fn PageIndexTupleDelete(page: Page, offset: OffsetNumber);
}
extern "C" {
    pub fn PageIndexMultiDelete(
        page: Page,
        itemnos: *mut OffsetNumber,
        nitems: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn PageIndexTupleDeleteNoCompact(page: Page, offset: OffsetNumber);
}
extern "C" {
    pub fn PageIndexTupleOverwrite(
        page: Page,
        offnum: OffsetNumber,
        newtup: Item,
        newsize: Size,
    ) -> bool;
}
extern "C" {
    pub fn PageSetChecksumCopy(page: Page, blkno: BlockNumber) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PageSetChecksumInplace(page: Page, blkno: BlockNumber);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BulkInsertStateData {
    _unused: [u8; 0],
}
pub type BulkInsertState = *mut BulkInsertStateData;
pub const LockTupleMode_LockTupleKeyShare: LockTupleMode = 0;
pub const LockTupleMode_LockTupleShare: LockTupleMode = 1;
pub const LockTupleMode_LockTupleNoKeyExclusive: LockTupleMode = 2;
pub const LockTupleMode_LockTupleExclusive: LockTupleMode = 3;
pub type LockTupleMode = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HeapUpdateFailureData {
    pub ctid: ItemPointerData,
    pub xmax: TransactionId,
    pub cmax: CommandId,
}
#[test]
fn bindgen_test_layout_HeapUpdateFailureData() {
    assert_eq!(
        ::std::mem::size_of::<HeapUpdateFailureData>(),
        16usize,
        concat!("Size of: ", stringify!(HeapUpdateFailureData))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapUpdateFailureData>(),
        4usize,
        concat!("Alignment of ", stringify!(HeapUpdateFailureData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapUpdateFailureData>())).ctid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapUpdateFailureData),
            "::",
            stringify!(ctid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapUpdateFailureData>())).xmax as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapUpdateFailureData),
            "::",
            stringify!(xmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapUpdateFailureData>())).cmax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapUpdateFailureData),
            "::",
            stringify!(cmax)
        )
    );
}
extern "C" {
    pub fn relation_open(relationId: Oid, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn try_relation_open(relationId: Oid, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn relation_openrv(relation: *const RangeVar, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn relation_openrv_extended(
        relation: *const RangeVar,
        lockmode: LOCKMODE,
        missing_ok: bool,
    ) -> Relation;
}
extern "C" {
    pub fn relation_close(relation: Relation, lockmode: LOCKMODE);
}
extern "C" {
    pub fn heap_open(relationId: Oid, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn heap_openrv(relation: *const RangeVar, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn heap_openrv_extended(
        relation: *const RangeVar,
        lockmode: LOCKMODE,
        missing_ok: bool,
    ) -> Relation;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HeapScanDescData {
    _unused: [u8; 0],
}
pub type HeapScanDesc = *mut HeapScanDescData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParallelHeapScanDescData {
    _unused: [u8; 0],
}
pub type ParallelHeapScanDesc = *mut ParallelHeapScanDescData;
extern "C" {
    pub fn heap_beginscan(
        relation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_beginscan_catalog(
        relation: Relation,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_beginscan_strat(
        relation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
        allow_strat: bool,
        allow_sync: bool,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_beginscan_bm(
        relation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_beginscan_sampling(
        relation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
        allow_strat: bool,
        allow_sync: bool,
        allow_pagemode: bool,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_setscanlimits(scan: HeapScanDesc, startBlk: BlockNumber, endBlk: BlockNumber);
}
extern "C" {
    pub fn heapgetpage(scan: HeapScanDesc, page: BlockNumber);
}
extern "C" {
    pub fn heap_rescan(scan: HeapScanDesc, key: ScanKey);
}
extern "C" {
    pub fn heap_rescan_set_params(
        scan: HeapScanDesc,
        key: ScanKey,
        allow_strat: bool,
        allow_sync: bool,
        allow_pagemode: bool,
    );
}
extern "C" {
    pub fn heap_endscan(scan: HeapScanDesc);
}
extern "C" {
    pub fn heap_getnext(scan: HeapScanDesc, direction: ScanDirection) -> HeapTuple;
}
extern "C" {
    pub fn heap_parallelscan_estimate(snapshot: Snapshot) -> Size;
}
extern "C" {
    pub fn heap_parallelscan_initialize(
        target: ParallelHeapScanDesc,
        relation: Relation,
        snapshot: Snapshot,
    );
}
extern "C" {
    pub fn heap_parallelscan_reinitialize(parallel_scan: ParallelHeapScanDesc);
}
extern "C" {
    pub fn heap_beginscan_parallel(arg1: Relation, arg2: ParallelHeapScanDesc) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_fetch(
        relation: Relation,
        snapshot: Snapshot,
        tuple: HeapTuple,
        userbuf: *mut Buffer,
        keep_buf: bool,
        stats_relation: Relation,
    ) -> bool;
}
extern "C" {
    pub fn heap_hot_search_buffer(
        tid: ItemPointer,
        relation: Relation,
        buffer: Buffer,
        snapshot: Snapshot,
        heapTuple: HeapTuple,
        all_dead: *mut bool,
        first_call: bool,
    ) -> bool;
}
extern "C" {
    pub fn heap_hot_search(
        tid: ItemPointer,
        relation: Relation,
        snapshot: Snapshot,
        all_dead: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn heap_get_latest_tid(relation: Relation, snapshot: Snapshot, tid: ItemPointer);
}
extern "C" {
    pub fn setLastTid(tid: ItemPointer);
}
extern "C" {
    pub fn GetBulkInsertState() -> BulkInsertState;
}
extern "C" {
    pub fn FreeBulkInsertState(arg1: BulkInsertState);
}
extern "C" {
    pub fn ReleaseBulkInsertStatePin(bistate: BulkInsertState);
}
extern "C" {
    pub fn heap_insert(
        relation: Relation,
        tup: HeapTuple,
        cid: CommandId,
        options: ::std::os::raw::c_int,
        bistate: BulkInsertState,
    ) -> Oid;
}
extern "C" {
    pub fn heap_multi_insert(
        relation: Relation,
        tuples: *mut HeapTuple,
        ntuples: ::std::os::raw::c_int,
        cid: CommandId,
        options: ::std::os::raw::c_int,
        bistate: BulkInsertState,
    );
}
extern "C" {
    pub fn heap_delete(
        relation: Relation,
        tid: ItemPointer,
        cid: CommandId,
        crosscheck: Snapshot,
        wait: bool,
        hufd: *mut HeapUpdateFailureData,
        changingPart: bool,
    ) -> HTSU_Result;
}
extern "C" {
    pub fn heap_finish_speculative(relation: Relation, tuple: HeapTuple);
}
extern "C" {
    pub fn heap_abort_speculative(relation: Relation, tuple: HeapTuple);
}
extern "C" {
    pub fn heap_update(
        relation: Relation,
        otid: ItemPointer,
        newtup: HeapTuple,
        cid: CommandId,
        crosscheck: Snapshot,
        wait: bool,
        hufd: *mut HeapUpdateFailureData,
        lockmode: *mut LockTupleMode,
    ) -> HTSU_Result;
}
extern "C" {
    pub fn heap_lock_tuple(
        relation: Relation,
        tuple: HeapTuple,
        cid: CommandId,
        mode: LockTupleMode,
        wait_policy: LockWaitPolicy,
        follow_update: bool,
        buffer: *mut Buffer,
        hufd: *mut HeapUpdateFailureData,
    ) -> HTSU_Result;
}
extern "C" {
    pub fn heap_inplace_update(relation: Relation, tuple: HeapTuple);
}
extern "C" {
    pub fn heap_freeze_tuple(
        tuple: HeapTupleHeader,
        relfrozenxid: TransactionId,
        relminmxid: TransactionId,
        cutoff_xid: TransactionId,
        cutoff_multi: TransactionId,
    ) -> bool;
}
extern "C" {
    pub fn heap_tuple_needs_freeze(
        tuple: HeapTupleHeader,
        cutoff_xid: TransactionId,
        cutoff_multi: MultiXactId,
        buf: Buffer,
    ) -> bool;
}
extern "C" {
    pub fn heap_tuple_needs_eventual_freeze(tuple: HeapTupleHeader) -> bool;
}
extern "C" {
    pub fn simple_heap_insert(relation: Relation, tup: HeapTuple) -> Oid;
}
extern "C" {
    pub fn simple_heap_delete(relation: Relation, tid: ItemPointer);
}
extern "C" {
    pub fn simple_heap_update(relation: Relation, otid: ItemPointer, tup: HeapTuple);
}
extern "C" {
    pub fn heap_sync(relation: Relation);
}
extern "C" {
    pub fn heap_update_snapshot(scan: HeapScanDesc, snapshot: Snapshot);
}
extern "C" {
    pub fn heap_page_prune_opt(relation: Relation, buffer: Buffer);
}
extern "C" {
    pub fn heap_page_prune(
        relation: Relation,
        buffer: Buffer,
        OldestXmin: TransactionId,
        report_stats: bool,
        latestRemovedXid: *mut TransactionId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heap_page_prune_execute(
        buffer: Buffer,
        redirected: *mut OffsetNumber,
        nredirected: ::std::os::raw::c_int,
        nowdead: *mut OffsetNumber,
        ndead: ::std::os::raw::c_int,
        nowunused: *mut OffsetNumber,
        nunused: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn heap_get_root_tuples(page: Page, root_offsets: *mut OffsetNumber);
}
extern "C" {
    pub fn ss_report_location(rel: Relation, location: BlockNumber);
}
extern "C" {
    pub fn ss_get_location(rel: Relation, relnblocks: BlockNumber) -> BlockNumber;
}
extern "C" {
    pub fn SyncScanShmemInit();
}
extern "C" {
    pub fn SyncScanShmemSize() -> Size;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TupleConversionMap {
    pub indesc: TupleDesc,
    pub outdesc: TupleDesc,
    pub attrMap: *mut AttrNumber,
    pub invalues: *mut Datum,
    pub inisnull: *mut bool,
    pub outvalues: *mut Datum,
    pub outisnull: *mut bool,
}
#[test]
fn bindgen_test_layout_TupleConversionMap() {
    assert_eq!(
        ::std::mem::size_of::<TupleConversionMap>(),
        56usize,
        concat!("Size of: ", stringify!(TupleConversionMap))
    );
    assert_eq!(
        ::std::mem::align_of::<TupleConversionMap>(),
        8usize,
        concat!("Alignment of ", stringify!(TupleConversionMap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).indesc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(indesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).outdesc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(outdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).attrMap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(attrMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).invalues as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(invalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).inisnull as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(inisnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).outvalues as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(outvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).outisnull as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(outisnull)
        )
    );
}
extern "C" {
    pub fn convert_tuples_by_position(
        indesc: TupleDesc,
        outdesc: TupleDesc,
        msg: *const ::std::os::raw::c_char,
    ) -> *mut TupleConversionMap;
}
extern "C" {
    pub fn convert_tuples_by_name(
        indesc: TupleDesc,
        outdesc: TupleDesc,
        msg: *const ::std::os::raw::c_char,
    ) -> *mut TupleConversionMap;
}
extern "C" {
    pub fn convert_tuples_by_name_map(
        indesc: TupleDesc,
        outdesc: TupleDesc,
        msg: *const ::std::os::raw::c_char,
    ) -> *mut AttrNumber;
}
extern "C" {
    pub fn do_convert_tuple(tuple: HeapTuple, map: *mut TupleConversionMap) -> HeapTuple;
}
extern "C" {
    pub fn free_conversion_map(map: *mut TupleConversionMap);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: __locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "\u{1}__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type instr_time = timespec;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BufferUsage {
    pub shared_blks_hit: ::std::os::raw::c_long,
    pub shared_blks_read: ::std::os::raw::c_long,
    pub shared_blks_dirtied: ::std::os::raw::c_long,
    pub shared_blks_written: ::std::os::raw::c_long,
    pub local_blks_hit: ::std::os::raw::c_long,
    pub local_blks_read: ::std::os::raw::c_long,
    pub local_blks_dirtied: ::std::os::raw::c_long,
    pub local_blks_written: ::std::os::raw::c_long,
    pub temp_blks_read: ::std::os::raw::c_long,
    pub temp_blks_written: ::std::os::raw::c_long,
    pub blk_read_time: instr_time,
    pub blk_write_time: instr_time,
}
#[test]
fn bindgen_test_layout_BufferUsage() {
    assert_eq!(
        ::std::mem::size_of::<BufferUsage>(),
        112usize,
        concat!("Size of: ", stringify!(BufferUsage))
    );
    assert_eq!(
        ::std::mem::align_of::<BufferUsage>(),
        8usize,
        concat!("Alignment of ", stringify!(BufferUsage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).shared_blks_hit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(shared_blks_hit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).shared_blks_read as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(shared_blks_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).shared_blks_dirtied as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(shared_blks_dirtied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).shared_blks_written as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(shared_blks_written)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).local_blks_hit as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(local_blks_hit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).local_blks_read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(local_blks_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).local_blks_dirtied as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(local_blks_dirtied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).local_blks_written as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(local_blks_written)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).temp_blks_read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(temp_blks_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).temp_blks_written as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(temp_blks_written)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).blk_read_time as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(blk_read_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).blk_write_time as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(blk_write_time)
        )
    );
}
pub const InstrumentOption_INSTRUMENT_TIMER: InstrumentOption = 1;
pub const InstrumentOption_INSTRUMENT_BUFFERS: InstrumentOption = 2;
pub const InstrumentOption_INSTRUMENT_ROWS: InstrumentOption = 4;
pub const InstrumentOption_INSTRUMENT_ALL: InstrumentOption = 2147483647;
pub type InstrumentOption = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Instrumentation {
    pub need_timer: bool,
    pub need_bufusage: bool,
    pub running: bool,
    pub starttime: instr_time,
    pub counter: instr_time,
    pub firsttuple: f64,
    pub tuplecount: f64,
    pub bufusage_start: BufferUsage,
    pub startup: f64,
    pub total: f64,
    pub ntuples: f64,
    pub ntuples2: f64,
    pub nloops: f64,
    pub nfiltered1: f64,
    pub nfiltered2: f64,
    pub bufusage: BufferUsage,
}
#[test]
fn bindgen_test_layout_Instrumentation() {
    assert_eq!(
        ::std::mem::size_of::<Instrumentation>(),
        336usize,
        concat!("Size of: ", stringify!(Instrumentation))
    );
    assert_eq!(
        ::std::mem::align_of::<Instrumentation>(),
        8usize,
        concat!("Alignment of ", stringify!(Instrumentation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).need_timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(need_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).need_bufusage as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(need_bufusage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).running as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).starttime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(starttime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).counter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).firsttuple as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(firsttuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).tuplecount as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(tuplecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).bufusage_start as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(bufusage_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).startup as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(startup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).total as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).ntuples as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(ntuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).ntuples2 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(ntuples2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).nloops as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(nloops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).nfiltered1 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(nfiltered1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).nfiltered2 as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(nfiltered2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).bufusage as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(bufusage)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct WorkerInstrumentation {
    pub num_workers: ::std::os::raw::c_int,
    pub instrument: __IncompleteArrayField<Instrumentation>,
}
#[test]
fn bindgen_test_layout_WorkerInstrumentation() {
    assert_eq!(
        ::std::mem::size_of::<WorkerInstrumentation>(),
        8usize,
        concat!("Size of: ", stringify!(WorkerInstrumentation))
    );
    assert_eq!(
        ::std::mem::align_of::<WorkerInstrumentation>(),
        8usize,
        concat!("Alignment of ", stringify!(WorkerInstrumentation))
    );
}
extern "C" {
    #[link_name = "\u{1}pgBufferUsage"]
    pub static mut pgBufferUsage: BufferUsage;
}
extern "C" {
    pub fn InstrAlloc(
        n: ::std::os::raw::c_int,
        instrument_options: ::std::os::raw::c_int,
    ) -> *mut Instrumentation;
}
extern "C" {
    pub fn InstrInit(instr: *mut Instrumentation, instrument_options: ::std::os::raw::c_int);
}
extern "C" {
    pub fn InstrStartNode(instr: *mut Instrumentation);
}
extern "C" {
    pub fn InstrStopNode(instr: *mut Instrumentation, nTuples: f64);
}
extern "C" {
    pub fn InstrEndLoop(instr: *mut Instrumentation);
}
extern "C" {
    pub fn InstrAggNode(dst: *mut Instrumentation, add: *mut Instrumentation);
}
extern "C" {
    pub fn InstrStartParallelQuery();
}
extern "C" {
    pub fn InstrEndParallelQuery(result: *mut BufferUsage);
}
extern "C" {
    pub fn InstrAccumParallelQuery(result: *mut BufferUsage);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParamExternData {
    pub value: Datum,
    pub isnull: bool,
    pub pflags: uint16,
    pub ptype: Oid,
}
#[test]
fn bindgen_test_layout_ParamExternData() {
    assert_eq!(
        ::std::mem::size_of::<ParamExternData>(),
        16usize,
        concat!("Size of: ", stringify!(ParamExternData))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamExternData>(),
        8usize,
        concat!("Alignment of ", stringify!(ParamExternData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExternData>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExternData),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExternData>())).isnull as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExternData),
            "::",
            stringify!(isnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExternData>())).pflags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExternData),
            "::",
            stringify!(pflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExternData>())).ptype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExternData),
            "::",
            stringify!(ptype)
        )
    );
}
pub type ParamListInfo = *mut ParamListInfoData;
pub type ParamFetchHook = ::std::option::Option<
    unsafe extern "C" fn(
        params: ParamListInfo,
        paramid: ::std::os::raw::c_int,
        speculative: bool,
        workspace: *mut ParamExternData,
    ) -> *mut ParamExternData,
>;
pub type ParamCompileHook = ::std::option::Option<
    unsafe extern "C" fn(
        params: ParamListInfo,
        param: *mut Param,
        state: *mut ExprState,
        resv: *mut Datum,
        resnull: *mut bool,
    ),
>;
pub type ParserSetupHook = ::std::option::Option<
    unsafe extern "C" fn(pstate: *mut ParseState, arg: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
pub struct ParamListInfoData {
    pub paramFetch: ParamFetchHook,
    pub paramFetchArg: *mut ::std::os::raw::c_void,
    pub paramCompile: ParamCompileHook,
    pub paramCompileArg: *mut ::std::os::raw::c_void,
    pub parserSetup: ParserSetupHook,
    pub parserSetupArg: *mut ::std::os::raw::c_void,
    pub numParams: ::std::os::raw::c_int,
    pub params: __IncompleteArrayField<ParamExternData>,
}
#[test]
fn bindgen_test_layout_ParamListInfoData() {
    assert_eq!(
        ::std::mem::size_of::<ParamListInfoData>(),
        56usize,
        concat!("Size of: ", stringify!(ParamListInfoData))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamListInfoData>(),
        8usize,
        concat!("Alignment of ", stringify!(ParamListInfoData))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParamExecData {
    pub execPlan: *mut ::std::os::raw::c_void,
    pub value: Datum,
    pub isnull: bool,
}
#[test]
fn bindgen_test_layout_ParamExecData() {
    assert_eq!(
        ::std::mem::size_of::<ParamExecData>(),
        24usize,
        concat!("Size of: ", stringify!(ParamExecData))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamExecData>(),
        8usize,
        concat!("Alignment of ", stringify!(ParamExecData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExecData>())).execPlan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExecData),
            "::",
            stringify!(execPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExecData>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExecData),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExecData>())).isnull as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExecData),
            "::",
            stringify!(isnull)
        )
    );
}
extern "C" {
    pub fn copyParamList(from: ParamListInfo) -> ParamListInfo;
}
extern "C" {
    pub fn EstimateParamListSpace(paramLI: ParamListInfo) -> Size;
}
extern "C" {
    pub fn SerializeParamList(
        paramLI: ParamListInfo,
        start_address: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn RestoreParamList(start_address: *mut *mut ::std::os::raw::c_char) -> ParamListInfo;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlannedStmt {
    pub type_: NodeTag,
    pub commandType: CmdType,
    pub queryId: uint64,
    pub hasReturning: bool,
    pub hasModifyingCTE: bool,
    pub canSetTag: bool,
    pub transientPlan: bool,
    pub dependsOnRole: bool,
    pub parallelModeNeeded: bool,
    pub jitFlags: ::std::os::raw::c_int,
    pub planTree: *mut Plan,
    pub rtable: *mut List,
    pub resultRelations: *mut List,
    pub nonleafResultRelations: *mut List,
    pub rootResultRelations: *mut List,
    pub subplans: *mut List,
    pub rewindPlanIDs: *mut Bitmapset,
    pub rowMarks: *mut List,
    pub relationOids: *mut List,
    pub invalItems: *mut List,
    pub paramExecTypes: *mut List,
    pub utilityStmt: *mut Node,
    pub stmt_location: ::std::os::raw::c_int,
    pub stmt_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PlannedStmt() {
    assert_eq!(
        ::std::mem::size_of::<PlannedStmt>(),
        136usize,
        concat!("Size of: ", stringify!(PlannedStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<PlannedStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(PlannedStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).commandType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(commandType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).queryId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(queryId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).hasReturning as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(hasReturning)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).hasModifyingCTE as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(hasModifyingCTE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).canSetTag as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).transientPlan as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(transientPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).dependsOnRole as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(dependsOnRole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).parallelModeNeeded as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(parallelModeNeeded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).jitFlags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(jitFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).planTree as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(planTree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).rtable as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(rtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).resultRelations as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(resultRelations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlannedStmt>())).nonleafResultRelations as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(nonleafResultRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).rootResultRelations as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(rootResultRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).subplans as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(subplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).rewindPlanIDs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(rewindPlanIDs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).rowMarks as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).relationOids as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(relationOids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).invalItems as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(invalItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).paramExecTypes as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(paramExecTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).utilityStmt as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(utilityStmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).stmt_location as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(stmt_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).stmt_len as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(stmt_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Plan {
    pub type_: NodeTag,
    pub startup_cost: Cost,
    pub total_cost: Cost,
    pub plan_rows: f64,
    pub plan_width: ::std::os::raw::c_int,
    pub parallel_aware: bool,
    pub parallel_safe: bool,
    pub plan_node_id: ::std::os::raw::c_int,
    pub targetlist: *mut List,
    pub qual: *mut List,
    pub lefttree: *mut Plan,
    pub righttree: *mut Plan,
    pub initPlan: *mut List,
    pub extParam: *mut Bitmapset,
    pub allParam: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_Plan() {
    assert_eq!(
        ::std::mem::size_of::<Plan>(),
        104usize,
        concat!("Size of: ", stringify!(Plan))
    );
    assert_eq!(
        ::std::mem::align_of::<Plan>(),
        8usize,
        concat!("Alignment of ", stringify!(Plan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).startup_cost as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(startup_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).total_cost as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(total_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).plan_rows as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(plan_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).plan_width as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(plan_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).parallel_aware as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(parallel_aware)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).parallel_safe as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(parallel_safe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).plan_node_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(plan_node_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).targetlist as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(targetlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).qual as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).lefttree as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(lefttree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).righttree as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(righttree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).initPlan as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(initPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).extParam as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(extParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).allParam as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(allParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Result {
    pub plan: Plan,
    pub resconstantqual: *mut Node,
}
#[test]
fn bindgen_test_layout_Result() {
    assert_eq!(
        ::std::mem::size_of::<Result>(),
        112usize,
        concat!("Size of: ", stringify!(Result))
    );
    assert_eq!(
        ::std::mem::align_of::<Result>(),
        8usize,
        concat!("Alignment of ", stringify!(Result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Result>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Result),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Result>())).resconstantqual as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Result),
            "::",
            stringify!(resconstantqual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProjectSet {
    pub plan: Plan,
}
#[test]
fn bindgen_test_layout_ProjectSet() {
    assert_eq!(
        ::std::mem::size_of::<ProjectSet>(),
        104usize,
        concat!("Size of: ", stringify!(ProjectSet))
    );
    assert_eq!(
        ::std::mem::align_of::<ProjectSet>(),
        8usize,
        concat!("Alignment of ", stringify!(ProjectSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSet>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSet),
            "::",
            stringify!(plan)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ModifyTable {
    pub plan: Plan,
    pub operation: CmdType,
    pub canSetTag: bool,
    pub nominalRelation: Index,
    pub partitioned_rels: *mut List,
    pub partColsUpdated: bool,
    pub resultRelations: *mut List,
    pub resultRelIndex: ::std::os::raw::c_int,
    pub rootResultRelIndex: ::std::os::raw::c_int,
    pub plans: *mut List,
    pub withCheckOptionLists: *mut List,
    pub returningLists: *mut List,
    pub fdwPrivLists: *mut List,
    pub fdwDirectModifyPlans: *mut Bitmapset,
    pub rowMarks: *mut List,
    pub epqParam: ::std::os::raw::c_int,
    pub onConflictAction: OnConflictAction,
    pub arbiterIndexes: *mut List,
    pub onConflictSet: *mut List,
    pub onConflictWhere: *mut Node,
    pub exclRelRTI: Index,
    pub exclRelTlist: *mut List,
}
#[test]
fn bindgen_test_layout_ModifyTable() {
    assert_eq!(
        ::std::mem::size_of::<ModifyTable>(),
        248usize,
        concat!("Size of: ", stringify!(ModifyTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ModifyTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ModifyTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).operation as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).canSetTag as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).nominalRelation as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(nominalRelation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).partitioned_rels as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).partColsUpdated as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(partColsUpdated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).resultRelations as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(resultRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).resultRelIndex as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(resultRelIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).rootResultRelIndex as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(rootResultRelIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).plans as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(plans)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTable>())).withCheckOptionLists as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(withCheckOptionLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).returningLists as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(returningLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).fdwPrivLists as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(fdwPrivLists)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTable>())).fdwDirectModifyPlans as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(fdwDirectModifyPlans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).rowMarks as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).epqParam as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(epqParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).onConflictAction as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(onConflictAction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).arbiterIndexes as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(arbiterIndexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).onConflictSet as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(onConflictSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).onConflictWhere as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(onConflictWhere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).exclRelRTI as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(exclRelRTI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).exclRelTlist as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(exclRelTlist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Append {
    pub plan: Plan,
    pub appendplans: *mut List,
    pub first_partial_plan: ::std::os::raw::c_int,
    pub partitioned_rels: *mut List,
    pub part_prune_info: *mut PartitionPruneInfo,
}
#[test]
fn bindgen_test_layout_Append() {
    assert_eq!(
        ::std::mem::size_of::<Append>(),
        136usize,
        concat!("Size of: ", stringify!(Append))
    );
    assert_eq!(
        ::std::mem::align_of::<Append>(),
        8usize,
        concat!("Alignment of ", stringify!(Append))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Append>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Append),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Append>())).appendplans as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Append),
            "::",
            stringify!(appendplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Append>())).first_partial_plan as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Append),
            "::",
            stringify!(first_partial_plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Append>())).partitioned_rels as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Append),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Append>())).part_prune_info as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Append),
            "::",
            stringify!(part_prune_info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MergeAppend {
    pub plan: Plan,
    pub partitioned_rels: *mut List,
    pub mergeplans: *mut List,
    pub numCols: ::std::os::raw::c_int,
    pub sortColIdx: *mut AttrNumber,
    pub sortOperators: *mut Oid,
    pub collations: *mut Oid,
    pub nullsFirst: *mut bool,
}
#[test]
fn bindgen_test_layout_MergeAppend() {
    assert_eq!(
        ::std::mem::size_of::<MergeAppend>(),
        160usize,
        concat!("Size of: ", stringify!(MergeAppend))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeAppend>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeAppend))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).partitioned_rels as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).mergeplans as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(mergeplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).numCols as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).sortColIdx as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(sortColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).sortOperators as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(sortOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).collations as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(collations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).nullsFirst as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(nullsFirst)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RecursiveUnion {
    pub plan: Plan,
    pub wtParam: ::std::os::raw::c_int,
    pub numCols: ::std::os::raw::c_int,
    pub dupColIdx: *mut AttrNumber,
    pub dupOperators: *mut Oid,
    pub numGroups: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_RecursiveUnion() {
    assert_eq!(
        ::std::mem::size_of::<RecursiveUnion>(),
        136usize,
        concat!("Size of: ", stringify!(RecursiveUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<RecursiveUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(RecursiveUnion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).wtParam as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(wtParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).numCols as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).dupColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(dupColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).dupOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(dupOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).numGroups as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(numGroups)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapAnd {
    pub plan: Plan,
    pub bitmapplans: *mut List,
}
#[test]
fn bindgen_test_layout_BitmapAnd() {
    assert_eq!(
        ::std::mem::size_of::<BitmapAnd>(),
        112usize,
        concat!("Size of: ", stringify!(BitmapAnd))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapAnd>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapAnd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAnd>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAnd),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAnd>())).bitmapplans as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAnd),
            "::",
            stringify!(bitmapplans)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapOr {
    pub plan: Plan,
    pub isshared: bool,
    pub bitmapplans: *mut List,
}
#[test]
fn bindgen_test_layout_BitmapOr() {
    assert_eq!(
        ::std::mem::size_of::<BitmapOr>(),
        120usize,
        concat!("Size of: ", stringify!(BitmapOr))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapOr>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapOr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOr>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOr),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOr>())).isshared as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOr),
            "::",
            stringify!(isshared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOr>())).bitmapplans as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOr),
            "::",
            stringify!(bitmapplans)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Scan {
    pub plan: Plan,
    pub scanrelid: Index,
}
#[test]
fn bindgen_test_layout_Scan() {
    assert_eq!(
        ::std::mem::size_of::<Scan>(),
        112usize,
        concat!("Size of: ", stringify!(Scan))
    );
    assert_eq!(
        ::std::mem::align_of::<Scan>(),
        8usize,
        concat!("Alignment of ", stringify!(Scan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Scan>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Scan),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Scan>())).scanrelid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Scan),
            "::",
            stringify!(scanrelid)
        )
    );
}
pub type SeqScan = Scan;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SampleScan {
    pub scan: Scan,
    pub tablesample: *mut TableSampleClause,
}
#[test]
fn bindgen_test_layout_SampleScan() {
    assert_eq!(
        ::std::mem::size_of::<SampleScan>(),
        120usize,
        concat!("Size of: ", stringify!(SampleScan))
    );
    assert_eq!(
        ::std::mem::align_of::<SampleScan>(),
        8usize,
        concat!("Alignment of ", stringify!(SampleScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScan>())).tablesample as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScan),
            "::",
            stringify!(tablesample)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexScan {
    pub scan: Scan,
    pub indexid: Oid,
    pub indexqual: *mut List,
    pub indexqualorig: *mut List,
    pub indexorderby: *mut List,
    pub indexorderbyorig: *mut List,
    pub indexorderbyops: *mut List,
    pub indexorderdir: ScanDirection,
}
#[test]
fn bindgen_test_layout_IndexScan() {
    assert_eq!(
        ::std::mem::size_of::<IndexScan>(),
        168usize,
        concat!("Size of: ", stringify!(IndexScan))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexScan>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexqual as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexqualorig as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexqualorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexorderby as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexorderby)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexorderbyorig as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexorderbyorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexorderbyops as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexorderbyops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexorderdir as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexorderdir)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexOnlyScan {
    pub scan: Scan,
    pub indexid: Oid,
    pub indexqual: *mut List,
    pub indexorderby: *mut List,
    pub indextlist: *mut List,
    pub indexorderdir: ScanDirection,
}
#[test]
fn bindgen_test_layout_IndexOnlyScan() {
    assert_eq!(
        ::std::mem::size_of::<IndexOnlyScan>(),
        152usize,
        concat!("Size of: ", stringify!(IndexOnlyScan))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexOnlyScan>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexOnlyScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indexid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indexid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indexqual as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indexqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indexorderby as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indexorderby)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indextlist as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indextlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indexorderdir as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indexorderdir)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapIndexScan {
    pub scan: Scan,
    pub indexid: Oid,
    pub isshared: bool,
    pub indexqual: *mut List,
    pub indexqualorig: *mut List,
}
#[test]
fn bindgen_test_layout_BitmapIndexScan() {
    assert_eq!(
        ::std::mem::size_of::<BitmapIndexScan>(),
        136usize,
        concat!("Size of: ", stringify!(BitmapIndexScan))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapIndexScan>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapIndexScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).indexid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(indexid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).isshared as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(isshared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).indexqual as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(indexqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).indexqualorig as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(indexqualorig)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapHeapScan {
    pub scan: Scan,
    pub bitmapqualorig: *mut List,
}
#[test]
fn bindgen_test_layout_BitmapHeapScan() {
    assert_eq!(
        ::std::mem::size_of::<BitmapHeapScan>(),
        120usize,
        concat!("Size of: ", stringify!(BitmapHeapScan))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapHeapScan>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapHeapScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScan>())).bitmapqualorig as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScan),
            "::",
            stringify!(bitmapqualorig)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TidScan {
    pub scan: Scan,
    pub tidquals: *mut List,
}
#[test]
fn bindgen_test_layout_TidScan() {
    assert_eq!(
        ::std::mem::size_of::<TidScan>(),
        120usize,
        concat!("Size of: ", stringify!(TidScan))
    );
    assert_eq!(
        ::std::mem::align_of::<TidScan>(),
        8usize,
        concat!("Alignment of ", stringify!(TidScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScan>())).tidquals as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScan),
            "::",
            stringify!(tidquals)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SubqueryScan {
    pub scan: Scan,
    pub subplan: *mut Plan,
}
#[test]
fn bindgen_test_layout_SubqueryScan() {
    assert_eq!(
        ::std::mem::size_of::<SubqueryScan>(),
        120usize,
        concat!("Size of: ", stringify!(SubqueryScan))
    );
    assert_eq!(
        ::std::mem::align_of::<SubqueryScan>(),
        8usize,
        concat!("Alignment of ", stringify!(SubqueryScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScan>())).subplan as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScan),
            "::",
            stringify!(subplan)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FunctionScan {
    pub scan: Scan,
    pub functions: *mut List,
    pub funcordinality: bool,
}
#[test]
fn bindgen_test_layout_FunctionScan() {
    assert_eq!(
        ::std::mem::size_of::<FunctionScan>(),
        128usize,
        concat!("Size of: ", stringify!(FunctionScan))
    );
    assert_eq!(
        ::std::mem::align_of::<FunctionScan>(),
        8usize,
        concat!("Alignment of ", stringify!(FunctionScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScan>())).functions as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScan),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScan>())).funcordinality as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScan),
            "::",
            stringify!(funcordinality)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ValuesScan {
    pub scan: Scan,
    pub values_lists: *mut List,
}
#[test]
fn bindgen_test_layout_ValuesScan() {
    assert_eq!(
        ::std::mem::size_of::<ValuesScan>(),
        120usize,
        concat!("Size of: ", stringify!(ValuesScan))
    );
    assert_eq!(
        ::std::mem::align_of::<ValuesScan>(),
        8usize,
        concat!("Alignment of ", stringify!(ValuesScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScan>())).values_lists as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScan),
            "::",
            stringify!(values_lists)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TableFuncScan {
    pub scan: Scan,
    pub tablefunc: *mut TableFunc,
}
#[test]
fn bindgen_test_layout_TableFuncScan() {
    assert_eq!(
        ::std::mem::size_of::<TableFuncScan>(),
        120usize,
        concat!("Size of: ", stringify!(TableFuncScan))
    );
    assert_eq!(
        ::std::mem::align_of::<TableFuncScan>(),
        8usize,
        concat!("Alignment of ", stringify!(TableFuncScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScan>())).tablefunc as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScan),
            "::",
            stringify!(tablefunc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CteScan {
    pub scan: Scan,
    pub ctePlanId: ::std::os::raw::c_int,
    pub cteParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CteScan() {
    assert_eq!(
        ::std::mem::size_of::<CteScan>(),
        120usize,
        concat!("Size of: ", stringify!(CteScan))
    );
    assert_eq!(
        ::std::mem::align_of::<CteScan>(),
        8usize,
        concat!("Alignment of ", stringify!(CteScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScan>())).ctePlanId as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScan),
            "::",
            stringify!(ctePlanId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScan>())).cteParam as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScan),
            "::",
            stringify!(cteParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NamedTuplestoreScan {
    pub scan: Scan,
    pub enrname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NamedTuplestoreScan() {
    assert_eq!(
        ::std::mem::size_of::<NamedTuplestoreScan>(),
        120usize,
        concat!("Size of: ", stringify!(NamedTuplestoreScan))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedTuplestoreScan>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedTuplestoreScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedTuplestoreScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedTuplestoreScan>())).enrname as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScan),
            "::",
            stringify!(enrname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WorkTableScan {
    pub scan: Scan,
    pub wtParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WorkTableScan() {
    assert_eq!(
        ::std::mem::size_of::<WorkTableScan>(),
        120usize,
        concat!("Size of: ", stringify!(WorkTableScan))
    );
    assert_eq!(
        ::std::mem::align_of::<WorkTableScan>(),
        8usize,
        concat!("Alignment of ", stringify!(WorkTableScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WorkTableScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WorkTableScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WorkTableScan>())).wtParam as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WorkTableScan),
            "::",
            stringify!(wtParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForeignScan {
    pub scan: Scan,
    pub operation: CmdType,
    pub fs_server: Oid,
    pub fdw_exprs: *mut List,
    pub fdw_private: *mut List,
    pub fdw_scan_tlist: *mut List,
    pub fdw_recheck_quals: *mut List,
    pub fs_relids: *mut Bitmapset,
    pub fsSystemCol: bool,
}
#[test]
fn bindgen_test_layout_ForeignScan() {
    assert_eq!(
        ::std::mem::size_of::<ForeignScan>(),
        168usize,
        concat!("Size of: ", stringify!(ForeignScan))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignScan>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).operation as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fs_server as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fs_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fdw_exprs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fdw_exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fdw_private as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fdw_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fdw_scan_tlist as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fdw_scan_tlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fdw_recheck_quals as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fdw_recheck_quals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fs_relids as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fs_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fsSystemCol as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fsSystemCol)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CustomScanMethods {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CustomScan {
    pub scan: Scan,
    pub flags: uint32,
    pub custom_plans: *mut List,
    pub custom_exprs: *mut List,
    pub custom_private: *mut List,
    pub custom_scan_tlist: *mut List,
    pub custom_relids: *mut Bitmapset,
    pub methods: *const CustomScanMethods,
}
#[test]
fn bindgen_test_layout_CustomScan() {
    assert_eq!(
        ::std::mem::size_of::<CustomScan>(),
        168usize,
        concat!("Size of: ", stringify!(CustomScan))
    );
    assert_eq!(
        ::std::mem::align_of::<CustomScan>(),
        8usize,
        concat!("Alignment of ", stringify!(CustomScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).flags as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_plans as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_plans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_exprs as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_private as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_scan_tlist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_scan_tlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_relids as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).methods as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(methods)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Join {
    pub plan: Plan,
    pub jointype: JoinType,
    pub inner_unique: bool,
    pub joinqual: *mut List,
}
#[test]
fn bindgen_test_layout_Join() {
    assert_eq!(
        ::std::mem::size_of::<Join>(),
        120usize,
        concat!("Size of: ", stringify!(Join))
    );
    assert_eq!(
        ::std::mem::align_of::<Join>(),
        8usize,
        concat!("Alignment of ", stringify!(Join))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Join>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Join),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Join>())).jointype as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Join),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Join>())).inner_unique as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Join),
            "::",
            stringify!(inner_unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Join>())).joinqual as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Join),
            "::",
            stringify!(joinqual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NestLoop {
    pub join: Join,
    pub nestParams: *mut List,
}
#[test]
fn bindgen_test_layout_NestLoop() {
    assert_eq!(
        ::std::mem::size_of::<NestLoop>(),
        128usize,
        concat!("Size of: ", stringify!(NestLoop))
    );
    assert_eq!(
        ::std::mem::align_of::<NestLoop>(),
        8usize,
        concat!("Alignment of ", stringify!(NestLoop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoop>())).join as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoop),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoop>())).nestParams as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoop),
            "::",
            stringify!(nestParams)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NestLoopParam {
    pub type_: NodeTag,
    pub paramno: ::std::os::raw::c_int,
    pub paramval: *mut Var,
}
#[test]
fn bindgen_test_layout_NestLoopParam() {
    assert_eq!(
        ::std::mem::size_of::<NestLoopParam>(),
        16usize,
        concat!("Size of: ", stringify!(NestLoopParam))
    );
    assert_eq!(
        ::std::mem::align_of::<NestLoopParam>(),
        8usize,
        concat!("Alignment of ", stringify!(NestLoopParam))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopParam>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopParam),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopParam>())).paramno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopParam),
            "::",
            stringify!(paramno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopParam>())).paramval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopParam),
            "::",
            stringify!(paramval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MergeJoin {
    pub join: Join,
    pub skip_mark_restore: bool,
    pub mergeclauses: *mut List,
    pub mergeFamilies: *mut Oid,
    pub mergeCollations: *mut Oid,
    pub mergeStrategies: *mut ::std::os::raw::c_int,
    pub mergeNullsFirst: *mut bool,
}
#[test]
fn bindgen_test_layout_MergeJoin() {
    assert_eq!(
        ::std::mem::size_of::<MergeJoin>(),
        168usize,
        concat!("Size of: ", stringify!(MergeJoin))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeJoin>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeJoin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).join as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).skip_mark_restore as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(skip_mark_restore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeclauses as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeclauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeFamilies as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeFamilies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeCollations as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeCollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeStrategies as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeStrategies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeNullsFirst as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeNullsFirst)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HashJoin {
    pub join: Join,
    pub hashclauses: *mut List,
}
#[test]
fn bindgen_test_layout_HashJoin() {
    assert_eq!(
        ::std::mem::size_of::<HashJoin>(),
        128usize,
        concat!("Size of: ", stringify!(HashJoin))
    );
    assert_eq!(
        ::std::mem::align_of::<HashJoin>(),
        8usize,
        concat!("Alignment of ", stringify!(HashJoin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoin>())).join as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoin),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoin>())).hashclauses as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoin),
            "::",
            stringify!(hashclauses)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Material {
    pub plan: Plan,
}
#[test]
fn bindgen_test_layout_Material() {
    assert_eq!(
        ::std::mem::size_of::<Material>(),
        104usize,
        concat!("Size of: ", stringify!(Material))
    );
    assert_eq!(
        ::std::mem::align_of::<Material>(),
        8usize,
        concat!("Alignment of ", stringify!(Material))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Material>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Material),
            "::",
            stringify!(plan)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Sort {
    pub plan: Plan,
    pub numCols: ::std::os::raw::c_int,
    pub sortColIdx: *mut AttrNumber,
    pub sortOperators: *mut Oid,
    pub collations: *mut Oid,
    pub nullsFirst: *mut bool,
}
#[test]
fn bindgen_test_layout_Sort() {
    assert_eq!(
        ::std::mem::size_of::<Sort>(),
        144usize,
        concat!("Size of: ", stringify!(Sort))
    );
    assert_eq!(
        ::std::mem::align_of::<Sort>(),
        8usize,
        concat!("Alignment of ", stringify!(Sort))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).numCols as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).sortColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(sortColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).sortOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(sortOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).collations as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(collations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).nullsFirst as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(nullsFirst)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Group {
    pub plan: Plan,
    pub numCols: ::std::os::raw::c_int,
    pub grpColIdx: *mut AttrNumber,
    pub grpOperators: *mut Oid,
}
#[test]
fn bindgen_test_layout_Group() {
    assert_eq!(
        ::std::mem::size_of::<Group>(),
        128usize,
        concat!("Size of: ", stringify!(Group))
    );
    assert_eq!(
        ::std::mem::align_of::<Group>(),
        8usize,
        concat!("Alignment of ", stringify!(Group))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Group>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Group),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Group>())).numCols as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Group),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Group>())).grpColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Group),
            "::",
            stringify!(grpColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Group>())).grpOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Group),
            "::",
            stringify!(grpOperators)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Agg {
    pub plan: Plan,
    pub aggstrategy: AggStrategy,
    pub aggsplit: AggSplit,
    pub numCols: ::std::os::raw::c_int,
    pub grpColIdx: *mut AttrNumber,
    pub grpOperators: *mut Oid,
    pub numGroups: ::std::os::raw::c_long,
    pub aggParams: *mut Bitmapset,
    pub groupingSets: *mut List,
    pub chain: *mut List,
}
#[test]
fn bindgen_test_layout_Agg() {
    assert_eq!(
        ::std::mem::size_of::<Agg>(),
        168usize,
        concat!("Size of: ", stringify!(Agg))
    );
    assert_eq!(
        ::std::mem::align_of::<Agg>(),
        8usize,
        concat!("Alignment of ", stringify!(Agg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).plan as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Agg), "::", stringify!(plan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).aggstrategy as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(aggstrategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).aggsplit as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(aggsplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).numCols as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).grpColIdx as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(grpColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).grpOperators as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(grpOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).numGroups as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(numGroups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).aggParams as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(aggParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).groupingSets as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(groupingSets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).chain as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(chain)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowAgg {
    pub plan: Plan,
    pub winref: Index,
    pub partNumCols: ::std::os::raw::c_int,
    pub partColIdx: *mut AttrNumber,
    pub partOperators: *mut Oid,
    pub ordNumCols: ::std::os::raw::c_int,
    pub ordColIdx: *mut AttrNumber,
    pub ordOperators: *mut Oid,
    pub frameOptions: ::std::os::raw::c_int,
    pub startOffset: *mut Node,
    pub endOffset: *mut Node,
    pub startInRangeFunc: Oid,
    pub endInRangeFunc: Oid,
    pub inRangeColl: Oid,
    pub inRangeAsc: bool,
    pub inRangeNullsFirst: bool,
}
#[test]
fn bindgen_test_layout_WindowAgg() {
    assert_eq!(
        ::std::mem::size_of::<WindowAgg>(),
        192usize,
        concat!("Size of: ", stringify!(WindowAgg))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowAgg>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowAgg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).winref as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(winref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).partNumCols as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(partNumCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).partColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(partColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).partOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(partOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).ordNumCols as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(ordNumCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).ordColIdx as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(ordColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).ordOperators as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(ordOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).frameOptions as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(frameOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).startOffset as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).endOffset as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(endOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).startInRangeFunc as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(startInRangeFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).endInRangeFunc as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(endInRangeFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).inRangeColl as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(inRangeColl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).inRangeAsc as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(inRangeAsc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).inRangeNullsFirst as *const _ as usize },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(inRangeNullsFirst)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Unique {
    pub plan: Plan,
    pub numCols: ::std::os::raw::c_int,
    pub uniqColIdx: *mut AttrNumber,
    pub uniqOperators: *mut Oid,
}
#[test]
fn bindgen_test_layout_Unique() {
    assert_eq!(
        ::std::mem::size_of::<Unique>(),
        128usize,
        concat!("Size of: ", stringify!(Unique))
    );
    assert_eq!(
        ::std::mem::align_of::<Unique>(),
        8usize,
        concat!("Alignment of ", stringify!(Unique))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Unique>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Unique),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Unique>())).numCols as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Unique),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Unique>())).uniqColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Unique),
            "::",
            stringify!(uniqColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Unique>())).uniqOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Unique),
            "::",
            stringify!(uniqOperators)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Gather {
    pub plan: Plan,
    pub num_workers: ::std::os::raw::c_int,
    pub rescan_param: ::std::os::raw::c_int,
    pub single_copy: bool,
    pub invisible: bool,
    pub initParam: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_Gather() {
    assert_eq!(
        ::std::mem::size_of::<Gather>(),
        128usize,
        concat!("Size of: ", stringify!(Gather))
    );
    assert_eq!(
        ::std::mem::align_of::<Gather>(),
        8usize,
        concat!("Alignment of ", stringify!(Gather))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).num_workers as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(num_workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).rescan_param as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(rescan_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).single_copy as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(single_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).invisible as *const _ as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(invisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).initParam as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(initParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GatherMerge {
    pub plan: Plan,
    pub num_workers: ::std::os::raw::c_int,
    pub rescan_param: ::std::os::raw::c_int,
    pub numCols: ::std::os::raw::c_int,
    pub sortColIdx: *mut AttrNumber,
    pub sortOperators: *mut Oid,
    pub collations: *mut Oid,
    pub nullsFirst: *mut bool,
    pub initParam: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_GatherMerge() {
    assert_eq!(
        ::std::mem::size_of::<GatherMerge>(),
        160usize,
        concat!("Size of: ", stringify!(GatherMerge))
    );
    assert_eq!(
        ::std::mem::align_of::<GatherMerge>(),
        8usize,
        concat!("Alignment of ", stringify!(GatherMerge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).num_workers as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(num_workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).rescan_param as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(rescan_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).numCols as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).sortColIdx as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(sortColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).sortOperators as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(sortOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).collations as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(collations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).nullsFirst as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(nullsFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).initParam as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(initParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hash {
    pub plan: Plan,
    pub skewTable: Oid,
    pub skewColumn: AttrNumber,
    pub skewInherit: bool,
    pub rows_total: f64,
}
#[test]
fn bindgen_test_layout_Hash() {
    assert_eq!(
        ::std::mem::size_of::<Hash>(),
        120usize,
        concat!("Size of: ", stringify!(Hash))
    );
    assert_eq!(
        ::std::mem::align_of::<Hash>(),
        8usize,
        concat!("Alignment of ", stringify!(Hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).skewTable as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(skewTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).skewColumn as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(skewColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).skewInherit as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(skewInherit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).rows_total as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(rows_total)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SetOp {
    pub plan: Plan,
    pub cmd: SetOpCmd,
    pub strategy: SetOpStrategy,
    pub numCols: ::std::os::raw::c_int,
    pub dupColIdx: *mut AttrNumber,
    pub dupOperators: *mut Oid,
    pub flagColIdx: AttrNumber,
    pub firstFlag: ::std::os::raw::c_int,
    pub numGroups: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_SetOp() {
    assert_eq!(
        ::std::mem::size_of::<SetOp>(),
        152usize,
        concat!("Size of: ", stringify!(SetOp))
    );
    assert_eq!(
        ::std::mem::align_of::<SetOp>(),
        8usize,
        concat!("Alignment of ", stringify!(SetOp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).cmd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).strategy as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).numCols as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).dupColIdx as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(dupColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).dupOperators as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(dupOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).flagColIdx as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(flagColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).firstFlag as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(firstFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).numGroups as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(numGroups)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockRows {
    pub plan: Plan,
    pub rowMarks: *mut List,
    pub epqParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LockRows() {
    assert_eq!(
        ::std::mem::size_of::<LockRows>(),
        120usize,
        concat!("Size of: ", stringify!(LockRows))
    );
    assert_eq!(
        ::std::mem::align_of::<LockRows>(),
        8usize,
        concat!("Alignment of ", stringify!(LockRows))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRows>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRows),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRows>())).rowMarks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRows),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRows>())).epqParam as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRows),
            "::",
            stringify!(epqParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Limit {
    pub plan: Plan,
    pub limitOffset: *mut Node,
    pub limitCount: *mut Node,
}
#[test]
fn bindgen_test_layout_Limit() {
    assert_eq!(
        ::std::mem::size_of::<Limit>(),
        120usize,
        concat!("Size of: ", stringify!(Limit))
    );
    assert_eq!(
        ::std::mem::align_of::<Limit>(),
        8usize,
        concat!("Alignment of ", stringify!(Limit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Limit>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Limit),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Limit>())).limitOffset as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Limit),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Limit>())).limitCount as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Limit),
            "::",
            stringify!(limitCount)
        )
    );
}
pub const RowMarkType_ROW_MARK_EXCLUSIVE: RowMarkType = 0;
pub const RowMarkType_ROW_MARK_NOKEYEXCLUSIVE: RowMarkType = 1;
pub const RowMarkType_ROW_MARK_SHARE: RowMarkType = 2;
pub const RowMarkType_ROW_MARK_KEYSHARE: RowMarkType = 3;
pub const RowMarkType_ROW_MARK_REFERENCE: RowMarkType = 4;
pub const RowMarkType_ROW_MARK_COPY: RowMarkType = 5;
pub type RowMarkType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlanRowMark {
    pub type_: NodeTag,
    pub rti: Index,
    pub prti: Index,
    pub rowmarkId: Index,
    pub markType: RowMarkType,
    pub allMarkTypes: ::std::os::raw::c_int,
    pub strength: LockClauseStrength,
    pub waitPolicy: LockWaitPolicy,
    pub isParent: bool,
}
#[test]
fn bindgen_test_layout_PlanRowMark() {
    assert_eq!(
        ::std::mem::size_of::<PlanRowMark>(),
        36usize,
        concat!("Size of: ", stringify!(PlanRowMark))
    );
    assert_eq!(
        ::std::mem::align_of::<PlanRowMark>(),
        4usize,
        concat!("Alignment of ", stringify!(PlanRowMark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).rti as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(rti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).prti as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(prti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).rowmarkId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(rowmarkId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).markType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(markType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).allMarkTypes as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(allMarkTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).strength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).waitPolicy as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(waitPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).isParent as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(isParent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionPruneInfo {
    pub type_: NodeTag,
    pub prune_infos: *mut List,
    pub other_subplans: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_PartitionPruneInfo() {
    assert_eq!(
        ::std::mem::size_of::<PartitionPruneInfo>(),
        24usize,
        concat!("Size of: ", stringify!(PartitionPruneInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionPruneInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionPruneInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneInfo>())).prune_infos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneInfo),
            "::",
            stringify!(prune_infos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionPruneInfo>())).other_subplans as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneInfo),
            "::",
            stringify!(other_subplans)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionedRelPruneInfo {
    pub type_: NodeTag,
    pub reloid: Oid,
    pub pruning_steps: *mut List,
    pub present_parts: *mut Bitmapset,
    pub nparts: ::std::os::raw::c_int,
    pub nexprs: ::std::os::raw::c_int,
    pub subplan_map: *mut ::std::os::raw::c_int,
    pub subpart_map: *mut ::std::os::raw::c_int,
    pub hasexecparam: *mut bool,
    pub do_initial_prune: bool,
    pub do_exec_prune: bool,
    pub execparamids: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_PartitionedRelPruneInfo() {
    assert_eq!(
        ::std::mem::size_of::<PartitionedRelPruneInfo>(),
        72usize,
        concat!("Size of: ", stringify!(PartitionedRelPruneInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionedRelPruneInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionedRelPruneInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).reloid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(reloid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).pruning_steps as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(pruning_steps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).present_parts as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(present_parts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).nparts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(nparts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).nexprs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(nexprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).subplan_map as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(subplan_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).subpart_map as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(subpart_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).hasexecparam as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(hasexecparam)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).do_initial_prune as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(do_initial_prune)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).do_exec_prune as *const _ as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(do_exec_prune)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionedRelPruneInfo>())).execparamids as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionedRelPruneInfo),
            "::",
            stringify!(execparamids)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionPruneStep {
    pub type_: NodeTag,
    pub step_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionPruneStep() {
    assert_eq!(
        ::std::mem::size_of::<PartitionPruneStep>(),
        8usize,
        concat!("Size of: ", stringify!(PartitionPruneStep))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionPruneStep>(),
        4usize,
        concat!("Alignment of ", stringify!(PartitionPruneStep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneStep>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStep),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneStep>())).step_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStep),
            "::",
            stringify!(step_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionPruneStepOp {
    pub step: PartitionPruneStep,
    pub opstrategy: StrategyNumber,
    pub exprs: *mut List,
    pub cmpfns: *mut List,
    pub nullkeys: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_PartitionPruneStepOp() {
    assert_eq!(
        ::std::mem::size_of::<PartitionPruneStepOp>(),
        40usize,
        concat!("Size of: ", stringify!(PartitionPruneStepOp))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionPruneStepOp>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionPruneStepOp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneStepOp>())).step as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStepOp),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneStepOp>())).opstrategy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStepOp),
            "::",
            stringify!(opstrategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneStepOp>())).exprs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStepOp),
            "::",
            stringify!(exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneStepOp>())).cmpfns as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStepOp),
            "::",
            stringify!(cmpfns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneStepOp>())).nullkeys as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStepOp),
            "::",
            stringify!(nullkeys)
        )
    );
}
pub const PartitionPruneCombineOp_PARTPRUNE_COMBINE_UNION: PartitionPruneCombineOp = 0;
pub const PartitionPruneCombineOp_PARTPRUNE_COMBINE_INTERSECT: PartitionPruneCombineOp = 1;
pub type PartitionPruneCombineOp = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionPruneStepCombine {
    pub step: PartitionPruneStep,
    pub combineOp: PartitionPruneCombineOp,
    pub source_stepids: *mut List,
}
#[test]
fn bindgen_test_layout_PartitionPruneStepCombine() {
    assert_eq!(
        ::std::mem::size_of::<PartitionPruneStepCombine>(),
        24usize,
        concat!("Size of: ", stringify!(PartitionPruneStepCombine))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionPruneStepCombine>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionPruneStepCombine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionPruneStepCombine>())).step as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStepCombine),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionPruneStepCombine>())).combineOp as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStepCombine),
            "::",
            stringify!(combineOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionPruneStepCombine>())).source_stepids as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionPruneStepCombine),
            "::",
            stringify!(source_stepids)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlanInvalItem {
    pub type_: NodeTag,
    pub cacheId: ::std::os::raw::c_int,
    pub hashValue: uint32,
}
#[test]
fn bindgen_test_layout_PlanInvalItem() {
    assert_eq!(
        ::std::mem::size_of::<PlanInvalItem>(),
        12usize,
        concat!("Size of: ", stringify!(PlanInvalItem))
    );
    assert_eq!(
        ::std::mem::align_of::<PlanInvalItem>(),
        4usize,
        concat!("Alignment of ", stringify!(PlanInvalItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanInvalItem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanInvalItem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanInvalItem>())).cacheId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanInvalItem),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanInvalItem>())).hashValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanInvalItem),
            "::",
            stringify!(hashValue)
        )
    );
}
pub const EphemeralNameRelationType_ENR_NAMED_TUPLESTORE: EphemeralNameRelationType = 0;
pub type EphemeralNameRelationType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EphemeralNamedRelationMetadataData {
    pub name: *mut ::std::os::raw::c_char,
    pub reliddesc: Oid,
    pub tupdesc: TupleDesc,
    pub enrtype: EphemeralNameRelationType,
    pub enrtuples: f64,
}
#[test]
fn bindgen_test_layout_EphemeralNamedRelationMetadataData() {
    assert_eq!(
        ::std::mem::size_of::<EphemeralNamedRelationMetadataData>(),
        40usize,
        concat!("Size of: ", stringify!(EphemeralNamedRelationMetadataData))
    );
    assert_eq!(
        ::std::mem::align_of::<EphemeralNamedRelationMetadataData>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(EphemeralNamedRelationMetadataData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).reliddesc as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(reliddesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).tupdesc as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(tupdesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).enrtype as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(enrtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).enrtuples as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(enrtuples)
        )
    );
}
pub type EphemeralNamedRelationMetadata = *mut EphemeralNamedRelationMetadataData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EphemeralNamedRelationData {
    pub md: EphemeralNamedRelationMetadataData,
    pub reldata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_EphemeralNamedRelationData() {
    assert_eq!(
        ::std::mem::size_of::<EphemeralNamedRelationData>(),
        48usize,
        concat!("Size of: ", stringify!(EphemeralNamedRelationData))
    );
    assert_eq!(
        ::std::mem::align_of::<EphemeralNamedRelationData>(),
        8usize,
        concat!("Alignment of ", stringify!(EphemeralNamedRelationData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EphemeralNamedRelationData>())).md as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationData),
            "::",
            stringify!(md)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationData>())).reldata as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationData),
            "::",
            stringify!(reldata)
        )
    );
}
pub type EphemeralNamedRelation = *mut EphemeralNamedRelationData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct QueryEnvironment {
    _unused: [u8; 0],
}
extern "C" {
    pub fn create_queryEnv() -> *mut QueryEnvironment;
}
extern "C" {
    pub fn get_visible_ENR_metadata(
        queryEnv: *mut QueryEnvironment,
        refname: *const ::std::os::raw::c_char,
    ) -> EphemeralNamedRelationMetadata;
}
extern "C" {
    pub fn register_ENR(queryEnv: *mut QueryEnvironment, enr: EphemeralNamedRelation);
}
extern "C" {
    pub fn unregister_ENR(queryEnv: *mut QueryEnvironment, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_ENR(
        queryEnv: *mut QueryEnvironment,
        name: *const ::std::os::raw::c_char,
    ) -> EphemeralNamedRelation;
}
extern "C" {
    pub fn ENRMetadataGetTupDesc(enrmd: EphemeralNamedRelationMetadata) -> TupleDesc;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Trigger {
    pub tgoid: Oid,
    pub tgname: *mut ::std::os::raw::c_char,
    pub tgfoid: Oid,
    pub tgtype: int16,
    pub tgenabled: ::std::os::raw::c_char,
    pub tgisinternal: bool,
    pub tgconstrrelid: Oid,
    pub tgconstrindid: Oid,
    pub tgconstraint: Oid,
    pub tgdeferrable: bool,
    pub tginitdeferred: bool,
    pub tgnargs: int16,
    pub tgnattr: int16,
    pub tgattr: *mut int16,
    pub tgargs: *mut *mut ::std::os::raw::c_char,
    pub tgqual: *mut ::std::os::raw::c_char,
    pub tgoldtable: *mut ::std::os::raw::c_char,
    pub tgnewtable: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Trigger() {
    assert_eq!(
        ::std::mem::size_of::<Trigger>(),
        88usize,
        concat!("Size of: ", stringify!(Trigger))
    );
    assert_eq!(
        ::std::mem::align_of::<Trigger>(),
        8usize,
        concat!("Alignment of ", stringify!(Trigger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgoid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgfoid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgfoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgtype as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgenabled as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgenabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgisinternal as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgisinternal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgconstrrelid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgconstrrelid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgconstrindid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgconstrindid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgconstraint as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgconstraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgdeferrable as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgdeferrable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tginitdeferred as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tginitdeferred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgnargs as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgnargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgnattr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgnattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgattr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgargs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgqual as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgoldtable as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgoldtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgnewtable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgnewtable)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TriggerDesc {
    pub triggers: *mut Trigger,
    pub numtriggers: ::std::os::raw::c_int,
    pub trig_insert_before_row: bool,
    pub trig_insert_after_row: bool,
    pub trig_insert_instead_row: bool,
    pub trig_insert_before_statement: bool,
    pub trig_insert_after_statement: bool,
    pub trig_update_before_row: bool,
    pub trig_update_after_row: bool,
    pub trig_update_instead_row: bool,
    pub trig_update_before_statement: bool,
    pub trig_update_after_statement: bool,
    pub trig_delete_before_row: bool,
    pub trig_delete_after_row: bool,
    pub trig_delete_instead_row: bool,
    pub trig_delete_before_statement: bool,
    pub trig_delete_after_statement: bool,
    pub trig_truncate_before_statement: bool,
    pub trig_truncate_after_statement: bool,
    pub trig_insert_new_table: bool,
    pub trig_update_old_table: bool,
    pub trig_update_new_table: bool,
    pub trig_delete_old_table: bool,
}
#[test]
fn bindgen_test_layout_TriggerDesc() {
    assert_eq!(
        ::std::mem::size_of::<TriggerDesc>(),
        40usize,
        concat!("Size of: ", stringify!(TriggerDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<TriggerDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(TriggerDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerDesc>())).triggers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(triggers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerDesc>())).numtriggers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(numtriggers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_before_row as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_before_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_after_row as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_after_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_instead_row as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_instead_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_before_statement as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_before_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_after_statement as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_after_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_before_row as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_before_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_after_row as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_after_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_instead_row as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_instead_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_before_statement as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_before_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_after_statement as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_after_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_before_row as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_before_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_after_row as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_after_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_instead_row as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_instead_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_before_statement as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_before_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_after_statement as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_after_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_truncate_before_statement as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_truncate_before_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_truncate_after_statement as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_truncate_after_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_new_table as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_new_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_old_table as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_old_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_new_table as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_new_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_old_table as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_old_table)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_off as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: _bindgen_ty_17 = 0;
pub const DT_FIFO: _bindgen_ty_17 = 1;
pub const DT_CHR: _bindgen_ty_17 = 2;
pub const DT_DIR: _bindgen_ty_17 = 4;
pub const DT_BLK: _bindgen_ty_17 = 6;
pub const DT_REG: _bindgen_ty_17 = 8;
pub const DT_LNK: _bindgen_ty_17 = 10;
pub const DT_SOCK: _bindgen_ty_17 = 12;
pub const DT_WHT: _bindgen_ty_17 = 14;
pub type _bindgen_ty_17 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentries(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
        __basep: *mut __off_t,
    ) -> __ssize_t;
}
pub type File = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}max_files_per_process"]
    pub static mut max_files_per_process: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}data_sync_retry"]
    pub static mut data_sync_retry: bool;
}
extern "C" {
    #[link_name = "\u{1}max_safe_fds"]
    pub static mut max_safe_fds: ::std::os::raw::c_int;
}
extern "C" {
    pub fn PathNameOpenFile(
        fileName: *const ::std::os::raw::c_char,
        fileFlags: ::std::os::raw::c_int,
    ) -> File;
}
extern "C" {
    pub fn PathNameOpenFilePerm(
        fileName: *const ::std::os::raw::c_char,
        fileFlags: ::std::os::raw::c_int,
        fileMode: mode_t,
    ) -> File;
}
extern "C" {
    pub fn OpenTemporaryFile(interXact: bool) -> File;
}
extern "C" {
    pub fn FileClose(file: File);
}
extern "C" {
    pub fn FilePrefetch(
        file: File,
        offset: off_t,
        amount: ::std::os::raw::c_int,
        wait_event_info: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FileRead(
        file: File,
        buffer: *mut ::std::os::raw::c_char,
        amount: ::std::os::raw::c_int,
        wait_event_info: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FileWrite(
        file: File,
        buffer: *mut ::std::os::raw::c_char,
        amount: ::std::os::raw::c_int,
        wait_event_info: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FileSync(file: File, wait_event_info: uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FileSeek(file: File, offset: off_t, whence: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn FileTruncate(
        file: File,
        offset: off_t,
        wait_event_info: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FileWriteback(file: File, offset: off_t, nbytes: off_t, wait_event_info: uint32);
}
extern "C" {
    pub fn FilePathName(file: File) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn FileGetRawDesc(file: File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FileGetRawFlags(file: File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FileGetRawMode(file: File) -> mode_t;
}
extern "C" {
    pub fn PathNameCreateTemporaryFile(
        name: *const ::std::os::raw::c_char,
        error_on_failure: bool,
    ) -> File;
}
extern "C" {
    pub fn PathNameOpenTemporaryFile(name: *const ::std::os::raw::c_char) -> File;
}
extern "C" {
    pub fn PathNameDeleteTemporaryFile(
        name: *const ::std::os::raw::c_char,
        error_on_failure: bool,
    ) -> bool;
}
extern "C" {
    pub fn PathNameCreateTemporaryDir(
        base: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn PathNameDeleteTemporaryDir(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TempTablespacePath(path: *mut ::std::os::raw::c_char, tablespace: Oid);
}
extern "C" {
    pub fn AllocateFile(
        name: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn FreeFile(file: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenPipeStream(
        command: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ClosePipeStream(file: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AllocateDir(dirname: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn ReadDir(dir: *mut DIR, dirname: *const ::std::os::raw::c_char) -> *mut dirent;
}
extern "C" {
    pub fn ReadDirExtended(
        dir: *mut DIR,
        dirname: *const ::std::os::raw::c_char,
        elevel: ::std::os::raw::c_int,
    ) -> *mut dirent;
}
extern "C" {
    pub fn FreeDir(dir: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenTransientFile(
        fileName: *const ::std::os::raw::c_char,
        fileFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenTransientFilePerm(
        fileName: *const ::std::os::raw::c_char,
        fileFlags: ::std::os::raw::c_int,
        fileMode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CloseTransientFile(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BasicOpenFile(
        fileName: *const ::std::os::raw::c_char,
        fileFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BasicOpenFilePerm(
        fileName: *const ::std::os::raw::c_char,
        fileFlags: ::std::os::raw::c_int,
        fileMode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MakePGDirectory(directoryName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn InitFileAccess();
}
extern "C" {
    pub fn set_max_safe_fds();
}
extern "C" {
    pub fn closeAllVfds();
}
extern "C" {
    pub fn SetTempTablespaces(tableSpaces: *mut Oid, numSpaces: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TempTablespacesAreSet() -> bool;
}
extern "C" {
    pub fn GetTempTablespaces(
        tableSpaces: *mut Oid,
        numSpaces: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetNextTempTableSpace() -> Oid;
}
extern "C" {
    pub fn AtEOXact_Files(isCommit: bool);
}
extern "C" {
    pub fn AtEOSubXact_Files(
        isCommit: bool,
        mySubid: SubTransactionId,
        parentSubid: SubTransactionId,
    );
}
extern "C" {
    pub fn RemovePgTempFiles();
}
extern "C" {
    pub fn looks_like_temp_rel_name(name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn pg_fsync(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_fsync_no_writethrough(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_fsync_writethrough(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_fdatasync(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_flush_data(fd: ::std::os::raw::c_int, offset: off_t, amount: off_t);
}
extern "C" {
    pub fn fsync_fname(fname: *const ::std::os::raw::c_char, isdir: bool);
}
extern "C" {
    pub fn durable_rename(
        oldfile: *const ::std::os::raw::c_char,
        newfile: *const ::std::os::raw::c_char,
        loglevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn durable_unlink(
        fname: *const ::std::os::raw::c_char,
        loglevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn durable_link_or_rename(
        oldfile: *const ::std::os::raw::c_char,
        newfile: *const ::std::os::raw::c_char,
        loglevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SyncDataDirectory();
}
extern "C" {
    pub fn data_sync_elevel(elevel: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SpinlockSemas() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SpinlockSemaSize() -> Size;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedFileSet {
    pub creator_pid: pid_t,
    pub number: uint32,
    pub mutex: slock_t,
    pub refcnt: ::std::os::raw::c_int,
    pub ntablespaces: ::std::os::raw::c_int,
    pub tablespaces: [Oid; 8usize],
}
#[test]
fn bindgen_test_layout_SharedFileSet() {
    assert_eq!(
        ::std::mem::size_of::<SharedFileSet>(),
        52usize,
        concat!("Size of: ", stringify!(SharedFileSet))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedFileSet>(),
        4usize,
        concat!("Alignment of ", stringify!(SharedFileSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedFileSet>())).creator_pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedFileSet),
            "::",
            stringify!(creator_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedFileSet>())).number as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedFileSet),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedFileSet>())).mutex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedFileSet),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedFileSet>())).refcnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedFileSet),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedFileSet>())).ntablespaces as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedFileSet),
            "::",
            stringify!(ntablespaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedFileSet>())).tablespaces as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedFileSet),
            "::",
            stringify!(tablespaces)
        )
    );
}
extern "C" {
    pub fn SharedFileSetInit(fileset: *mut SharedFileSet, seg: *mut dsm_segment);
}
extern "C" {
    pub fn SharedFileSetAttach(fileset: *mut SharedFileSet, seg: *mut dsm_segment);
}
extern "C" {
    pub fn SharedFileSetCreate(
        fileset: *mut SharedFileSet,
        name: *const ::std::os::raw::c_char,
    ) -> File;
}
extern "C" {
    pub fn SharedFileSetOpen(
        fileset: *mut SharedFileSet,
        name: *const ::std::os::raw::c_char,
    ) -> File;
}
extern "C" {
    pub fn SharedFileSetDelete(
        fileset: *mut SharedFileSet,
        name: *const ::std::os::raw::c_char,
        error_on_failure: bool,
    ) -> bool;
}
extern "C" {
    pub fn SharedFileSetDeleteAll(fileset: *mut SharedFileSet);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedTuplestore {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedTuplestoreAccessor {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sts_estimate(participants: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn sts_initialize(
        sts: *mut SharedTuplestore,
        participants: ::std::os::raw::c_int,
        my_participant_number: ::std::os::raw::c_int,
        meta_data_size: usize,
        flags: ::std::os::raw::c_int,
        fileset: *mut SharedFileSet,
        name: *const ::std::os::raw::c_char,
    ) -> *mut SharedTuplestoreAccessor;
}
extern "C" {
    pub fn sts_attach(
        sts: *mut SharedTuplestore,
        my_participant_number: ::std::os::raw::c_int,
        fileset: *mut SharedFileSet,
    ) -> *mut SharedTuplestoreAccessor;
}
extern "C" {
    pub fn sts_end_write(accessor: *mut SharedTuplestoreAccessor);
}
extern "C" {
    pub fn sts_reinitialize(accessor: *mut SharedTuplestoreAccessor);
}
extern "C" {
    pub fn sts_begin_parallel_scan(accessor: *mut SharedTuplestoreAccessor);
}
extern "C" {
    pub fn sts_end_parallel_scan(accessor: *mut SharedTuplestoreAccessor);
}
extern "C" {
    pub fn sts_puttuple(
        accessor: *mut SharedTuplestoreAccessor,
        meta_data: *mut ::std::os::raw::c_void,
        tuple: MinimalTuple,
    );
}
extern "C" {
    pub fn sts_parallel_scan_next(
        accessor: *mut SharedTuplestoreAccessor,
        meta_data: *mut ::std::os::raw::c_void,
    ) -> MinimalTuple;
}
pub type SortSupport = *mut SortSupportData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SortSupportData {
    pub ssup_cxt: MemoryContext,
    pub ssup_collation: Oid,
    pub ssup_reverse: bool,
    pub ssup_nulls_first: bool,
    pub ssup_attno: AttrNumber,
    pub ssup_extra: *mut ::std::os::raw::c_void,
    pub comparator: ::std::option::Option<
        unsafe extern "C" fn(x: Datum, y: Datum, ssup: SortSupport) -> ::std::os::raw::c_int,
    >,
    pub abbreviate: bool,
    pub abbrev_converter:
        ::std::option::Option<unsafe extern "C" fn(original: Datum, ssup: SortSupport) -> Datum>,
    pub abbrev_abort: ::std::option::Option<
        unsafe extern "C" fn(memtupcount: ::std::os::raw::c_int, ssup: SortSupport) -> bool,
    >,
    pub abbrev_full_comparator: ::std::option::Option<
        unsafe extern "C" fn(x: Datum, y: Datum, ssup: SortSupport) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_SortSupportData() {
    assert_eq!(
        ::std::mem::size_of::<SortSupportData>(),
        64usize,
        concat!("Size of: ", stringify!(SortSupportData))
    );
    assert_eq!(
        ::std::mem::align_of::<SortSupportData>(),
        8usize,
        concat!("Alignment of ", stringify!(SortSupportData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_cxt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_collation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_reverse as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_reverse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SortSupportData>())).ssup_nulls_first as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_nulls_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_attno as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_attno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_extra as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).comparator as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(comparator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).abbreviate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(abbreviate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SortSupportData>())).abbrev_converter as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(abbrev_converter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).abbrev_abort as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(abbrev_abort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SortSupportData>())).abbrev_full_comparator as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(abbrev_full_comparator)
        )
    );
}
extern "C" {
    pub fn PrepareSortSupportComparisonShim(cmpFunc: Oid, ssup: SortSupport);
}
extern "C" {
    pub fn PrepareSortSupportFromOrderingOp(orderingOp: Oid, ssup: SortSupport);
}
extern "C" {
    pub fn PrepareSortSupportFromIndexRel(indexRel: Relation, strategy: int16, ssup: SortSupport);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TupleTableSlot {
    pub type_: NodeTag,
    pub tts_isempty: bool,
    pub tts_shouldFree: bool,
    pub tts_shouldFreeMin: bool,
    pub tts_slow: bool,
    pub tts_tuple: HeapTuple,
    pub tts_tupleDescriptor: TupleDesc,
    pub tts_mcxt: MemoryContext,
    pub tts_buffer: Buffer,
    pub tts_nvalid: ::std::os::raw::c_int,
    pub tts_values: *mut Datum,
    pub tts_isnull: *mut bool,
    pub tts_mintuple: MinimalTuple,
    pub tts_minhdr: HeapTupleData,
    pub tts_off: uint32,
    pub tts_fixedTupleDescriptor: bool,
}
#[test]
fn bindgen_test_layout_TupleTableSlot() {
    assert_eq!(
        ::std::mem::size_of::<TupleTableSlot>(),
        96usize,
        concat!("Size of: ", stringify!(TupleTableSlot))
    );
    assert_eq!(
        ::std::mem::align_of::<TupleTableSlot>(),
        8usize,
        concat!("Alignment of ", stringify!(TupleTableSlot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_isempty as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_isempty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_shouldFree as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_shouldFree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleTableSlot>())).tts_shouldFreeMin as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_shouldFreeMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_slow as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_slow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_tuple as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleTableSlot>())).tts_tupleDescriptor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_tupleDescriptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_mcxt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_mcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_buffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_nvalid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_nvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_values as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_isnull as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_isnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_mintuple as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_mintuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_minhdr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_minhdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_off as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleTableSlot>())).tts_fixedTupleDescriptor as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_fixedTupleDescriptor)
        )
    );
}
extern "C" {
    pub fn MakeTupleTableSlot(desc: TupleDesc) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecAllocTableSlot(tupleTable: *mut *mut List, desc: TupleDesc) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecResetTupleTable(tupleTable: *mut List, shouldFree: bool);
}
extern "C" {
    pub fn MakeSingleTupleTableSlot(tupdesc: TupleDesc) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecDropSingleTupleTableSlot(slot: *mut TupleTableSlot);
}
extern "C" {
    pub fn ExecSetSlotDescriptor(slot: *mut TupleTableSlot, tupdesc: TupleDesc);
}
extern "C" {
    pub fn ExecStoreTuple(
        tuple: HeapTuple,
        slot: *mut TupleTableSlot,
        buffer: Buffer,
        shouldFree: bool,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecStoreMinimalTuple(
        mtup: MinimalTuple,
        slot: *mut TupleTableSlot,
        shouldFree: bool,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecClearTuple(slot: *mut TupleTableSlot) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecStoreVirtualTuple(slot: *mut TupleTableSlot) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecStoreAllNullTuple(slot: *mut TupleTableSlot) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecCopySlotTuple(slot: *mut TupleTableSlot) -> HeapTuple;
}
extern "C" {
    pub fn ExecCopySlotMinimalTuple(slot: *mut TupleTableSlot) -> MinimalTuple;
}
extern "C" {
    pub fn ExecFetchSlotTuple(slot: *mut TupleTableSlot) -> HeapTuple;
}
extern "C" {
    pub fn ExecFetchSlotMinimalTuple(slot: *mut TupleTableSlot) -> MinimalTuple;
}
extern "C" {
    pub fn ExecFetchSlotTupleDatum(slot: *mut TupleTableSlot) -> Datum;
}
extern "C" {
    pub fn ExecMaterializeSlot(slot: *mut TupleTableSlot) -> HeapTuple;
}
extern "C" {
    pub fn ExecCopySlot(
        dstslot: *mut TupleTableSlot,
        srcslot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn slot_getattr(
        slot: *mut TupleTableSlot,
        attnum: ::std::os::raw::c_int,
        isnull: *mut bool,
    ) -> Datum;
}
extern "C" {
    pub fn slot_getallattrs(slot: *mut TupleTableSlot);
}
extern "C" {
    pub fn slot_getsomeattrs(slot: *mut TupleTableSlot, attnum: ::std::os::raw::c_int);
}
extern "C" {
    pub fn slot_attisnull(slot: *mut TupleTableSlot, attnum: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn slot_getsysattr(
        slot: *mut TupleTableSlot,
        attnum: ::std::os::raw::c_int,
        value: *mut Datum,
        isnull: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn slot_getmissingattrs(
        slot: *mut TupleTableSlot,
        startAttNum: ::std::os::raw::c_int,
        lastAttNum: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Tuplestorestate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tuplestore_begin_heap(
        randomAccess: bool,
        interXact: bool,
        maxKBytes: ::std::os::raw::c_int,
    ) -> *mut Tuplestorestate;
}
extern "C" {
    pub fn tuplestore_set_eflags(state: *mut Tuplestorestate, eflags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tuplestore_puttupleslot(state: *mut Tuplestorestate, slot: *mut TupleTableSlot);
}
extern "C" {
    pub fn tuplestore_puttuple(state: *mut Tuplestorestate, tuple: HeapTuple);
}
extern "C" {
    pub fn tuplestore_putvalues(
        state: *mut Tuplestorestate,
        tdesc: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool,
    );
}
extern "C" {
    pub fn tuplestore_alloc_read_pointer(
        state: *mut Tuplestorestate,
        eflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuplestore_select_read_pointer(state: *mut Tuplestorestate, ptr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tuplestore_copy_read_pointer(
        state: *mut Tuplestorestate,
        srcptr: ::std::os::raw::c_int,
        destptr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tuplestore_trim(state: *mut Tuplestorestate);
}
extern "C" {
    pub fn tuplestore_in_memory(state: *mut Tuplestorestate) -> bool;
}
extern "C" {
    pub fn tuplestore_gettupleslot(
        state: *mut Tuplestorestate,
        forward: bool,
        copy: bool,
        slot: *mut TupleTableSlot,
    ) -> bool;
}
extern "C" {
    pub fn tuplestore_advance(state: *mut Tuplestorestate, forward: bool) -> bool;
}
extern "C" {
    pub fn tuplestore_skiptuples(
        state: *mut Tuplestorestate,
        ntuples: int64,
        forward: bool,
    ) -> bool;
}
extern "C" {
    pub fn tuplestore_tuple_count(state: *mut Tuplestorestate) -> int64;
}
extern "C" {
    pub fn tuplestore_ateof(state: *mut Tuplestorestate) -> bool;
}
extern "C" {
    pub fn tuplestore_rescan(state: *mut Tuplestorestate);
}
extern "C" {
    pub fn tuplestore_clear(state: *mut Tuplestorestate);
}
extern "C" {
    pub fn tuplestore_end(state: *mut Tuplestorestate);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexTupleData {
    pub t_tid: ItemPointerData,
    pub t_info: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_IndexTupleData() {
    assert_eq!(
        ::std::mem::size_of::<IndexTupleData>(),
        8usize,
        concat!("Size of: ", stringify!(IndexTupleData))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexTupleData>(),
        2usize,
        concat!("Alignment of ", stringify!(IndexTupleData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexTupleData>())).t_tid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexTupleData),
            "::",
            stringify!(t_tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexTupleData>())).t_info as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexTupleData),
            "::",
            stringify!(t_info)
        )
    );
}
pub type IndexTuple = *mut IndexTupleData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexAttributeBitMapData {
    pub bits: [bits8; 4usize],
}
#[test]
fn bindgen_test_layout_IndexAttributeBitMapData() {
    assert_eq!(
        ::std::mem::size_of::<IndexAttributeBitMapData>(),
        4usize,
        concat!("Size of: ", stringify!(IndexAttributeBitMapData))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexAttributeBitMapData>(),
        1usize,
        concat!("Alignment of ", stringify!(IndexAttributeBitMapData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAttributeBitMapData>())).bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAttributeBitMapData),
            "::",
            stringify!(bits)
        )
    );
}
pub type IndexAttributeBitMap = *mut IndexAttributeBitMapData;
extern "C" {
    pub fn index_form_tuple(
        tupleDescriptor: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool,
    ) -> IndexTuple;
}
extern "C" {
    pub fn nocache_index_getattr(
        tup: IndexTuple,
        attnum: ::std::os::raw::c_int,
        tupleDesc: TupleDesc,
    ) -> Datum;
}
extern "C" {
    pub fn index_deform_tuple(
        tup: IndexTuple,
        tupleDescriptor: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool,
    );
}
extern "C" {
    pub fn CopyIndexTuple(source: IndexTuple) -> IndexTuple;
}
extern "C" {
    pub fn index_truncate_tuple(
        sourceDescriptor: TupleDesc,
        source: IndexTuple,
        leavenatts: ::std::os::raw::c_int,
    ) -> IndexTuple;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Tuplesortstate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Sharedsort {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SortCoordinateData {
    pub isWorker: bool,
    pub nParticipants: ::std::os::raw::c_int,
    pub sharedsort: *mut Sharedsort,
}
#[test]
fn bindgen_test_layout_SortCoordinateData() {
    assert_eq!(
        ::std::mem::size_of::<SortCoordinateData>(),
        16usize,
        concat!("Size of: ", stringify!(SortCoordinateData))
    );
    assert_eq!(
        ::std::mem::align_of::<SortCoordinateData>(),
        8usize,
        concat!("Alignment of ", stringify!(SortCoordinateData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortCoordinateData>())).isWorker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortCoordinateData),
            "::",
            stringify!(isWorker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SortCoordinateData>())).nParticipants as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SortCoordinateData),
            "::",
            stringify!(nParticipants)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortCoordinateData>())).sharedsort as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SortCoordinateData),
            "::",
            stringify!(sharedsort)
        )
    );
}
pub type SortCoordinate = *mut SortCoordinateData;
pub const TuplesortMethod_SORT_TYPE_STILL_IN_PROGRESS: TuplesortMethod = 0;
pub const TuplesortMethod_SORT_TYPE_TOP_N_HEAPSORT: TuplesortMethod = 1;
pub const TuplesortMethod_SORT_TYPE_QUICKSORT: TuplesortMethod = 2;
pub const TuplesortMethod_SORT_TYPE_EXTERNAL_SORT: TuplesortMethod = 3;
pub const TuplesortMethod_SORT_TYPE_EXTERNAL_MERGE: TuplesortMethod = 4;
pub type TuplesortMethod = u32;
pub const TuplesortSpaceType_SORT_SPACE_TYPE_DISK: TuplesortSpaceType = 0;
pub const TuplesortSpaceType_SORT_SPACE_TYPE_MEMORY: TuplesortSpaceType = 1;
pub type TuplesortSpaceType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TuplesortInstrumentation {
    pub sortMethod: TuplesortMethod,
    pub spaceType: TuplesortSpaceType,
    pub spaceUsed: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_TuplesortInstrumentation() {
    assert_eq!(
        ::std::mem::size_of::<TuplesortInstrumentation>(),
        16usize,
        concat!("Size of: ", stringify!(TuplesortInstrumentation))
    );
    assert_eq!(
        ::std::mem::align_of::<TuplesortInstrumentation>(),
        8usize,
        concat!("Alignment of ", stringify!(TuplesortInstrumentation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TuplesortInstrumentation>())).sortMethod as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TuplesortInstrumentation),
            "::",
            stringify!(sortMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TuplesortInstrumentation>())).spaceType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TuplesortInstrumentation),
            "::",
            stringify!(spaceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TuplesortInstrumentation>())).spaceUsed as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TuplesortInstrumentation),
            "::",
            stringify!(spaceUsed)
        )
    );
}
extern "C" {
    pub fn tuplesort_begin_heap(
        tupDesc: TupleDesc,
        nkeys: ::std::os::raw::c_int,
        attNums: *mut AttrNumber,
        sortOperators: *mut Oid,
        sortCollations: *mut Oid,
        nullsFirstFlags: *mut bool,
        workMem: ::std::os::raw::c_int,
        coordinate: SortCoordinate,
        randomAccess: bool,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_begin_cluster(
        tupDesc: TupleDesc,
        indexRel: Relation,
        workMem: ::std::os::raw::c_int,
        coordinate: SortCoordinate,
        randomAccess: bool,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_begin_index_btree(
        heapRel: Relation,
        indexRel: Relation,
        enforceUnique: bool,
        workMem: ::std::os::raw::c_int,
        coordinate: SortCoordinate,
        randomAccess: bool,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_begin_index_hash(
        heapRel: Relation,
        indexRel: Relation,
        high_mask: uint32,
        low_mask: uint32,
        max_buckets: uint32,
        workMem: ::std::os::raw::c_int,
        coordinate: SortCoordinate,
        randomAccess: bool,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_begin_datum(
        datumType: Oid,
        sortOperator: Oid,
        sortCollation: Oid,
        nullsFirstFlag: bool,
        workMem: ::std::os::raw::c_int,
        coordinate: SortCoordinate,
        randomAccess: bool,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_set_bound(state: *mut Tuplesortstate, bound: int64);
}
extern "C" {
    pub fn tuplesort_puttupleslot(state: *mut Tuplesortstate, slot: *mut TupleTableSlot);
}
extern "C" {
    pub fn tuplesort_putheaptuple(state: *mut Tuplesortstate, tup: HeapTuple);
}
extern "C" {
    pub fn tuplesort_putindextuplevalues(
        state: *mut Tuplesortstate,
        rel: Relation,
        self_: ItemPointer,
        values: *mut Datum,
        isnull: *mut bool,
    );
}
extern "C" {
    pub fn tuplesort_putdatum(state: *mut Tuplesortstate, val: Datum, isNull: bool);
}
extern "C" {
    pub fn tuplesort_performsort(state: *mut Tuplesortstate);
}
extern "C" {
    pub fn tuplesort_gettupleslot(
        state: *mut Tuplesortstate,
        forward: bool,
        copy: bool,
        slot: *mut TupleTableSlot,
        abbrev: *mut Datum,
    ) -> bool;
}
extern "C" {
    pub fn tuplesort_getheaptuple(state: *mut Tuplesortstate, forward: bool) -> HeapTuple;
}
extern "C" {
    pub fn tuplesort_getindextuple(state: *mut Tuplesortstate, forward: bool) -> IndexTuple;
}
extern "C" {
    pub fn tuplesort_getdatum(
        state: *mut Tuplesortstate,
        forward: bool,
        val: *mut Datum,
        isNull: *mut bool,
        abbrev: *mut Datum,
    ) -> bool;
}
extern "C" {
    pub fn tuplesort_skiptuples(state: *mut Tuplesortstate, ntuples: int64, forward: bool) -> bool;
}
extern "C" {
    pub fn tuplesort_end(state: *mut Tuplesortstate);
}
extern "C" {
    pub fn tuplesort_get_stats(state: *mut Tuplesortstate, stats: *mut TuplesortInstrumentation);
}
extern "C" {
    pub fn tuplesort_method_name(m: TuplesortMethod) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tuplesort_space_type_name(t: TuplesortSpaceType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tuplesort_merge_order(allowedMem: int64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuplesort_estimate_shared(nworkers: ::std::os::raw::c_int) -> Size;
}
extern "C" {
    pub fn tuplesort_initialize_shared(
        shared: *mut Sharedsort,
        nWorkers: ::std::os::raw::c_int,
        seg: *mut dsm_segment,
    );
}
extern "C" {
    pub fn tuplesort_attach_shared(shared: *mut Sharedsort, seg: *mut dsm_segment);
}
extern "C" {
    pub fn tuplesort_rescan(state: *mut Tuplesortstate);
}
extern "C" {
    pub fn tuplesort_markpos(state: *mut Tuplesortstate);
}
extern "C" {
    pub fn tuplesort_restorepos(state: *mut Tuplesortstate);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ConditionVariable {
    pub mutex: slock_t,
    pub wakeup: proclist_head,
}
#[test]
fn bindgen_test_layout_ConditionVariable() {
    assert_eq!(
        ::std::mem::size_of::<ConditionVariable>(),
        12usize,
        concat!("Size of: ", stringify!(ConditionVariable))
    );
    assert_eq!(
        ::std::mem::align_of::<ConditionVariable>(),
        4usize,
        concat!("Alignment of ", stringify!(ConditionVariable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConditionVariable>())).mutex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConditionVariable),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConditionVariable>())).wakeup as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ConditionVariable),
            "::",
            stringify!(wakeup)
        )
    );
}
extern "C" {
    pub fn ConditionVariableInit(cv: *mut ConditionVariable);
}
extern "C" {
    pub fn ConditionVariableSleep(cv: *mut ConditionVariable, wait_event_info: uint32);
}
extern "C" {
    pub fn ConditionVariableCancelSleep();
}
extern "C" {
    pub fn ConditionVariablePrepareToSleep(cv: *mut ConditionVariable);
}
extern "C" {
    pub fn ConditionVariableSignal(cv: *mut ConditionVariable);
}
extern "C" {
    pub fn ConditionVariableBroadcast(cv: *mut ConditionVariable);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParallelHashJoinState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExprEvalStep {
    _unused: [u8; 0],
}
pub type ExprStateEvalFunc = ::std::option::Option<
    unsafe extern "C" fn(
        expression: *mut ExprState,
        econtext: *mut ExprContext,
        isNull: *mut bool,
    ) -> Datum,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExprState {
    pub tag: Node,
    pub flags: uint8,
    pub resnull: bool,
    pub resvalue: Datum,
    pub resultslot: *mut TupleTableSlot,
    pub steps: *mut ExprEvalStep,
    pub evalfunc: ExprStateEvalFunc,
    pub expr: *mut Expr,
    pub evalfunc_private: *mut ::std::os::raw::c_void,
    pub steps_len: ::std::os::raw::c_int,
    pub steps_alloc: ::std::os::raw::c_int,
    pub parent: *mut PlanState,
    pub ext_params: ParamListInfo,
    pub innermost_caseval: *mut Datum,
    pub innermost_casenull: *mut bool,
    pub innermost_domainval: *mut Datum,
    pub innermost_domainnull: *mut bool,
}
#[test]
fn bindgen_test_layout_ExprState() {
    assert_eq!(
        ::std::mem::size_of::<ExprState>(),
        112usize,
        concat!("Size of: ", stringify!(ExprState))
    );
    assert_eq!(
        ::std::mem::align_of::<ExprState>(),
        8usize,
        concat!("Alignment of ", stringify!(ExprState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).resnull as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(resnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).resvalue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(resvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).resultslot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(resultslot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).steps as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).evalfunc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(evalfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).expr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).evalfunc_private as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(evalfunc_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).steps_len as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(steps_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).steps_alloc as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(steps_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).parent as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).ext_params as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(ext_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).innermost_caseval as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(innermost_caseval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).innermost_casenull as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(innermost_casenull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).innermost_domainval as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(innermost_domainval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).innermost_domainnull as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(innermost_domainnull)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexInfo {
    pub type_: NodeTag,
    pub ii_NumIndexAttrs: ::std::os::raw::c_int,
    pub ii_NumIndexKeyAttrs: ::std::os::raw::c_int,
    pub ii_IndexAttrNumbers: [AttrNumber; 32usize],
    pub ii_Expressions: *mut List,
    pub ii_ExpressionsState: *mut List,
    pub ii_Predicate: *mut List,
    pub ii_PredicateState: *mut ExprState,
    pub ii_ExclusionOps: *mut Oid,
    pub ii_ExclusionProcs: *mut Oid,
    pub ii_ExclusionStrats: *mut uint16,
    pub ii_UniqueOps: *mut Oid,
    pub ii_UniqueProcs: *mut Oid,
    pub ii_UniqueStrats: *mut uint16,
    pub ii_Unique: bool,
    pub ii_ReadyForInserts: bool,
    pub ii_Concurrent: bool,
    pub ii_BrokenHotChain: bool,
    pub ii_ParallelWorkers: ::std::os::raw::c_int,
    pub ii_Am: Oid,
    pub ii_AmCache: *mut ::std::os::raw::c_void,
    pub ii_Context: MemoryContext,
}
#[test]
fn bindgen_test_layout_IndexInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexInfo>(),
        192usize,
        concat!("Size of: ", stringify!(IndexInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_NumIndexAttrs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_NumIndexAttrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_NumIndexKeyAttrs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_NumIndexKeyAttrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_IndexAttrNumbers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_IndexAttrNumbers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Expressions as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Expressions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ExpressionsState as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ExpressionsState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Predicate as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Predicate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_PredicateState as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_PredicateState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ExclusionOps as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ExclusionOps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ExclusionProcs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ExclusionProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ExclusionStrats as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ExclusionStrats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_UniqueOps as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_UniqueOps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_UniqueProcs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_UniqueProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_UniqueStrats as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_UniqueStrats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Unique as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ReadyForInserts as *const _ as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ReadyForInserts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Concurrent as *const _ as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Concurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_BrokenHotChain as *const _ as usize },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_BrokenHotChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ParallelWorkers as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ParallelWorkers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Am as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Am)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_AmCache as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_AmCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Context as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Context)
        )
    );
}
pub type ExprContextCallbackFunction = ::std::option::Option<unsafe extern "C" fn(arg: Datum)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExprContext_CB {
    pub next: *mut ExprContext_CB,
    pub function: ExprContextCallbackFunction,
    pub arg: Datum,
}
#[test]
fn bindgen_test_layout_ExprContext_CB() {
    assert_eq!(
        ::std::mem::size_of::<ExprContext_CB>(),
        24usize,
        concat!("Size of: ", stringify!(ExprContext_CB))
    );
    assert_eq!(
        ::std::mem::align_of::<ExprContext_CB>(),
        8usize,
        concat!("Alignment of ", stringify!(ExprContext_CB))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext_CB>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext_CB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext_CB>())).function as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext_CB),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext_CB>())).arg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext_CB),
            "::",
            stringify!(arg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExprContext {
    pub type_: NodeTag,
    pub ecxt_scantuple: *mut TupleTableSlot,
    pub ecxt_innertuple: *mut TupleTableSlot,
    pub ecxt_outertuple: *mut TupleTableSlot,
    pub ecxt_per_query_memory: MemoryContext,
    pub ecxt_per_tuple_memory: MemoryContext,
    pub ecxt_param_exec_vals: *mut ParamExecData,
    pub ecxt_param_list_info: ParamListInfo,
    pub ecxt_aggvalues: *mut Datum,
    pub ecxt_aggnulls: *mut bool,
    pub caseValue_datum: Datum,
    pub caseValue_isNull: bool,
    pub domainValue_datum: Datum,
    pub domainValue_isNull: bool,
    pub ecxt_estate: *mut EState,
    pub ecxt_callbacks: *mut ExprContext_CB,
}
#[test]
fn bindgen_test_layout_ExprContext() {
    assert_eq!(
        ::std::mem::size_of::<ExprContext>(),
        128usize,
        concat!("Size of: ", stringify!(ExprContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ExprContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ExprContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_scantuple as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_scantuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_innertuple as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_innertuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_outertuple as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_outertuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExprContext>())).ecxt_per_query_memory as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_per_query_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExprContext>())).ecxt_per_tuple_memory as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_per_tuple_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExprContext>())).ecxt_param_exec_vals as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_param_exec_vals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExprContext>())).ecxt_param_list_info as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_param_list_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_aggvalues as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_aggvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_aggnulls as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_aggnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).caseValue_datum as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(caseValue_datum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).caseValue_isNull as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(caseValue_isNull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).domainValue_datum as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(domainValue_datum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).domainValue_isNull as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(domainValue_isNull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_estate as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_estate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_callbacks as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_callbacks)
        )
    );
}
pub const ExprDoneCond_ExprSingleResult: ExprDoneCond = 0;
pub const ExprDoneCond_ExprMultipleResult: ExprDoneCond = 1;
pub const ExprDoneCond_ExprEndResult: ExprDoneCond = 2;
pub type ExprDoneCond = u32;
pub const SetFunctionReturnMode_SFRM_ValuePerCall: SetFunctionReturnMode = 1;
pub const SetFunctionReturnMode_SFRM_Materialize: SetFunctionReturnMode = 2;
pub const SetFunctionReturnMode_SFRM_Materialize_Random: SetFunctionReturnMode = 4;
pub const SetFunctionReturnMode_SFRM_Materialize_Preferred: SetFunctionReturnMode = 8;
pub type SetFunctionReturnMode = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReturnSetInfo {
    pub type_: NodeTag,
    pub econtext: *mut ExprContext,
    pub expectedDesc: TupleDesc,
    pub allowedModes: ::std::os::raw::c_int,
    pub returnMode: SetFunctionReturnMode,
    pub isDone: ExprDoneCond,
    pub setResult: *mut Tuplestorestate,
    pub setDesc: TupleDesc,
}
#[test]
fn bindgen_test_layout_ReturnSetInfo() {
    assert_eq!(
        ::std::mem::size_of::<ReturnSetInfo>(),
        56usize,
        concat!("Size of: ", stringify!(ReturnSetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ReturnSetInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ReturnSetInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).econtext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(econtext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).expectedDesc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(expectedDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).allowedModes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(allowedModes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).returnMode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(returnMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).isDone as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(isDone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).setResult as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(setResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).setDesc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(setDesc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProjectionInfo {
    pub type_: NodeTag,
    pub pi_state: ExprState,
    pub pi_exprContext: *mut ExprContext,
}
#[test]
fn bindgen_test_layout_ProjectionInfo() {
    assert_eq!(
        ::std::mem::size_of::<ProjectionInfo>(),
        128usize,
        concat!("Size of: ", stringify!(ProjectionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ProjectionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ProjectionInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionInfo>())).pi_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionInfo),
            "::",
            stringify!(pi_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionInfo>())).pi_exprContext as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionInfo),
            "::",
            stringify!(pi_exprContext)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JunkFilter {
    pub type_: NodeTag,
    pub jf_targetList: *mut List,
    pub jf_cleanTupType: TupleDesc,
    pub jf_cleanMap: *mut AttrNumber,
    pub jf_resultSlot: *mut TupleTableSlot,
    pub jf_junkAttNo: AttrNumber,
}
#[test]
fn bindgen_test_layout_JunkFilter() {
    assert_eq!(
        ::std::mem::size_of::<JunkFilter>(),
        48usize,
        concat!("Size of: ", stringify!(JunkFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<JunkFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(JunkFilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_targetList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_cleanTupType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_cleanTupType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_cleanMap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_cleanMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_resultSlot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_resultSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_junkAttNo as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_junkAttNo)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OnConflictSetState {
    pub type_: NodeTag,
    pub oc_ProjInfo: *mut ProjectionInfo,
    pub oc_ProjTupdesc: TupleDesc,
    pub oc_WhereClause: *mut ExprState,
}
#[test]
fn bindgen_test_layout_OnConflictSetState() {
    assert_eq!(
        ::std::mem::size_of::<OnConflictSetState>(),
        32usize,
        concat!("Size of: ", stringify!(OnConflictSetState))
    );
    assert_eq!(
        ::std::mem::align_of::<OnConflictSetState>(),
        8usize,
        concat!("Alignment of ", stringify!(OnConflictSetState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictSetState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictSetState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictSetState>())).oc_ProjInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictSetState),
            "::",
            stringify!(oc_ProjInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OnConflictSetState>())).oc_ProjTupdesc as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictSetState),
            "::",
            stringify!(oc_ProjTupdesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OnConflictSetState>())).oc_WhereClause as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictSetState),
            "::",
            stringify!(oc_WhereClause)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ResultRelInfo {
    pub type_: NodeTag,
    pub ri_RangeTableIndex: Index,
    pub ri_RelationDesc: Relation,
    pub ri_NumIndices: ::std::os::raw::c_int,
    pub ri_IndexRelationDescs: RelationPtr,
    pub ri_IndexRelationInfo: *mut *mut IndexInfo,
    pub ri_TrigDesc: *mut TriggerDesc,
    pub ri_TrigFunctions: *mut FmgrInfo,
    pub ri_TrigWhenExprs: *mut *mut ExprState,
    pub ri_TrigInstrument: *mut Instrumentation,
    pub ri_FdwRoutine: *mut FdwRoutine,
    pub ri_FdwState: *mut ::std::os::raw::c_void,
    pub ri_usesFdwDirectModify: bool,
    pub ri_WithCheckOptions: *mut List,
    pub ri_WithCheckOptionExprs: *mut List,
    pub ri_ConstraintExprs: *mut *mut ExprState,
    pub ri_junkFilter: *mut JunkFilter,
    pub ri_returningList: *mut List,
    pub ri_projectReturning: *mut ProjectionInfo,
    pub ri_onConflictArbiterIndexes: *mut List,
    pub ri_onConflict: *mut OnConflictSetState,
    pub ri_PartitionCheck: *mut List,
    pub ri_PartitionCheckExpr: *mut ExprState,
    pub ri_PartitionRoot: Relation,
    pub ri_PartitionReadyForRouting: bool,
}
#[test]
fn bindgen_test_layout_ResultRelInfo() {
    assert_eq!(
        ::std::mem::size_of::<ResultRelInfo>(),
        192usize,
        concat!("Size of: ", stringify!(ResultRelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ResultRelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ResultRelInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_RangeTableIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_RangeTableIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_RelationDesc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_RelationDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_NumIndices as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_NumIndices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_IndexRelationDescs as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_IndexRelationDescs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_IndexRelationInfo as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_IndexRelationInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_TrigDesc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_TrigDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_TrigFunctions as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_TrigFunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_TrigWhenExprs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_TrigWhenExprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_TrigInstrument as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_TrigInstrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_FdwRoutine as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_FdwRoutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_FdwState as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_FdwState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_usesFdwDirectModify as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_usesFdwDirectModify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_WithCheckOptions as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_WithCheckOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_WithCheckOptionExprs as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_WithCheckOptionExprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_ConstraintExprs as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_ConstraintExprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_junkFilter as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_junkFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_returningList as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_returningList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_projectReturning as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_projectReturning)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_onConflictArbiterIndexes as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_onConflictArbiterIndexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_onConflict as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_onConflict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_PartitionCheck as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_PartitionCheck)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_PartitionCheckExpr as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_PartitionCheckExpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_PartitionRoot as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_PartitionRoot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_PartitionReadyForRouting as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_PartitionReadyForRouting)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EState {
    pub type_: NodeTag,
    pub es_direction: ScanDirection,
    pub es_snapshot: Snapshot,
    pub es_crosscheck_snapshot: Snapshot,
    pub es_range_table: *mut List,
    pub es_plannedstmt: *mut PlannedStmt,
    pub es_sourceText: *const ::std::os::raw::c_char,
    pub es_junkFilter: *mut JunkFilter,
    pub es_output_cid: CommandId,
    pub es_result_relations: *mut ResultRelInfo,
    pub es_num_result_relations: ::std::os::raw::c_int,
    pub es_result_relation_info: *mut ResultRelInfo,
    pub es_root_result_relations: *mut ResultRelInfo,
    pub es_num_root_result_relations: ::std::os::raw::c_int,
    pub es_tuple_routing_result_relations: *mut List,
    pub es_trig_target_relations: *mut List,
    pub es_trig_tuple_slot: *mut TupleTableSlot,
    pub es_trig_oldtup_slot: *mut TupleTableSlot,
    pub es_trig_newtup_slot: *mut TupleTableSlot,
    pub es_param_list_info: ParamListInfo,
    pub es_param_exec_vals: *mut ParamExecData,
    pub es_queryEnv: *mut QueryEnvironment,
    pub es_query_cxt: MemoryContext,
    pub es_tupleTable: *mut List,
    pub es_rowMarks: *mut List,
    pub es_processed: uint64,
    pub es_lastoid: Oid,
    pub es_top_eflags: ::std::os::raw::c_int,
    pub es_instrument: ::std::os::raw::c_int,
    pub es_finished: bool,
    pub es_exprcontexts: *mut List,
    pub es_subplanstates: *mut List,
    pub es_auxmodifytables: *mut List,
    pub es_per_tuple_exprcontext: *mut ExprContext,
    pub es_epqTuple: *mut HeapTuple,
    pub es_epqTupleSet: *mut bool,
    pub es_epqScanDone: *mut bool,
    pub es_use_parallel_mode: bool,
    pub es_query_dsa: *mut dsa_area,
    pub es_jit_flags: ::std::os::raw::c_int,
    pub es_jit: *mut JitContext,
    pub es_jit_worker_instr: *mut JitInstrumentation,
}
#[test]
fn bindgen_test_layout_EState() {
    assert_eq!(
        ::std::mem::size_of::<EState>(),
        312usize,
        concat!("Size of: ", stringify!(EState))
    );
    assert_eq!(
        ::std::mem::align_of::<EState>(),
        8usize,
        concat!("Alignment of ", stringify!(EState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_snapshot as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_snapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_crosscheck_snapshot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_crosscheck_snapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_range_table as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_range_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_plannedstmt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_plannedstmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_sourceText as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_sourceText)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_junkFilter as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_junkFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_output_cid as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_output_cid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_result_relations as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_result_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_num_result_relations as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_num_result_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_result_relation_info as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_result_relation_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_root_result_relations as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_root_result_relations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EState>())).es_num_root_result_relations as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_num_root_result_relations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EState>())).es_tuple_routing_result_relations as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_tuple_routing_result_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_trig_target_relations as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_trig_target_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_trig_tuple_slot as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_trig_tuple_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_trig_oldtup_slot as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_trig_oldtup_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_trig_newtup_slot as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_trig_newtup_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_param_list_info as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_param_list_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_param_exec_vals as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_param_exec_vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_queryEnv as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_queryEnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_query_cxt as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_query_cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_tupleTable as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_tupleTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_rowMarks as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_processed as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_processed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_lastoid as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_lastoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_top_eflags as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_top_eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_instrument as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_instrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_finished as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_finished)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_exprcontexts as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_exprcontexts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_subplanstates as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_subplanstates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_auxmodifytables as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_auxmodifytables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_per_tuple_exprcontext as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_per_tuple_exprcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_epqTuple as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_epqTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_epqTupleSet as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_epqTupleSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_epqScanDone as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_epqScanDone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_use_parallel_mode as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_use_parallel_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_query_dsa as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_query_dsa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_jit_flags as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_jit_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_jit as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_jit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_jit_worker_instr as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_jit_worker_instr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExecRowMark {
    pub relation: Relation,
    pub relid: Oid,
    pub rti: Index,
    pub prti: Index,
    pub rowmarkId: Index,
    pub markType: RowMarkType,
    pub strength: LockClauseStrength,
    pub waitPolicy: LockWaitPolicy,
    pub ermActive: bool,
    pub curCtid: ItemPointerData,
    pub ermExtra: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ExecRowMark() {
    assert_eq!(
        ::std::mem::size_of::<ExecRowMark>(),
        56usize,
        concat!("Size of: ", stringify!(ExecRowMark))
    );
    assert_eq!(
        ::std::mem::align_of::<ExecRowMark>(),
        8usize,
        concat!("Alignment of ", stringify!(ExecRowMark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).relation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).relid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).rti as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(rti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).prti as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(prti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).rowmarkId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(rowmarkId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).markType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(markType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).strength as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).waitPolicy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(waitPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).ermActive as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(ermActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).curCtid as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(curCtid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).ermExtra as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(ermExtra)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExecAuxRowMark {
    pub rowmark: *mut ExecRowMark,
    pub ctidAttNo: AttrNumber,
    pub toidAttNo: AttrNumber,
    pub wholeAttNo: AttrNumber,
}
#[test]
fn bindgen_test_layout_ExecAuxRowMark() {
    assert_eq!(
        ::std::mem::size_of::<ExecAuxRowMark>(),
        16usize,
        concat!("Size of: ", stringify!(ExecAuxRowMark))
    );
    assert_eq!(
        ::std::mem::align_of::<ExecAuxRowMark>(),
        8usize,
        concat!("Alignment of ", stringify!(ExecAuxRowMark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecAuxRowMark>())).rowmark as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecAuxRowMark),
            "::",
            stringify!(rowmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecAuxRowMark>())).ctidAttNo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecAuxRowMark),
            "::",
            stringify!(ctidAttNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecAuxRowMark>())).toidAttNo as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecAuxRowMark),
            "::",
            stringify!(toidAttNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecAuxRowMark>())).wholeAttNo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecAuxRowMark),
            "::",
            stringify!(wholeAttNo)
        )
    );
}
pub type TupleHashEntry = *mut TupleHashEntryData;
pub type TupleHashTable = *mut TupleHashTableData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TupleHashEntryData {
    pub firstTuple: MinimalTuple,
    pub additional: *mut ::std::os::raw::c_void,
    pub status: uint32,
    pub hash: uint32,
}
#[test]
fn bindgen_test_layout_TupleHashEntryData() {
    assert_eq!(
        ::std::mem::size_of::<TupleHashEntryData>(),
        24usize,
        concat!("Size of: ", stringify!(TupleHashEntryData))
    );
    assert_eq!(
        ::std::mem::align_of::<TupleHashEntryData>(),
        8usize,
        concat!("Alignment of ", stringify!(TupleHashEntryData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashEntryData>())).firstTuple as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashEntryData),
            "::",
            stringify!(firstTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashEntryData>())).additional as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashEntryData),
            "::",
            stringify!(additional)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashEntryData>())).status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashEntryData),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashEntryData>())).hash as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashEntryData),
            "::",
            stringify!(hash)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tuplehash_hash {
    pub size: uint64,
    pub members: uint32,
    pub sizemask: uint32,
    pub grow_threshold: uint32,
    pub data: *mut TupleHashEntryData,
    pub ctx: MemoryContext,
    pub private_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tuplehash_hash() {
    assert_eq!(
        ::std::mem::size_of::<tuplehash_hash>(),
        48usize,
        concat!("Size of: ", stringify!(tuplehash_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<tuplehash_hash>(),
        8usize,
        concat!("Alignment of ", stringify!(tuplehash_hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).members as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).sizemask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(sizemask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).grow_threshold as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(grow_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).ctx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).private_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(private_data)
        )
    );
}
pub const tuplehash_status_tuplehash_EMPTY: tuplehash_status = 0;
pub const tuplehash_status_tuplehash_IN_USE: tuplehash_status = 1;
pub type tuplehash_status = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tuplehash_iterator {
    pub cur: uint32,
    pub end: uint32,
    pub done: bool,
}
#[test]
fn bindgen_test_layout_tuplehash_iterator() {
    assert_eq!(
        ::std::mem::size_of::<tuplehash_iterator>(),
        12usize,
        concat!("Size of: ", stringify!(tuplehash_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<tuplehash_iterator>(),
        4usize,
        concat!("Alignment of ", stringify!(tuplehash_iterator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_iterator>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_iterator),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_iterator>())).end as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_iterator),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_iterator>())).done as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_iterator),
            "::",
            stringify!(done)
        )
    );
}
extern "C" {
    pub fn tuplehash_create(
        ctx: MemoryContext,
        nelements: uint32,
        private_data: *mut ::std::os::raw::c_void,
    ) -> *mut tuplehash_hash;
}
extern "C" {
    pub fn tuplehash_destroy(tb: *mut tuplehash_hash);
}
extern "C" {
    pub fn tuplehash_reset(tb: *mut tuplehash_hash);
}
extern "C" {
    pub fn tuplehash_grow(tb: *mut tuplehash_hash, newsize: uint32);
}
extern "C" {
    pub fn tuplehash_insert(
        tb: *mut tuplehash_hash,
        key: MinimalTuple,
        found: *mut bool,
    ) -> *mut TupleHashEntryData;
}
extern "C" {
    pub fn tuplehash_lookup(tb: *mut tuplehash_hash, key: MinimalTuple) -> *mut TupleHashEntryData;
}
extern "C" {
    pub fn tuplehash_delete(tb: *mut tuplehash_hash, key: MinimalTuple) -> bool;
}
extern "C" {
    pub fn tuplehash_start_iterate(tb: *mut tuplehash_hash, iter: *mut tuplehash_iterator);
}
extern "C" {
    pub fn tuplehash_start_iterate_at(
        tb: *mut tuplehash_hash,
        iter: *mut tuplehash_iterator,
        at: uint32,
    );
}
extern "C" {
    pub fn tuplehash_iterate(
        tb: *mut tuplehash_hash,
        iter: *mut tuplehash_iterator,
    ) -> *mut TupleHashEntryData;
}
extern "C" {
    pub fn tuplehash_stat(tb: *mut tuplehash_hash);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TupleHashTableData {
    pub hashtab: *mut tuplehash_hash,
    pub numCols: ::std::os::raw::c_int,
    pub keyColIdx: *mut AttrNumber,
    pub tab_hash_funcs: *mut FmgrInfo,
    pub tab_eq_func: *mut ExprState,
    pub tablecxt: MemoryContext,
    pub tempcxt: MemoryContext,
    pub entrysize: Size,
    pub tableslot: *mut TupleTableSlot,
    pub inputslot: *mut TupleTableSlot,
    pub in_hash_funcs: *mut FmgrInfo,
    pub cur_eq_func: *mut ExprState,
    pub hash_iv: uint32,
    pub exprcontext: *mut ExprContext,
}
#[test]
fn bindgen_test_layout_TupleHashTableData() {
    assert_eq!(
        ::std::mem::size_of::<TupleHashTableData>(),
        112usize,
        concat!("Size of: ", stringify!(TupleHashTableData))
    );
    assert_eq!(
        ::std::mem::align_of::<TupleHashTableData>(),
        8usize,
        concat!("Alignment of ", stringify!(TupleHashTableData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).hashtab as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(hashtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).numCols as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).keyColIdx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(keyColIdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleHashTableData>())).tab_hash_funcs as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tab_hash_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).tab_eq_func as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tab_eq_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).tablecxt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tablecxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).tempcxt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tempcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).entrysize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(entrysize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).tableslot as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tableslot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).inputslot as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(inputslot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleHashTableData>())).in_hash_funcs as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(in_hash_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).cur_eq_func as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(cur_eq_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).hash_iv as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(hash_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).exprcontext as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(exprcontext)
        )
    );
}
pub type TupleHashIterator = tuplehash_iterator;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggrefExprState {
    pub type_: NodeTag,
    pub aggref: *mut Aggref,
    pub aggno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AggrefExprState() {
    assert_eq!(
        ::std::mem::size_of::<AggrefExprState>(),
        24usize,
        concat!("Size of: ", stringify!(AggrefExprState))
    );
    assert_eq!(
        ::std::mem::align_of::<AggrefExprState>(),
        8usize,
        concat!("Alignment of ", stringify!(AggrefExprState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggrefExprState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AggrefExprState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggrefExprState>())).aggref as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AggrefExprState),
            "::",
            stringify!(aggref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggrefExprState>())).aggno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AggrefExprState),
            "::",
            stringify!(aggno)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowFuncExprState {
    pub type_: NodeTag,
    pub wfunc: *mut WindowFunc,
    pub args: *mut List,
    pub aggfilter: *mut ExprState,
    pub wfuncno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WindowFuncExprState() {
    assert_eq!(
        ::std::mem::size_of::<WindowFuncExprState>(),
        40usize,
        concat!("Size of: ", stringify!(WindowFuncExprState))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowFuncExprState>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowFuncExprState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).wfunc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(wfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).aggfilter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(aggfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).wfuncno as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(wfuncno)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SetExprState {
    pub type_: NodeTag,
    pub expr: *mut Expr,
    pub args: *mut List,
    pub elidedFuncState: *mut ExprState,
    pub func: FmgrInfo,
    pub funcResultStore: *mut Tuplestorestate,
    pub funcResultSlot: *mut TupleTableSlot,
    pub funcResultDesc: TupleDesc,
    pub funcReturnsTuple: bool,
    pub funcReturnsSet: bool,
    pub setArgsValid: bool,
    pub shutdown_reg: bool,
    pub fcinfo_data: FunctionCallInfoData,
}
#[test]
fn bindgen_test_layout_SetExprState() {
    assert_eq!(
        ::std::mem::size_of::<SetExprState>(),
        1048usize,
        concat!("Size of: ", stringify!(SetExprState))
    );
    assert_eq!(
        ::std::mem::align_of::<SetExprState>(),
        8usize,
        concat!("Alignment of ", stringify!(SetExprState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).elidedFuncState as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(elidedFuncState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).func as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcResultStore as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcResultStore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcResultSlot as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcResultSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcResultDesc as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcResultDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcReturnsTuple as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcReturnsTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcReturnsSet as *const _ as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcReturnsSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).setArgsValid as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(setArgsValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).shutdown_reg as *const _ as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(shutdown_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).fcinfo_data as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(fcinfo_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SubPlanState {
    pub type_: NodeTag,
    pub subplan: *mut SubPlan,
    pub planstate: *mut PlanState,
    pub parent: *mut PlanState,
    pub testexpr: *mut ExprState,
    pub args: *mut List,
    pub curTuple: HeapTuple,
    pub curArray: Datum,
    pub descRight: TupleDesc,
    pub projLeft: *mut ProjectionInfo,
    pub projRight: *mut ProjectionInfo,
    pub hashtable: TupleHashTable,
    pub hashnulls: TupleHashTable,
    pub havehashrows: bool,
    pub havenullrows: bool,
    pub hashtablecxt: MemoryContext,
    pub hashtempcxt: MemoryContext,
    pub innerecontext: *mut ExprContext,
    pub keyColIdx: *mut AttrNumber,
    pub tab_eq_funcoids: *mut Oid,
    pub tab_hash_funcs: *mut FmgrInfo,
    pub tab_eq_funcs: *mut FmgrInfo,
    pub lhs_hash_funcs: *mut FmgrInfo,
    pub cur_eq_funcs: *mut FmgrInfo,
    pub cur_eq_comp: *mut ExprState,
}
#[test]
fn bindgen_test_layout_SubPlanState() {
    assert_eq!(
        ::std::mem::size_of::<SubPlanState>(),
        192usize,
        concat!("Size of: ", stringify!(SubPlanState))
    );
    assert_eq!(
        ::std::mem::align_of::<SubPlanState>(),
        8usize,
        concat!("Alignment of ", stringify!(SubPlanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).subplan as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(subplan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).planstate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(planstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).parent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).testexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(testexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).args as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).curTuple as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(curTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).curArray as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(curArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).descRight as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(descRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).projLeft as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(projLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).projRight as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(projRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).hashtable as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(hashtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).hashnulls as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(hashnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).havehashrows as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(havehashrows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).havenullrows as *const _ as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(havenullrows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).hashtablecxt as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(hashtablecxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).hashtempcxt as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(hashtempcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).innerecontext as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(innerecontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).keyColIdx as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(keyColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).tab_eq_funcoids as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(tab_eq_funcoids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).tab_hash_funcs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(tab_hash_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).tab_eq_funcs as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(tab_eq_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).lhs_hash_funcs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(lhs_hash_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).cur_eq_funcs as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(cur_eq_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).cur_eq_comp as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(cur_eq_comp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlternativeSubPlanState {
    pub type_: NodeTag,
    pub subplan: *mut AlternativeSubPlan,
    pub subplans: *mut List,
    pub active: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AlternativeSubPlanState() {
    assert_eq!(
        ::std::mem::size_of::<AlternativeSubPlanState>(),
        32usize,
        concat!("Size of: ", stringify!(AlternativeSubPlanState))
    );
    assert_eq!(
        ::std::mem::align_of::<AlternativeSubPlanState>(),
        8usize,
        concat!("Alignment of ", stringify!(AlternativeSubPlanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlanState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlanState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlanState>())).subplan as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlanState),
            "::",
            stringify!(subplan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlternativeSubPlanState>())).subplans as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlanState),
            "::",
            stringify!(subplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlanState>())).active as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlanState),
            "::",
            stringify!(active)
        )
    );
}
pub const DomainConstraintType_DOM_CONSTRAINT_NOTNULL: DomainConstraintType = 0;
pub const DomainConstraintType_DOM_CONSTRAINT_CHECK: DomainConstraintType = 1;
pub type DomainConstraintType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DomainConstraintState {
    pub type_: NodeTag,
    pub constrainttype: DomainConstraintType,
    pub name: *mut ::std::os::raw::c_char,
    pub check_expr: *mut Expr,
    pub check_exprstate: *mut ExprState,
}
#[test]
fn bindgen_test_layout_DomainConstraintState() {
    assert_eq!(
        ::std::mem::size_of::<DomainConstraintState>(),
        32usize,
        concat!("Size of: ", stringify!(DomainConstraintState))
    );
    assert_eq!(
        ::std::mem::align_of::<DomainConstraintState>(),
        8usize,
        concat!("Alignment of ", stringify!(DomainConstraintState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DomainConstraintState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DomainConstraintState>())).constrainttype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(constrainttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DomainConstraintState>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DomainConstraintState>())).check_expr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(check_expr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DomainConstraintState>())).check_exprstate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(check_exprstate)
        )
    );
}
pub type ExecProcNodeMtd =
    ::std::option::Option<unsafe extern "C" fn(pstate: *mut PlanState) -> *mut TupleTableSlot>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlanState {
    pub type_: NodeTag,
    pub plan: *mut Plan,
    pub state: *mut EState,
    pub ExecProcNode: ExecProcNodeMtd,
    pub ExecProcNodeReal: ExecProcNodeMtd,
    pub instrument: *mut Instrumentation,
    pub worker_instrument: *mut WorkerInstrumentation,
    pub worker_jit_instrument: *mut SharedJitInstrumentation,
    pub qual: *mut ExprState,
    pub lefttree: *mut PlanState,
    pub righttree: *mut PlanState,
    pub initPlan: *mut List,
    pub subPlan: *mut List,
    pub chgParam: *mut Bitmapset,
    pub ps_ResultTupleSlot: *mut TupleTableSlot,
    pub ps_ExprContext: *mut ExprContext,
    pub ps_ProjInfo: *mut ProjectionInfo,
    pub scandesc: TupleDesc,
}
#[test]
fn bindgen_test_layout_PlanState() {
    assert_eq!(
        ::std::mem::size_of::<PlanState>(),
        144usize,
        concat!("Size of: ", stringify!(PlanState))
    );
    assert_eq!(
        ::std::mem::align_of::<PlanState>(),
        8usize,
        concat!("Alignment of ", stringify!(PlanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).plan as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ExecProcNode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ExecProcNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ExecProcNodeReal as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ExecProcNodeReal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).instrument as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(instrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).worker_instrument as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(worker_instrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).worker_jit_instrument as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(worker_jit_instrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).qual as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).lefttree as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(lefttree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).righttree as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(righttree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).initPlan as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(initPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).subPlan as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(subPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).chgParam as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(chgParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ps_ResultTupleSlot as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ps_ResultTupleSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ps_ExprContext as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ps_ExprContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ps_ProjInfo as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ps_ProjInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).scandesc as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(scandesc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EPQState {
    pub estate: *mut EState,
    pub planstate: *mut PlanState,
    pub origslot: *mut TupleTableSlot,
    pub plan: *mut Plan,
    pub arowMarks: *mut List,
    pub epqParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_EPQState() {
    assert_eq!(
        ::std::mem::size_of::<EPQState>(),
        48usize,
        concat!("Size of: ", stringify!(EPQState))
    );
    assert_eq!(
        ::std::mem::align_of::<EPQState>(),
        8usize,
        concat!("Alignment of ", stringify!(EPQState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).estate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(estate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).planstate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(planstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).origslot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(origslot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).plan as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).arowMarks as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(arowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).epqParam as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(epqParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ResultState {
    pub ps: PlanState,
    pub resconstantqual: *mut ExprState,
    pub rs_done: bool,
    pub rs_checkqual: bool,
}
#[test]
fn bindgen_test_layout_ResultState() {
    assert_eq!(
        ::std::mem::size_of::<ResultState>(),
        160usize,
        concat!("Size of: ", stringify!(ResultState))
    );
    assert_eq!(
        ::std::mem::align_of::<ResultState>(),
        8usize,
        concat!("Alignment of ", stringify!(ResultState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultState>())).resconstantqual as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultState),
            "::",
            stringify!(resconstantqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultState>())).rs_done as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultState),
            "::",
            stringify!(rs_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultState>())).rs_checkqual as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultState),
            "::",
            stringify!(rs_checkqual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProjectSetState {
    pub ps: PlanState,
    pub elems: *mut *mut Node,
    pub elemdone: *mut ExprDoneCond,
    pub nelems: ::std::os::raw::c_int,
    pub pending_srf_tuples: bool,
    pub argcontext: MemoryContext,
}
#[test]
fn bindgen_test_layout_ProjectSetState() {
    assert_eq!(
        ::std::mem::size_of::<ProjectSetState>(),
        176usize,
        concat!("Size of: ", stringify!(ProjectSetState))
    );
    assert_eq!(
        ::std::mem::align_of::<ProjectSetState>(),
        8usize,
        concat!("Alignment of ", stringify!(ProjectSetState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).elems as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(elems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).elemdone as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(elemdone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).nelems as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(nelems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProjectSetState>())).pending_srf_tuples as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(pending_srf_tuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).argcontext as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(argcontext)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ModifyTableState {
    pub ps: PlanState,
    pub operation: CmdType,
    pub canSetTag: bool,
    pub mt_done: bool,
    pub mt_plans: *mut *mut PlanState,
    pub mt_nplans: ::std::os::raw::c_int,
    pub mt_whichplan: ::std::os::raw::c_int,
    pub resultRelInfo: *mut ResultRelInfo,
    pub rootResultRelInfo: *mut ResultRelInfo,
    pub mt_arowmarks: *mut *mut List,
    pub mt_epqstate: EPQState,
    pub fireBSTriggers: bool,
    pub mt_existing: *mut TupleTableSlot,
    pub mt_excludedtlist: *mut List,
    pub mt_conflproj: *mut TupleTableSlot,
    pub mt_partition_tuple_routing: *mut PartitionTupleRouting,
    pub mt_transition_capture: *mut TransitionCaptureState,
    pub mt_oc_transition_capture: *mut TransitionCaptureState,
    pub mt_per_subplan_tupconv_maps: *mut *mut TupleConversionMap,
}
#[test]
fn bindgen_test_layout_ModifyTableState() {
    assert_eq!(
        ::std::mem::size_of::<ModifyTableState>(),
        304usize,
        concat!("Size of: ", stringify!(ModifyTableState))
    );
    assert_eq!(
        ::std::mem::align_of::<ModifyTableState>(),
        8usize,
        concat!("Alignment of ", stringify!(ModifyTableState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).operation as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).canSetTag as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_done as *const _ as usize },
        149usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_plans as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_plans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_nplans as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_nplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_whichplan as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_whichplan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).resultRelInfo as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(resultRelInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).rootResultRelInfo as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(rootResultRelInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_arowmarks as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_arowmarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_epqstate as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_epqstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).fireBSTriggers as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(fireBSTriggers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_existing as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_existing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_excludedtlist as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_excludedtlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_conflproj as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_conflproj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_partition_tuple_routing as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_partition_tuple_routing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_transition_capture as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_transition_capture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_oc_transition_capture as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_oc_transition_capture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_per_subplan_tupconv_maps as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_per_subplan_tupconv_maps)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParallelAppendState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionPruneState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AppendState {
    pub ps: PlanState,
    pub appendplans: *mut *mut PlanState,
    pub as_nplans: ::std::os::raw::c_int,
    pub as_whichplan: ::std::os::raw::c_int,
    pub as_first_partial_plan: ::std::os::raw::c_int,
    pub as_pstate: *mut ParallelAppendState,
    pub pstate_len: Size,
    pub as_prune_state: *mut PartitionPruneState,
    pub as_valid_subplans: *mut Bitmapset,
    pub choose_next_subplan:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut AppendState) -> bool>,
}
#[test]
fn bindgen_test_layout_AppendState() {
    assert_eq!(
        ::std::mem::size_of::<AppendState>(),
        208usize,
        concat!("Size of: ", stringify!(AppendState))
    );
    assert_eq!(
        ::std::mem::align_of::<AppendState>(),
        8usize,
        concat!("Alignment of ", stringify!(AppendState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).appendplans as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(appendplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).as_nplans as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(as_nplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).as_whichplan as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(as_whichplan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AppendState>())).as_first_partial_plan as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(as_first_partial_plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).as_pstate as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(as_pstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).pstate_len as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(pstate_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).as_prune_state as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(as_prune_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).as_valid_subplans as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(as_valid_subplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).choose_next_subplan as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(choose_next_subplan)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MergeAppendState {
    pub ps: PlanState,
    pub mergeplans: *mut *mut PlanState,
    pub ms_nplans: ::std::os::raw::c_int,
    pub ms_nkeys: ::std::os::raw::c_int,
    pub ms_sortkeys: SortSupport,
    pub ms_slots: *mut *mut TupleTableSlot,
    pub ms_heap: *mut binaryheap,
    pub ms_initialized: bool,
}
#[test]
fn bindgen_test_layout_MergeAppendState() {
    assert_eq!(
        ::std::mem::size_of::<MergeAppendState>(),
        192usize,
        concat!("Size of: ", stringify!(MergeAppendState))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeAppendState>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeAppendState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).mergeplans as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(mergeplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_nplans as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_nplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_nkeys as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_nkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_sortkeys as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_sortkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_slots as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_heap as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_initialized as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_initialized)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RecursiveUnionState {
    pub ps: PlanState,
    pub recursing: bool,
    pub intermediate_empty: bool,
    pub working_table: *mut Tuplestorestate,
    pub intermediate_table: *mut Tuplestorestate,
    pub eqfuncoids: *mut Oid,
    pub hashfunctions: *mut FmgrInfo,
    pub tempContext: MemoryContext,
    pub hashtable: TupleHashTable,
    pub tableContext: MemoryContext,
}
#[test]
fn bindgen_test_layout_RecursiveUnionState() {
    assert_eq!(
        ::std::mem::size_of::<RecursiveUnionState>(),
        208usize,
        concat!("Size of: ", stringify!(RecursiveUnionState))
    );
    assert_eq!(
        ::std::mem::align_of::<RecursiveUnionState>(),
        8usize,
        concat!("Alignment of ", stringify!(RecursiveUnionState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).recursing as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(recursing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).intermediate_empty as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(intermediate_empty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).working_table as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(working_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).intermediate_table as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(intermediate_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).eqfuncoids as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(eqfuncoids)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).hashfunctions as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(hashfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).tempContext as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(tempContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).hashtable as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(hashtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).tableContext as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(tableContext)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapAndState {
    pub ps: PlanState,
    pub bitmapplans: *mut *mut PlanState,
    pub nplans: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BitmapAndState() {
    assert_eq!(
        ::std::mem::size_of::<BitmapAndState>(),
        160usize,
        concat!("Size of: ", stringify!(BitmapAndState))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapAndState>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapAndState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndState>())).bitmapplans as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndState),
            "::",
            stringify!(bitmapplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndState>())).nplans as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndState),
            "::",
            stringify!(nplans)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapOrState {
    pub ps: PlanState,
    pub bitmapplans: *mut *mut PlanState,
    pub nplans: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BitmapOrState() {
    assert_eq!(
        ::std::mem::size_of::<BitmapOrState>(),
        160usize,
        concat!("Size of: ", stringify!(BitmapOrState))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapOrState>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapOrState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrState>())).bitmapplans as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrState),
            "::",
            stringify!(bitmapplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrState>())).nplans as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrState),
            "::",
            stringify!(nplans)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ScanState {
    pub ps: PlanState,
    pub ss_currentRelation: Relation,
    pub ss_currentScanDesc: HeapScanDesc,
    pub ss_ScanTupleSlot: *mut TupleTableSlot,
}
#[test]
fn bindgen_test_layout_ScanState() {
    assert_eq!(
        ::std::mem::size_of::<ScanState>(),
        168usize,
        concat!("Size of: ", stringify!(ScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<ScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(ScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanState>())).ss_currentRelation as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanState),
            "::",
            stringify!(ss_currentRelation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanState>())).ss_currentScanDesc as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanState),
            "::",
            stringify!(ss_currentScanDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanState>())).ss_ScanTupleSlot as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanState),
            "::",
            stringify!(ss_ScanTupleSlot)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SeqScanState {
    pub ss: ScanState,
    pub pscan_len: Size,
}
#[test]
fn bindgen_test_layout_SeqScanState() {
    assert_eq!(
        ::std::mem::size_of::<SeqScanState>(),
        176usize,
        concat!("Size of: ", stringify!(SeqScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<SeqScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(SeqScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SeqScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SeqScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SeqScanState>())).pscan_len as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SeqScanState),
            "::",
            stringify!(pscan_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SampleScanState {
    pub ss: ScanState,
    pub args: *mut List,
    pub repeatable: *mut ExprState,
    pub tsmroutine: *mut TsmRoutine,
    pub tsm_state: *mut ::std::os::raw::c_void,
    pub use_bulkread: bool,
    pub use_pagemode: bool,
    pub begun: bool,
    pub seed: uint32,
}
#[test]
fn bindgen_test_layout_SampleScanState() {
    assert_eq!(
        ::std::mem::size_of::<SampleScanState>(),
        208usize,
        concat!("Size of: ", stringify!(SampleScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<SampleScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(SampleScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).args as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).repeatable as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(repeatable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).tsmroutine as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(tsmroutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).tsm_state as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(tsm_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).use_bulkread as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(use_bulkread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).use_pagemode as *const _ as usize },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(use_pagemode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).begun as *const _ as usize },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(begun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).seed as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(seed)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexRuntimeKeyInfo {
    pub scan_key: ScanKey,
    pub key_expr: *mut ExprState,
    pub key_toastable: bool,
}
#[test]
fn bindgen_test_layout_IndexRuntimeKeyInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexRuntimeKeyInfo>(),
        24usize,
        concat!("Size of: ", stringify!(IndexRuntimeKeyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexRuntimeKeyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexRuntimeKeyInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexRuntimeKeyInfo>())).scan_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexRuntimeKeyInfo),
            "::",
            stringify!(scan_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexRuntimeKeyInfo>())).key_expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexRuntimeKeyInfo),
            "::",
            stringify!(key_expr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexRuntimeKeyInfo>())).key_toastable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexRuntimeKeyInfo),
            "::",
            stringify!(key_toastable)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexArrayKeyInfo {
    pub scan_key: ScanKey,
    pub array_expr: *mut ExprState,
    pub next_elem: ::std::os::raw::c_int,
    pub num_elems: ::std::os::raw::c_int,
    pub elem_values: *mut Datum,
    pub elem_nulls: *mut bool,
}
#[test]
fn bindgen_test_layout_IndexArrayKeyInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexArrayKeyInfo>(),
        40usize,
        concat!("Size of: ", stringify!(IndexArrayKeyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexArrayKeyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexArrayKeyInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).scan_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(scan_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).array_expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(array_expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).next_elem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(next_elem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).num_elems as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(num_elems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).elem_values as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(elem_values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).elem_nulls as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(elem_nulls)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexScanState {
    pub ss: ScanState,
    pub indexqualorig: *mut ExprState,
    pub indexorderbyorig: *mut List,
    pub iss_ScanKeys: ScanKey,
    pub iss_NumScanKeys: ::std::os::raw::c_int,
    pub iss_OrderByKeys: ScanKey,
    pub iss_NumOrderByKeys: ::std::os::raw::c_int,
    pub iss_RuntimeKeys: *mut IndexRuntimeKeyInfo,
    pub iss_NumRuntimeKeys: ::std::os::raw::c_int,
    pub iss_RuntimeKeysReady: bool,
    pub iss_RuntimeContext: *mut ExprContext,
    pub iss_RelationDesc: Relation,
    pub iss_ScanDesc: IndexScanDesc,
    pub iss_ReorderQueue: *mut pairingheap,
    pub iss_ReachedEnd: bool,
    pub iss_OrderByValues: *mut Datum,
    pub iss_OrderByNulls: *mut bool,
    pub iss_SortSupport: SortSupport,
    pub iss_OrderByTypByVals: *mut bool,
    pub iss_OrderByTypLens: *mut int16,
    pub iss_PscanLen: Size,
}
#[test]
fn bindgen_test_layout_IndexScanState() {
    assert_eq!(
        ::std::mem::size_of::<IndexScanState>(),
        320usize,
        concat!("Size of: ", stringify!(IndexScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).indexqualorig as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(indexqualorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).indexorderbyorig as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(indexorderbyorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_ScanKeys as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_ScanKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_NumScanKeys as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_NumScanKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByKeys as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_NumOrderByKeys as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_NumOrderByKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_RuntimeKeys as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_RuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_NumRuntimeKeys as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_NumRuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_RuntimeKeysReady as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_RuntimeKeysReady)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_RuntimeContext as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_RuntimeContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_RelationDesc as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_RelationDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_ScanDesc as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_ScanDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_ReorderQueue as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_ReorderQueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_ReachedEnd as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_ReachedEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByValues as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByNulls as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByNulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_SortSupport as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_SortSupport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByTypByVals as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByTypByVals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByTypLens as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByTypLens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_PscanLen as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_PscanLen)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexOnlyScanState {
    pub ss: ScanState,
    pub indexqual: *mut ExprState,
    pub ioss_ScanKeys: ScanKey,
    pub ioss_NumScanKeys: ::std::os::raw::c_int,
    pub ioss_OrderByKeys: ScanKey,
    pub ioss_NumOrderByKeys: ::std::os::raw::c_int,
    pub ioss_RuntimeKeys: *mut IndexRuntimeKeyInfo,
    pub ioss_NumRuntimeKeys: ::std::os::raw::c_int,
    pub ioss_RuntimeKeysReady: bool,
    pub ioss_RuntimeContext: *mut ExprContext,
    pub ioss_RelationDesc: Relation,
    pub ioss_ScanDesc: IndexScanDesc,
    pub ioss_VMBuffer: Buffer,
    pub ioss_PscanLen: Size,
}
#[test]
fn bindgen_test_layout_IndexOnlyScanState() {
    assert_eq!(
        ::std::mem::size_of::<IndexOnlyScanState>(),
        264usize,
        concat!("Size of: ", stringify!(IndexOnlyScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexOnlyScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexOnlyScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScanState>())).indexqual as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(indexqual)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_ScanKeys as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_ScanKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_NumScanKeys as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_NumScanKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_OrderByKeys as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_OrderByKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_NumOrderByKeys as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_NumOrderByKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_RuntimeKeys as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_RuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_NumRuntimeKeys as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_NumRuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_RuntimeKeysReady as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_RuntimeKeysReady)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_RuntimeContext as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_RuntimeContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_RelationDesc as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_RelationDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_ScanDesc as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_ScanDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_VMBuffer as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_VMBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_PscanLen as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_PscanLen)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapIndexScanState {
    pub ss: ScanState,
    pub biss_result: *mut TIDBitmap,
    pub biss_ScanKeys: ScanKey,
    pub biss_NumScanKeys: ::std::os::raw::c_int,
    pub biss_RuntimeKeys: *mut IndexRuntimeKeyInfo,
    pub biss_NumRuntimeKeys: ::std::os::raw::c_int,
    pub biss_ArrayKeys: *mut IndexArrayKeyInfo,
    pub biss_NumArrayKeys: ::std::os::raw::c_int,
    pub biss_RuntimeKeysReady: bool,
    pub biss_RuntimeContext: *mut ExprContext,
    pub biss_RelationDesc: Relation,
    pub biss_ScanDesc: IndexScanDesc,
}
#[test]
fn bindgen_test_layout_BitmapIndexScanState() {
    assert_eq!(
        ::std::mem::size_of::<BitmapIndexScanState>(),
        248usize,
        concat!("Size of: ", stringify!(BitmapIndexScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapIndexScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapIndexScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_result as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_ScanKeys as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_ScanKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_NumScanKeys as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_NumScanKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_RuntimeKeys as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_RuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_NumRuntimeKeys as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_NumRuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_ArrayKeys as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_ArrayKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_NumArrayKeys as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_NumArrayKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_RuntimeKeysReady as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_RuntimeKeysReady)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_RuntimeContext as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_RuntimeContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_RelationDesc as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_RelationDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_ScanDesc as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_ScanDesc)
        )
    );
}
pub const SharedBitmapState_BM_INITIAL: SharedBitmapState = 0;
pub const SharedBitmapState_BM_INPROGRESS: SharedBitmapState = 1;
pub const SharedBitmapState_BM_FINISHED: SharedBitmapState = 2;
pub type SharedBitmapState = u32;
#[repr(C)]
pub struct ParallelBitmapHeapState {
    pub tbmiterator: dsa_pointer,
    pub prefetch_iterator: dsa_pointer,
    pub mutex: slock_t,
    pub prefetch_pages: ::std::os::raw::c_int,
    pub prefetch_target: ::std::os::raw::c_int,
    pub state: SharedBitmapState,
    pub cv: ConditionVariable,
    pub phs_snapshot_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_ParallelBitmapHeapState() {
    assert_eq!(
        ::std::mem::size_of::<ParallelBitmapHeapState>(),
        48usize,
        concat!("Size of: ", stringify!(ParallelBitmapHeapState))
    );
    assert_eq!(
        ::std::mem::align_of::<ParallelBitmapHeapState>(),
        8usize,
        concat!("Alignment of ", stringify!(ParallelBitmapHeapState))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapHeapScanState {
    pub ss: ScanState,
    pub bitmapqualorig: *mut ExprState,
    pub tbm: *mut TIDBitmap,
    pub tbmiterator: *mut TBMIterator,
    pub tbmres: *mut TBMIterateResult,
    pub can_skip_fetch: bool,
    pub skip_fetch: bool,
    pub vmbuffer: Buffer,
    pub pvmbuffer: Buffer,
    pub exact_pages: ::std::os::raw::c_long,
    pub lossy_pages: ::std::os::raw::c_long,
    pub prefetch_iterator: *mut TBMIterator,
    pub prefetch_pages: ::std::os::raw::c_int,
    pub prefetch_target: ::std::os::raw::c_int,
    pub prefetch_maximum: ::std::os::raw::c_int,
    pub pscan_len: Size,
    pub initialized: bool,
    pub shared_tbmiterator: *mut TBMSharedIterator,
    pub shared_prefetch_iterator: *mut TBMSharedIterator,
    pub pstate: *mut ParallelBitmapHeapState,
}
#[test]
fn bindgen_test_layout_BitmapHeapScanState() {
    assert_eq!(
        ::std::mem::size_of::<BitmapHeapScanState>(),
        296usize,
        concat!("Size of: ", stringify!(BitmapHeapScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapHeapScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapHeapScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).bitmapqualorig as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(bitmapqualorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).tbm as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(tbm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).tbmiterator as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(tbmiterator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).tbmres as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(tbmres)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).can_skip_fetch as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(can_skip_fetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).skip_fetch as *const _ as usize },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(skip_fetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).vmbuffer as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(vmbuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).pvmbuffer as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(pvmbuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).exact_pages as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(exact_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).lossy_pages as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(lossy_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).prefetch_iterator as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(prefetch_iterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).prefetch_pages as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(prefetch_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).prefetch_target as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(prefetch_target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).prefetch_maximum as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(prefetch_maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).pscan_len as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(pscan_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).initialized as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).shared_tbmiterator as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(shared_tbmiterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).shared_prefetch_iterator as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(shared_prefetch_iterator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).pstate as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(pstate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TidScanState {
    pub ss: ScanState,
    pub tss_tidexprs: *mut List,
    pub tss_isCurrentOf: bool,
    pub tss_NumTids: ::std::os::raw::c_int,
    pub tss_TidPtr: ::std::os::raw::c_int,
    pub tss_TidList: *mut ItemPointerData,
    pub tss_htup: HeapTupleData,
}
#[test]
fn bindgen_test_layout_TidScanState() {
    assert_eq!(
        ::std::mem::size_of::<TidScanState>(),
        224usize,
        concat!("Size of: ", stringify!(TidScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<TidScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(TidScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_tidexprs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_tidexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_isCurrentOf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_isCurrentOf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_NumTids as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_NumTids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_TidPtr as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_TidPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_TidList as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_TidList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_htup as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_htup)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SubqueryScanState {
    pub ss: ScanState,
    pub subplan: *mut PlanState,
}
#[test]
fn bindgen_test_layout_SubqueryScanState() {
    assert_eq!(
        ::std::mem::size_of::<SubqueryScanState>(),
        176usize,
        concat!("Size of: ", stringify!(SubqueryScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<SubqueryScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(SubqueryScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScanState>())).subplan as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScanState),
            "::",
            stringify!(subplan)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FunctionScanPerFuncState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FunctionScanState {
    pub ss: ScanState,
    pub eflags: ::std::os::raw::c_int,
    pub ordinality: bool,
    pub simple: bool,
    pub ordinal: int64,
    pub nfuncs: ::std::os::raw::c_int,
    pub funcstates: *mut FunctionScanPerFuncState,
    pub argcontext: MemoryContext,
}
#[test]
fn bindgen_test_layout_FunctionScanState() {
    assert_eq!(
        ::std::mem::size_of::<FunctionScanState>(),
        208usize,
        concat!("Size of: ", stringify!(FunctionScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<FunctionScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(FunctionScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).eflags as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).ordinality as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(ordinality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).simple as *const _ as usize },
        173usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(simple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).ordinal as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).nfuncs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(nfuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).funcstates as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(funcstates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).argcontext as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(argcontext)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ValuesScanState {
    pub ss: ScanState,
    pub rowcontext: *mut ExprContext,
    pub exprlists: *mut *mut List,
    pub array_len: ::std::os::raw::c_int,
    pub curr_idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ValuesScanState() {
    assert_eq!(
        ::std::mem::size_of::<ValuesScanState>(),
        192usize,
        concat!("Size of: ", stringify!(ValuesScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<ValuesScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(ValuesScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).rowcontext as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(rowcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).exprlists as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(exprlists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).array_len as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(array_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).curr_idx as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(curr_idx)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TableFuncScanState {
    pub ss: ScanState,
    pub docexpr: *mut ExprState,
    pub rowexpr: *mut ExprState,
    pub colexprs: *mut List,
    pub coldefexprs: *mut List,
    pub ns_names: *mut List,
    pub ns_uris: *mut List,
    pub notnulls: *mut Bitmapset,
    pub opaque: *mut ::std::os::raw::c_void,
    pub routine: *const TableFuncRoutine,
    pub in_functions: *mut FmgrInfo,
    pub typioparams: *mut Oid,
    pub ordinal: int64,
    pub perTableCxt: MemoryContext,
    pub tupstore: *mut Tuplestorestate,
}
#[test]
fn bindgen_test_layout_TableFuncScanState() {
    assert_eq!(
        ::std::mem::size_of::<TableFuncScanState>(),
        280usize,
        concat!("Size of: ", stringify!(TableFuncScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<TableFuncScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(TableFuncScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).docexpr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(docexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).rowexpr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(rowexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).colexprs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(colexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).coldefexprs as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(coldefexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).ns_names as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(ns_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).ns_uris as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(ns_uris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).notnulls as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(notnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).opaque as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).routine as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).in_functions as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(in_functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).typioparams as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(typioparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).ordinal as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).perTableCxt as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(perTableCxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).tupstore as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(tupstore)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CteScanState {
    pub ss: ScanState,
    pub eflags: ::std::os::raw::c_int,
    pub readptr: ::std::os::raw::c_int,
    pub cteplanstate: *mut PlanState,
    pub leader: *mut CteScanState,
    pub cte_table: *mut Tuplestorestate,
    pub eof_cte: bool,
}
#[test]
fn bindgen_test_layout_CteScanState() {
    assert_eq!(
        ::std::mem::size_of::<CteScanState>(),
        208usize,
        concat!("Size of: ", stringify!(CteScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<CteScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(CteScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).eflags as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).readptr as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(readptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).cteplanstate as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(cteplanstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).leader as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(leader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).cte_table as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(cte_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).eof_cte as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(eof_cte)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NamedTuplestoreScanState {
    pub ss: ScanState,
    pub readptr: ::std::os::raw::c_int,
    pub tupdesc: TupleDesc,
    pub relation: *mut Tuplestorestate,
}
#[test]
fn bindgen_test_layout_NamedTuplestoreScanState() {
    assert_eq!(
        ::std::mem::size_of::<NamedTuplestoreScanState>(),
        192usize,
        concat!("Size of: ", stringify!(NamedTuplestoreScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedTuplestoreScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedTuplestoreScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedTuplestoreScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NamedTuplestoreScanState>())).readptr as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScanState),
            "::",
            stringify!(readptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NamedTuplestoreScanState>())).tupdesc as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScanState),
            "::",
            stringify!(tupdesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NamedTuplestoreScanState>())).relation as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScanState),
            "::",
            stringify!(relation)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WorkTableScanState {
    pub ss: ScanState,
    pub rustate: *mut RecursiveUnionState,
}
#[test]
fn bindgen_test_layout_WorkTableScanState() {
    assert_eq!(
        ::std::mem::size_of::<WorkTableScanState>(),
        176usize,
        concat!("Size of: ", stringify!(WorkTableScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<WorkTableScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(WorkTableScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WorkTableScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WorkTableScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WorkTableScanState>())).rustate as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WorkTableScanState),
            "::",
            stringify!(rustate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForeignScanState {
    pub ss: ScanState,
    pub fdw_recheck_quals: *mut ExprState,
    pub pscan_len: Size,
    pub fdwroutine: *mut FdwRoutine,
    pub fdw_state: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ForeignScanState() {
    assert_eq!(
        ::std::mem::size_of::<ForeignScanState>(),
        200usize,
        concat!("Size of: ", stringify!(ForeignScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ForeignScanState>())).fdw_recheck_quals as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(fdw_recheck_quals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScanState>())).pscan_len as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(pscan_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScanState>())).fdwroutine as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(fdwroutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScanState>())).fdw_state as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(fdw_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CustomExecMethods {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CustomScanState {
    pub ss: ScanState,
    pub flags: uint32,
    pub custom_ps: *mut List,
    pub pscan_len: Size,
    pub methods: *const CustomExecMethods,
}
#[test]
fn bindgen_test_layout_CustomScanState() {
    assert_eq!(
        ::std::mem::size_of::<CustomScanState>(),
        200usize,
        concat!("Size of: ", stringify!(CustomScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<CustomScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(CustomScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).flags as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).custom_ps as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(custom_ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).pscan_len as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(pscan_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).methods as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(methods)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JoinState {
    pub ps: PlanState,
    pub jointype: JoinType,
    pub single_match: bool,
    pub joinqual: *mut ExprState,
}
#[test]
fn bindgen_test_layout_JoinState() {
    assert_eq!(
        ::std::mem::size_of::<JoinState>(),
        160usize,
        concat!("Size of: ", stringify!(JoinState))
    );
    assert_eq!(
        ::std::mem::align_of::<JoinState>(),
        8usize,
        concat!("Alignment of ", stringify!(JoinState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinState>())).jointype as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinState),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinState>())).single_match as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinState),
            "::",
            stringify!(single_match)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinState>())).joinqual as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinState),
            "::",
            stringify!(joinqual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NestLoopState {
    pub js: JoinState,
    pub nl_NeedNewOuter: bool,
    pub nl_MatchedOuter: bool,
    pub nl_NullInnerTupleSlot: *mut TupleTableSlot,
}
#[test]
fn bindgen_test_layout_NestLoopState() {
    assert_eq!(
        ::std::mem::size_of::<NestLoopState>(),
        176usize,
        concat!("Size of: ", stringify!(NestLoopState))
    );
    assert_eq!(
        ::std::mem::align_of::<NestLoopState>(),
        8usize,
        concat!("Alignment of ", stringify!(NestLoopState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopState>())).js as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopState),
            "::",
            stringify!(js)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopState>())).nl_NeedNewOuter as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopState),
            "::",
            stringify!(nl_NeedNewOuter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopState>())).nl_MatchedOuter as *const _ as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopState),
            "::",
            stringify!(nl_MatchedOuter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NestLoopState>())).nl_NullInnerTupleSlot as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopState),
            "::",
            stringify!(nl_NullInnerTupleSlot)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MergeJoinClauseData {
    _unused: [u8; 0],
}
pub type MergeJoinClause = *mut MergeJoinClauseData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MergeJoinState {
    pub js: JoinState,
    pub mj_NumClauses: ::std::os::raw::c_int,
    pub mj_Clauses: MergeJoinClause,
    pub mj_JoinState: ::std::os::raw::c_int,
    pub mj_SkipMarkRestore: bool,
    pub mj_ExtraMarks: bool,
    pub mj_ConstFalseJoin: bool,
    pub mj_FillOuter: bool,
    pub mj_FillInner: bool,
    pub mj_MatchedOuter: bool,
    pub mj_MatchedInner: bool,
    pub mj_OuterTupleSlot: *mut TupleTableSlot,
    pub mj_InnerTupleSlot: *mut TupleTableSlot,
    pub mj_MarkedTupleSlot: *mut TupleTableSlot,
    pub mj_NullOuterTupleSlot: *mut TupleTableSlot,
    pub mj_NullInnerTupleSlot: *mut TupleTableSlot,
    pub mj_OuterEContext: *mut ExprContext,
    pub mj_InnerEContext: *mut ExprContext,
}
#[test]
fn bindgen_test_layout_MergeJoinState() {
    assert_eq!(
        ::std::mem::size_of::<MergeJoinState>(),
        248usize,
        concat!("Size of: ", stringify!(MergeJoinState))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeJoinState>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeJoinState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).js as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(js)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_NumClauses as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_NumClauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_Clauses as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_Clauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_JoinState as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_JoinState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_SkipMarkRestore as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_SkipMarkRestore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_ExtraMarks as *const _ as usize },
        181usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_ExtraMarks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_ConstFalseJoin as *const _ as usize
        },
        182usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_ConstFalseJoin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_FillOuter as *const _ as usize },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_FillOuter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_FillInner as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_FillInner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_MatchedOuter as *const _ as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_MatchedOuter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_MatchedInner as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_MatchedInner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_OuterTupleSlot as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_OuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_InnerTupleSlot as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_InnerTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_MarkedTupleSlot as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_MarkedTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_NullOuterTupleSlot as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_NullOuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_NullInnerTupleSlot as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_NullInnerTupleSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_OuterEContext as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_OuterEContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_InnerEContext as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_InnerEContext)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HashJoinTupleData {
    _unused: [u8; 0],
}
pub type HashJoinTuple = *mut HashJoinTupleData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HashJoinTableData {
    _unused: [u8; 0],
}
pub type HashJoinTable = *mut HashJoinTableData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HashJoinState {
    pub js: JoinState,
    pub hashclauses: *mut ExprState,
    pub hj_OuterHashKeys: *mut List,
    pub hj_InnerHashKeys: *mut List,
    pub hj_HashOperators: *mut List,
    pub hj_HashTable: HashJoinTable,
    pub hj_CurHashValue: uint32,
    pub hj_CurBucketNo: ::std::os::raw::c_int,
    pub hj_CurSkewBucketNo: ::std::os::raw::c_int,
    pub hj_CurTuple: HashJoinTuple,
    pub hj_OuterTupleSlot: *mut TupleTableSlot,
    pub hj_HashTupleSlot: *mut TupleTableSlot,
    pub hj_NullOuterTupleSlot: *mut TupleTableSlot,
    pub hj_NullInnerTupleSlot: *mut TupleTableSlot,
    pub hj_FirstOuterTupleSlot: *mut TupleTableSlot,
    pub hj_JoinState: ::std::os::raw::c_int,
    pub hj_MatchedOuter: bool,
    pub hj_OuterNotEmpty: bool,
}
#[test]
fn bindgen_test_layout_HashJoinState() {
    assert_eq!(
        ::std::mem::size_of::<HashJoinState>(),
        272usize,
        concat!("Size of: ", stringify!(HashJoinState))
    );
    assert_eq!(
        ::std::mem::align_of::<HashJoinState>(),
        8usize,
        concat!("Alignment of ", stringify!(HashJoinState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).js as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(js)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hashclauses as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hashclauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_OuterHashKeys as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_OuterHashKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_InnerHashKeys as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_InnerHashKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_HashOperators as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_HashOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_HashTable as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_HashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_CurHashValue as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_CurHashValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_CurBucketNo as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_CurBucketNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashJoinState>())).hj_CurSkewBucketNo as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_CurSkewBucketNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_CurTuple as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_CurTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_OuterTupleSlot as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_OuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_HashTupleSlot as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_HashTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashJoinState>())).hj_NullOuterTupleSlot as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_NullOuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashJoinState>())).hj_NullInnerTupleSlot as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_NullInnerTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashJoinState>())).hj_FirstOuterTupleSlot as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_FirstOuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_JoinState as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_JoinState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_MatchedOuter as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_MatchedOuter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_OuterNotEmpty as *const _ as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_OuterNotEmpty)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MaterialState {
    pub ss: ScanState,
    pub eflags: ::std::os::raw::c_int,
    pub eof_underlying: bool,
    pub tuplestorestate: *mut Tuplestorestate,
}
#[test]
fn bindgen_test_layout_MaterialState() {
    assert_eq!(
        ::std::mem::size_of::<MaterialState>(),
        184usize,
        concat!("Size of: ", stringify!(MaterialState))
    );
    assert_eq!(
        ::std::mem::align_of::<MaterialState>(),
        8usize,
        concat!("Alignment of ", stringify!(MaterialState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialState>())).eflags as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialState),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialState>())).eof_underlying as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialState),
            "::",
            stringify!(eof_underlying)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialState>())).tuplestorestate as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialState),
            "::",
            stringify!(tuplestorestate)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct SharedSortInfo {
    pub num_workers: ::std::os::raw::c_int,
    pub sinstrument: __IncompleteArrayField<TuplesortInstrumentation>,
}
#[test]
fn bindgen_test_layout_SharedSortInfo() {
    assert_eq!(
        ::std::mem::size_of::<SharedSortInfo>(),
        8usize,
        concat!("Size of: ", stringify!(SharedSortInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedSortInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SharedSortInfo))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SortState {
    pub ss: ScanState,
    pub randomAccess: bool,
    pub bounded: bool,
    pub bound: int64,
    pub sort_Done: bool,
    pub bounded_Done: bool,
    pub bound_Done: int64,
    pub tuplesortstate: *mut ::std::os::raw::c_void,
    pub am_worker: bool,
    pub shared_info: *mut SharedSortInfo,
}
#[test]
fn bindgen_test_layout_SortState() {
    assert_eq!(
        ::std::mem::size_of::<SortState>(),
        224usize,
        concat!("Size of: ", stringify!(SortState))
    );
    assert_eq!(
        ::std::mem::align_of::<SortState>(),
        8usize,
        concat!("Alignment of ", stringify!(SortState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).randomAccess as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(randomAccess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).bounded as *const _ as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(bounded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).bound as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(bound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).sort_Done as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(sort_Done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).bounded_Done as *const _ as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(bounded_Done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).bound_Done as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(bound_Done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).tuplesortstate as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(tuplesortstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).am_worker as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(am_worker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).shared_info as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(shared_info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GroupState {
    pub ss: ScanState,
    pub eqfunction: *mut ExprState,
    pub grp_done: bool,
}
#[test]
fn bindgen_test_layout_GroupState() {
    assert_eq!(
        ::std::mem::size_of::<GroupState>(),
        184usize,
        concat!("Size of: ", stringify!(GroupState))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupState>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupState>())).eqfunction as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupState),
            "::",
            stringify!(eqfunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupState>())).grp_done as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupState),
            "::",
            stringify!(grp_done)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggStatePerAggData {
    _unused: [u8; 0],
}
pub type AggStatePerAgg = *mut AggStatePerAggData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggStatePerTransData {
    _unused: [u8; 0],
}
pub type AggStatePerTrans = *mut AggStatePerTransData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggStatePerGroupData {
    _unused: [u8; 0],
}
pub type AggStatePerGroup = *mut AggStatePerGroupData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggStatePerPhaseData {
    _unused: [u8; 0],
}
pub type AggStatePerPhase = *mut AggStatePerPhaseData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggStatePerHashData {
    _unused: [u8; 0],
}
pub type AggStatePerHash = *mut AggStatePerHashData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggState {
    pub ss: ScanState,
    pub aggs: *mut List,
    pub numaggs: ::std::os::raw::c_int,
    pub numtrans: ::std::os::raw::c_int,
    pub aggstrategy: AggStrategy,
    pub aggsplit: AggSplit,
    pub phase: AggStatePerPhase,
    pub numphases: ::std::os::raw::c_int,
    pub current_phase: ::std::os::raw::c_int,
    pub peragg: AggStatePerAgg,
    pub pertrans: AggStatePerTrans,
    pub hashcontext: *mut ExprContext,
    pub aggcontexts: *mut *mut ExprContext,
    pub tmpcontext: *mut ExprContext,
    pub curaggcontext: *mut ExprContext,
    pub curperagg: AggStatePerAgg,
    pub curpertrans: AggStatePerTrans,
    pub input_done: bool,
    pub agg_done: bool,
    pub projected_set: ::std::os::raw::c_int,
    pub current_set: ::std::os::raw::c_int,
    pub grouped_cols: *mut Bitmapset,
    pub all_grouped_cols: *mut List,
    pub maxsets: ::std::os::raw::c_int,
    pub phases: AggStatePerPhase,
    pub sort_in: *mut Tuplesortstate,
    pub sort_out: *mut Tuplesortstate,
    pub sort_slot: *mut TupleTableSlot,
    pub pergroups: *mut AggStatePerGroup,
    pub grp_firstTuple: HeapTuple,
    pub table_filled: bool,
    pub num_hashes: ::std::os::raw::c_int,
    pub perhash: AggStatePerHash,
    pub hash_pergroup: *mut AggStatePerGroup,
    pub all_pergroups: *mut AggStatePerGroup,
    pub combinedproj: *mut ProjectionInfo,
}
#[test]
fn bindgen_test_layout_AggState() {
    assert_eq!(
        ::std::mem::size_of::<AggState>(),
        400usize,
        concat!("Size of: ", stringify!(AggState))
    );
    assert_eq!(
        ::std::mem::align_of::<AggState>(),
        8usize,
        concat!("Alignment of ", stringify!(AggState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).aggs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(aggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).numaggs as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(numaggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).numtrans as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(numtrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).aggstrategy as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(aggstrategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).aggsplit as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(aggsplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).phase as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).numphases as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(numphases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).current_phase as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(current_phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).peragg as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(peragg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).pertrans as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(pertrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).hashcontext as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(hashcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).aggcontexts as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(aggcontexts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).tmpcontext as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(tmpcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).curaggcontext as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(curaggcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).curperagg as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(curperagg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).curpertrans as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(curpertrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).input_done as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(input_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).agg_done as *const _ as usize },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(agg_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).projected_set as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(projected_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).current_set as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(current_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).grouped_cols as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(grouped_cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).all_grouped_cols as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(all_grouped_cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).maxsets as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(maxsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).phases as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(phases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).sort_in as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(sort_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).sort_out as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(sort_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).sort_slot as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(sort_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).pergroups as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(pergroups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).grp_firstTuple as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(grp_firstTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).table_filled as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(table_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).num_hashes as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(num_hashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).perhash as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(perhash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).hash_pergroup as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(hash_pergroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).all_pergroups as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(all_pergroups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).combinedproj as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(combinedproj)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowStatePerFuncData {
    _unused: [u8; 0],
}
pub type WindowStatePerFunc = *mut WindowStatePerFuncData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowStatePerAggData {
    _unused: [u8; 0],
}
pub type WindowStatePerAgg = *mut WindowStatePerAggData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowAggState {
    pub ss: ScanState,
    pub funcs: *mut List,
    pub numfuncs: ::std::os::raw::c_int,
    pub numaggs: ::std::os::raw::c_int,
    pub perfunc: WindowStatePerFunc,
    pub peragg: WindowStatePerAgg,
    pub partEqfunction: *mut ExprState,
    pub ordEqfunction: *mut ExprState,
    pub buffer: *mut Tuplestorestate,
    pub current_ptr: ::std::os::raw::c_int,
    pub framehead_ptr: ::std::os::raw::c_int,
    pub frametail_ptr: ::std::os::raw::c_int,
    pub grouptail_ptr: ::std::os::raw::c_int,
    pub spooled_rows: int64,
    pub currentpos: int64,
    pub frameheadpos: int64,
    pub frametailpos: int64,
    pub agg_winobj: *mut WindowObjectData,
    pub aggregatedbase: int64,
    pub aggregatedupto: int64,
    pub frameOptions: ::std::os::raw::c_int,
    pub startOffset: *mut ExprState,
    pub endOffset: *mut ExprState,
    pub startOffsetValue: Datum,
    pub endOffsetValue: Datum,
    pub startInRangeFunc: FmgrInfo,
    pub endInRangeFunc: FmgrInfo,
    pub inRangeColl: Oid,
    pub inRangeAsc: bool,
    pub inRangeNullsFirst: bool,
    pub currentgroup: int64,
    pub frameheadgroup: int64,
    pub frametailgroup: int64,
    pub groupheadpos: int64,
    pub grouptailpos: int64,
    pub partcontext: MemoryContext,
    pub aggcontext: MemoryContext,
    pub curaggcontext: MemoryContext,
    pub tmpcontext: *mut ExprContext,
    pub all_first: bool,
    pub all_done: bool,
    pub partition_spooled: bool,
    pub more_partitions: bool,
    pub framehead_valid: bool,
    pub frametail_valid: bool,
    pub grouptail_valid: bool,
    pub first_part_slot: *mut TupleTableSlot,
    pub framehead_slot: *mut TupleTableSlot,
    pub frametail_slot: *mut TupleTableSlot,
    pub agg_row_slot: *mut TupleTableSlot,
    pub temp_slot_1: *mut TupleTableSlot,
    pub temp_slot_2: *mut TupleTableSlot,
}
#[test]
fn bindgen_test_layout_WindowAggState() {
    assert_eq!(
        ::std::mem::size_of::<WindowAggState>(),
        568usize,
        concat!("Size of: ", stringify!(WindowAggState))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowAggState>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowAggState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).funcs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).numfuncs as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(numfuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).numaggs as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(numaggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).perfunc as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(perfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).peragg as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(peragg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).partEqfunction as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(partEqfunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).ordEqfunction as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(ordEqfunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).buffer as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).current_ptr as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(current_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).framehead_ptr as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(framehead_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frametail_ptr as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frametail_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).grouptail_ptr as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(grouptail_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).spooled_rows as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(spooled_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).currentpos as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(currentpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frameheadpos as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frameheadpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frametailpos as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frametailpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).agg_winobj as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(agg_winobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).aggregatedbase as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(aggregatedbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).aggregatedupto as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(aggregatedupto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frameOptions as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frameOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).startOffset as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).endOffset as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(endOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).startOffsetValue as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(startOffsetValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).endOffsetValue as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(endOffsetValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).startInRangeFunc as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(startInRangeFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).endInRangeFunc as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(endInRangeFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).inRangeColl as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(inRangeColl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).inRangeAsc as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(inRangeAsc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WindowAggState>())).inRangeNullsFirst as *const _ as usize
        },
        437usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(inRangeNullsFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).currentgroup as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(currentgroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frameheadgroup as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frameheadgroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frametailgroup as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frametailgroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).groupheadpos as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(groupheadpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).grouptailpos as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(grouptailpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).partcontext as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(partcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).aggcontext as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(aggcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).curaggcontext as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(curaggcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).tmpcontext as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(tmpcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).all_first as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(all_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).all_done as *const _ as usize },
        513usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(all_done)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WindowAggState>())).partition_spooled as *const _ as usize
        },
        514usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(partition_spooled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).more_partitions as *const _ as usize },
        515usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(more_partitions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).framehead_valid as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(framehead_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frametail_valid as *const _ as usize },
        517usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frametail_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).grouptail_valid as *const _ as usize },
        518usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(grouptail_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).first_part_slot as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(first_part_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).framehead_slot as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(framehead_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frametail_slot as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frametail_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).agg_row_slot as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(agg_row_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).temp_slot_1 as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(temp_slot_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).temp_slot_2 as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(temp_slot_2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UniqueState {
    pub ps: PlanState,
    pub eqfunction: *mut ExprState,
}
#[test]
fn bindgen_test_layout_UniqueState() {
    assert_eq!(
        ::std::mem::size_of::<UniqueState>(),
        152usize,
        concat!("Size of: ", stringify!(UniqueState))
    );
    assert_eq!(
        ::std::mem::align_of::<UniqueState>(),
        8usize,
        concat!("Alignment of ", stringify!(UniqueState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniqueState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UniqueState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniqueState>())).eqfunction as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(UniqueState),
            "::",
            stringify!(eqfunction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GatherState {
    pub ps: PlanState,
    pub initialized: bool,
    pub need_to_scan_locally: bool,
    pub tuples_needed: int64,
    pub funnel_slot: *mut TupleTableSlot,
    pub pei: *mut ParallelExecutorInfo,
    pub nworkers_launched: ::std::os::raw::c_int,
    pub nreaders: ::std::os::raw::c_int,
    pub nextreader: ::std::os::raw::c_int,
    pub reader: *mut *mut TupleQueueReader,
}
#[test]
fn bindgen_test_layout_GatherState() {
    assert_eq!(
        ::std::mem::size_of::<GatherState>(),
        200usize,
        concat!("Size of: ", stringify!(GatherState))
    );
    assert_eq!(
        ::std::mem::align_of::<GatherState>(),
        8usize,
        concat!("Alignment of ", stringify!(GatherState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).initialized as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GatherState>())).need_to_scan_locally as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(need_to_scan_locally)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).tuples_needed as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(tuples_needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).funnel_slot as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(funnel_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).pei as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(pei)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).nworkers_launched as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(nworkers_launched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).nreaders as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(nreaders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).nextreader as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(nextreader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).reader as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(reader)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GMReaderTupleBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GatherMergeState {
    pub ps: PlanState,
    pub initialized: bool,
    pub gm_initialized: bool,
    pub need_to_scan_locally: bool,
    pub tuples_needed: int64,
    pub tupDesc: TupleDesc,
    pub gm_nkeys: ::std::os::raw::c_int,
    pub gm_sortkeys: SortSupport,
    pub pei: *mut ParallelExecutorInfo,
    pub nworkers_launched: ::std::os::raw::c_int,
    pub nreaders: ::std::os::raw::c_int,
    pub gm_slots: *mut *mut TupleTableSlot,
    pub reader: *mut *mut TupleQueueReader,
    pub gm_tuple_buffers: *mut GMReaderTupleBuffer,
    pub gm_heap: *mut binaryheap,
}
#[test]
fn bindgen_test_layout_GatherMergeState() {
    assert_eq!(
        ::std::mem::size_of::<GatherMergeState>(),
        232usize,
        concat!("Size of: ", stringify!(GatherMergeState))
    );
    assert_eq!(
        ::std::mem::align_of::<GatherMergeState>(),
        8usize,
        concat!("Alignment of ", stringify!(GatherMergeState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).initialized as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_initialized as *const _ as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GatherMergeState>())).need_to_scan_locally as *const _ as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(need_to_scan_locally)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).tuples_needed as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(tuples_needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).tupDesc as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(tupDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_nkeys as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_nkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_sortkeys as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_sortkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).pei as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(pei)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GatherMergeState>())).nworkers_launched as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(nworkers_launched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).nreaders as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(nreaders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_slots as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).reader as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(reader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GatherMergeState>())).gm_tuple_buffers as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_tuple_buffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_heap as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_heap)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HashInstrumentation {
    pub nbuckets: ::std::os::raw::c_int,
    pub nbuckets_original: ::std::os::raw::c_int,
    pub nbatch: ::std::os::raw::c_int,
    pub nbatch_original: ::std::os::raw::c_int,
    pub space_peak: usize,
}
#[test]
fn bindgen_test_layout_HashInstrumentation() {
    assert_eq!(
        ::std::mem::size_of::<HashInstrumentation>(),
        24usize,
        concat!("Size of: ", stringify!(HashInstrumentation))
    );
    assert_eq!(
        ::std::mem::align_of::<HashInstrumentation>(),
        8usize,
        concat!("Alignment of ", stringify!(HashInstrumentation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashInstrumentation>())).nbuckets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashInstrumentation),
            "::",
            stringify!(nbuckets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashInstrumentation>())).nbuckets_original as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HashInstrumentation),
            "::",
            stringify!(nbuckets_original)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashInstrumentation>())).nbatch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HashInstrumentation),
            "::",
            stringify!(nbatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashInstrumentation>())).nbatch_original as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HashInstrumentation),
            "::",
            stringify!(nbatch_original)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashInstrumentation>())).space_peak as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HashInstrumentation),
            "::",
            stringify!(space_peak)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct SharedHashInfo {
    pub num_workers: ::std::os::raw::c_int,
    pub hinstrument: __IncompleteArrayField<HashInstrumentation>,
}
#[test]
fn bindgen_test_layout_SharedHashInfo() {
    assert_eq!(
        ::std::mem::size_of::<SharedHashInfo>(),
        8usize,
        concat!("Size of: ", stringify!(SharedHashInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedHashInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SharedHashInfo))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HashState {
    pub ps: PlanState,
    pub hashtable: HashJoinTable,
    pub hashkeys: *mut List,
    pub shared_info: *mut SharedHashInfo,
    pub hinstrument: *mut HashInstrumentation,
    pub parallel_state: *mut ParallelHashJoinState,
}
#[test]
fn bindgen_test_layout_HashState() {
    assert_eq!(
        ::std::mem::size_of::<HashState>(),
        184usize,
        concat!("Size of: ", stringify!(HashState))
    );
    assert_eq!(
        ::std::mem::align_of::<HashState>(),
        8usize,
        concat!("Alignment of ", stringify!(HashState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).hashtable as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(hashtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).hashkeys as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(hashkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).shared_info as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(shared_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).hinstrument as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(hinstrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).parallel_state as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(parallel_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SetOpStatePerGroupData {
    _unused: [u8; 0],
}
pub type SetOpStatePerGroup = *mut SetOpStatePerGroupData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SetOpState {
    pub ps: PlanState,
    pub eqfunction: *mut ExprState,
    pub eqfuncoids: *mut Oid,
    pub hashfunctions: *mut FmgrInfo,
    pub setop_done: bool,
    pub numOutput: ::std::os::raw::c_long,
    pub pergroup: SetOpStatePerGroup,
    pub grp_firstTuple: HeapTuple,
    pub hashtable: TupleHashTable,
    pub tableContext: MemoryContext,
    pub table_filled: bool,
    pub hashiter: TupleHashIterator,
}
#[test]
fn bindgen_test_layout_SetOpState() {
    assert_eq!(
        ::std::mem::size_of::<SetOpState>(),
        232usize,
        concat!("Size of: ", stringify!(SetOpState))
    );
    assert_eq!(
        ::std::mem::align_of::<SetOpState>(),
        8usize,
        concat!("Alignment of ", stringify!(SetOpState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).eqfunction as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(eqfunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).eqfuncoids as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(eqfuncoids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).hashfunctions as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(hashfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).setop_done as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(setop_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).numOutput as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(numOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).pergroup as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(pergroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).grp_firstTuple as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(grp_firstTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).hashtable as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(hashtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).tableContext as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(tableContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).table_filled as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(table_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).hashiter as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(hashiter)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockRowsState {
    pub ps: PlanState,
    pub lr_arowMarks: *mut List,
    pub lr_epqstate: EPQState,
    pub lr_curtuples: *mut HeapTuple,
    pub lr_ntables: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LockRowsState() {
    assert_eq!(
        ::std::mem::size_of::<LockRowsState>(),
        216usize,
        concat!("Size of: ", stringify!(LockRowsState))
    );
    assert_eq!(
        ::std::mem::align_of::<LockRowsState>(),
        8usize,
        concat!("Alignment of ", stringify!(LockRowsState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).lr_arowMarks as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(lr_arowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).lr_epqstate as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(lr_epqstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).lr_curtuples as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(lr_curtuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).lr_ntables as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(lr_ntables)
        )
    );
}
pub const LimitStateCond_LIMIT_INITIAL: LimitStateCond = 0;
pub const LimitStateCond_LIMIT_RESCAN: LimitStateCond = 1;
pub const LimitStateCond_LIMIT_EMPTY: LimitStateCond = 2;
pub const LimitStateCond_LIMIT_INWINDOW: LimitStateCond = 3;
pub const LimitStateCond_LIMIT_SUBPLANEOF: LimitStateCond = 4;
pub const LimitStateCond_LIMIT_WINDOWEND: LimitStateCond = 5;
pub const LimitStateCond_LIMIT_WINDOWSTART: LimitStateCond = 6;
pub type LimitStateCond = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LimitState {
    pub ps: PlanState,
    pub limitOffset: *mut ExprState,
    pub limitCount: *mut ExprState,
    pub offset: int64,
    pub count: int64,
    pub noCount: bool,
    pub lstate: LimitStateCond,
    pub position: int64,
    pub subSlot: *mut TupleTableSlot,
}
#[test]
fn bindgen_test_layout_LimitState() {
    assert_eq!(
        ::std::mem::size_of::<LimitState>(),
        200usize,
        concat!("Size of: ", stringify!(LimitState))
    );
    assert_eq!(
        ::std::mem::align_of::<LimitState>(),
        8usize,
        concat!("Alignment of ", stringify!(LimitState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).limitOffset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).limitCount as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(limitCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).offset as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).count as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).noCount as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(noCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).lstate as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(lstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).position as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).subSlot as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(subSlot)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Value {
    pub type_: NodeTag,
    pub val: Value_ValUnion,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Value_ValUnion {
    pub ival: ::std::os::raw::c_int,
    pub str: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Value_ValUnion() {
    assert_eq!(
        ::std::mem::size_of::<Value_ValUnion>(),
        8usize,
        concat!("Size of: ", stringify!(Value_ValUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<Value_ValUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(Value_ValUnion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Value_ValUnion>())).ival as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Value_ValUnion),
            "::",
            stringify!(ival)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Value_ValUnion>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Value_ValUnion),
            "::",
            stringify!(str)
        )
    );
}
#[test]
fn bindgen_test_layout_Value() {
    assert_eq!(
        ::std::mem::size_of::<Value>(),
        16usize,
        concat!("Size of: ", stringify!(Value))
    );
    assert_eq!(
        ::std::mem::align_of::<Value>(),
        8usize,
        concat!("Alignment of ", stringify!(Value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Value>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Value>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn makeInteger(i: ::std::os::raw::c_int) -> *mut Value;
}
extern "C" {
    pub fn makeFloat(numericStr: *mut ::std::os::raw::c_char) -> *mut Value;
}
extern "C" {
    pub fn makeString(str: *mut ::std::os::raw::c_char) -> *mut Value;
}
extern "C" {
    pub fn makeBitString(str: *mut ::std::os::raw::c_char) -> *mut Value;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionBoundInfoData {
    _unused: [u8; 0],
}
pub type PartitionBoundInfo = *mut PartitionBoundInfoData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionKeyData {
    _unused: [u8; 0],
}
pub type PartitionKey = *mut PartitionKeyData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionDescData {
    _unused: [u8; 0],
}
pub type PartitionDesc = *mut PartitionDescData;
pub const OverridingKind_OVERRIDING_NOT_SET: OverridingKind = 0;
pub const OverridingKind_OVERRIDING_USER_VALUE: OverridingKind = 1;
pub const OverridingKind_OVERRIDING_SYSTEM_VALUE: OverridingKind = 2;
pub type OverridingKind = u32;
pub const QuerySource_QSRC_ORIGINAL: QuerySource = 0;
pub const QuerySource_QSRC_PARSER: QuerySource = 1;
pub const QuerySource_QSRC_INSTEAD_RULE: QuerySource = 2;
pub const QuerySource_QSRC_QUAL_INSTEAD_RULE: QuerySource = 3;
pub const QuerySource_QSRC_NON_INSTEAD_RULE: QuerySource = 4;
pub type QuerySource = u32;
pub const SortByDir_SORTBY_DEFAULT: SortByDir = 0;
pub const SortByDir_SORTBY_ASC: SortByDir = 1;
pub const SortByDir_SORTBY_DESC: SortByDir = 2;
pub const SortByDir_SORTBY_USING: SortByDir = 3;
pub type SortByDir = u32;
pub const SortByNulls_SORTBY_NULLS_DEFAULT: SortByNulls = 0;
pub const SortByNulls_SORTBY_NULLS_FIRST: SortByNulls = 1;
pub const SortByNulls_SORTBY_NULLS_LAST: SortByNulls = 2;
pub type SortByNulls = u32;
pub type AclMode = uint32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Query {
    pub type_: NodeTag,
    pub commandType: CmdType,
    pub querySource: QuerySource,
    pub queryId: uint64,
    pub canSetTag: bool,
    pub utilityStmt: *mut Node,
    pub resultRelation: ::std::os::raw::c_int,
    pub hasAggs: bool,
    pub hasWindowFuncs: bool,
    pub hasTargetSRFs: bool,
    pub hasSubLinks: bool,
    pub hasDistinctOn: bool,
    pub hasRecursive: bool,
    pub hasModifyingCTE: bool,
    pub hasForUpdate: bool,
    pub hasRowSecurity: bool,
    pub cteList: *mut List,
    pub rtable: *mut List,
    pub jointree: *mut FromExpr,
    pub targetList: *mut List,
    pub override_: OverridingKind,
    pub onConflict: *mut OnConflictExpr,
    pub returningList: *mut List,
    pub groupClause: *mut List,
    pub groupingSets: *mut List,
    pub havingQual: *mut Node,
    pub windowClause: *mut List,
    pub distinctClause: *mut List,
    pub sortClause: *mut List,
    pub limitOffset: *mut Node,
    pub limitCount: *mut Node,
    pub rowMarks: *mut List,
    pub setOperations: *mut Node,
    pub constraintDeps: *mut List,
    pub withCheckOptions: *mut List,
    pub stmt_location: ::std::os::raw::c_int,
    pub stmt_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Query() {
    assert_eq!(
        ::std::mem::size_of::<Query>(),
        216usize,
        concat!("Size of: ", stringify!(Query))
    );
    assert_eq!(
        ::std::mem::align_of::<Query>(),
        8usize,
        concat!("Alignment of ", stringify!(Query))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).commandType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(commandType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).querySource as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(querySource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).queryId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(queryId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).canSetTag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).utilityStmt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(utilityStmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).resultRelation as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(resultRelation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasAggs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasAggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasWindowFuncs as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasWindowFuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasTargetSRFs as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasTargetSRFs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasSubLinks as *const _ as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasSubLinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasDistinctOn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasDistinctOn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasRecursive as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasRecursive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasModifyingCTE as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasModifyingCTE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasForUpdate as *const _ as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasForUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasRowSecurity as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasRowSecurity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).cteList as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(cteList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).rtable as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(rtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).jointree as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(jointree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).targetList as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).override_ as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).onConflict as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(onConflict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).returningList as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(returningList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).groupClause as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(groupClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).groupingSets as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(groupingSets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).havingQual as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(havingQual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).windowClause as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(windowClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).distinctClause as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(distinctClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).sortClause as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(sortClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).limitOffset as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).limitCount as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(limitCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).rowMarks as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).setOperations as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(setOperations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).constraintDeps as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(constraintDeps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).withCheckOptions as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(withCheckOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).stmt_location as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(stmt_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).stmt_len as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(stmt_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TypeName {
    pub type_: NodeTag,
    pub names: *mut List,
    pub typeOid: Oid,
    pub setof: bool,
    pub pct_type: bool,
    pub typmods: *mut List,
    pub typemod: int32,
    pub arrayBounds: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TypeName() {
    assert_eq!(
        ::std::mem::size_of::<TypeName>(),
        56usize,
        concat!("Size of: ", stringify!(TypeName))
    );
    assert_eq!(
        ::std::mem::align_of::<TypeName>(),
        8usize,
        concat!("Alignment of ", stringify!(TypeName))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).names as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).typeOid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(typeOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).setof as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(setof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).pct_type as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(pct_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).typmods as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(typmods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).typemod as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(typemod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).arrayBounds as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(arrayBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ColumnRef {
    pub type_: NodeTag,
    pub fields: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ColumnRef() {
    assert_eq!(
        ::std::mem::size_of::<ColumnRef>(),
        24usize,
        concat!("Size of: ", stringify!(ColumnRef))
    );
    assert_eq!(
        ::std::mem::align_of::<ColumnRef>(),
        8usize,
        concat!("Alignment of ", stringify!(ColumnRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnRef>())).fields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnRef),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnRef>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnRef),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParamRef {
    pub type_: NodeTag,
    pub number: ::std::os::raw::c_int,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ParamRef() {
    assert_eq!(
        ::std::mem::size_of::<ParamRef>(),
        12usize,
        concat!("Size of: ", stringify!(ParamRef))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamRef>(),
        4usize,
        concat!("Alignment of ", stringify!(ParamRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamRef>())).number as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamRef),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamRef>())).location as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamRef),
            "::",
            stringify!(location)
        )
    );
}
pub const A_Expr_Kind_AEXPR_OP: A_Expr_Kind = 0;
pub const A_Expr_Kind_AEXPR_OP_ANY: A_Expr_Kind = 1;
pub const A_Expr_Kind_AEXPR_OP_ALL: A_Expr_Kind = 2;
pub const A_Expr_Kind_AEXPR_DISTINCT: A_Expr_Kind = 3;
pub const A_Expr_Kind_AEXPR_NOT_DISTINCT: A_Expr_Kind = 4;
pub const A_Expr_Kind_AEXPR_NULLIF: A_Expr_Kind = 5;
pub const A_Expr_Kind_AEXPR_OF: A_Expr_Kind = 6;
pub const A_Expr_Kind_AEXPR_IN: A_Expr_Kind = 7;
pub const A_Expr_Kind_AEXPR_LIKE: A_Expr_Kind = 8;
pub const A_Expr_Kind_AEXPR_ILIKE: A_Expr_Kind = 9;
pub const A_Expr_Kind_AEXPR_SIMILAR: A_Expr_Kind = 10;
pub const A_Expr_Kind_AEXPR_BETWEEN: A_Expr_Kind = 11;
pub const A_Expr_Kind_AEXPR_NOT_BETWEEN: A_Expr_Kind = 12;
pub const A_Expr_Kind_AEXPR_BETWEEN_SYM: A_Expr_Kind = 13;
pub const A_Expr_Kind_AEXPR_NOT_BETWEEN_SYM: A_Expr_Kind = 14;
pub const A_Expr_Kind_AEXPR_PAREN: A_Expr_Kind = 15;
pub type A_Expr_Kind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct A_Expr {
    pub type_: NodeTag,
    pub kind: A_Expr_Kind,
    pub name: *mut List,
    pub lexpr: *mut Node,
    pub rexpr: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_A_Expr() {
    assert_eq!(
        ::std::mem::size_of::<A_Expr>(),
        40usize,
        concat!("Size of: ", stringify!(A_Expr))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Expr>(),
        8usize,
        concat!("Alignment of ", stringify!(A_Expr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).lexpr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(lexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).rexpr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(rexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct A_Const {
    pub type_: NodeTag,
    pub val: Value,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_A_Const() {
    assert_eq!(
        ::std::mem::size_of::<A_Const>(),
        32usize,
        concat!("Size of: ", stringify!(A_Const))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Const>(),
        8usize,
        concat!("Alignment of ", stringify!(A_Const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Const>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Const),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Const>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Const),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Const>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Const),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TypeCast {
    pub type_: NodeTag,
    pub arg: *mut Node,
    pub typeName: *mut TypeName,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TypeCast() {
    assert_eq!(
        ::std::mem::size_of::<TypeCast>(),
        32usize,
        concat!("Size of: ", stringify!(TypeCast))
    );
    assert_eq!(
        ::std::mem::align_of::<TypeCast>(),
        8usize,
        concat!("Alignment of ", stringify!(TypeCast))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeCast>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeCast),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeCast>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeCast),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeCast>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeCast),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeCast>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeCast),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CollateClause {
    pub type_: NodeTag,
    pub arg: *mut Node,
    pub collname: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CollateClause() {
    assert_eq!(
        ::std::mem::size_of::<CollateClause>(),
        32usize,
        concat!("Size of: ", stringify!(CollateClause))
    );
    assert_eq!(
        ::std::mem::align_of::<CollateClause>(),
        8usize,
        concat!("Alignment of ", stringify!(CollateClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateClause>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateClause),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateClause>())).collname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateClause),
            "::",
            stringify!(collname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateClause>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateClause),
            "::",
            stringify!(location)
        )
    );
}
pub const RoleSpecType_ROLESPEC_CSTRING: RoleSpecType = 0;
pub const RoleSpecType_ROLESPEC_CURRENT_USER: RoleSpecType = 1;
pub const RoleSpecType_ROLESPEC_SESSION_USER: RoleSpecType = 2;
pub const RoleSpecType_ROLESPEC_PUBLIC: RoleSpecType = 3;
pub type RoleSpecType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RoleSpec {
    pub type_: NodeTag,
    pub roletype: RoleSpecType,
    pub rolename: *mut ::std::os::raw::c_char,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RoleSpec() {
    assert_eq!(
        ::std::mem::size_of::<RoleSpec>(),
        24usize,
        concat!("Size of: ", stringify!(RoleSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<RoleSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(RoleSpec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleSpec>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleSpec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleSpec>())).roletype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleSpec),
            "::",
            stringify!(roletype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleSpec>())).rolename as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleSpec),
            "::",
            stringify!(rolename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleSpec>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleSpec),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FuncCall {
    pub type_: NodeTag,
    pub funcname: *mut List,
    pub args: *mut List,
    pub agg_order: *mut List,
    pub agg_filter: *mut Node,
    pub agg_within_group: bool,
    pub agg_star: bool,
    pub agg_distinct: bool,
    pub func_variadic: bool,
    pub over: *mut WindowDef,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FuncCall() {
    assert_eq!(
        ::std::mem::size_of::<FuncCall>(),
        64usize,
        concat!("Size of: ", stringify!(FuncCall))
    );
    assert_eq!(
        ::std::mem::align_of::<FuncCall>(),
        8usize,
        concat!("Alignment of ", stringify!(FuncCall))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).funcname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_order as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_filter as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_within_group as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_within_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_star as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_star)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_distinct as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_distinct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).func_variadic as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(func_variadic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).over as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(over)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).location as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct A_Star {
    pub type_: NodeTag,
}
#[test]
fn bindgen_test_layout_A_Star() {
    assert_eq!(
        ::std::mem::size_of::<A_Star>(),
        4usize,
        concat!("Size of: ", stringify!(A_Star))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Star>(),
        4usize,
        concat!("Alignment of ", stringify!(A_Star))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Star>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Star),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct A_Indices {
    pub type_: NodeTag,
    pub is_slice: bool,
    pub lidx: *mut Node,
    pub uidx: *mut Node,
}
#[test]
fn bindgen_test_layout_A_Indices() {
    assert_eq!(
        ::std::mem::size_of::<A_Indices>(),
        24usize,
        concat!("Size of: ", stringify!(A_Indices))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Indices>(),
        8usize,
        concat!("Alignment of ", stringify!(A_Indices))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indices>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indices),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indices>())).is_slice as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indices),
            "::",
            stringify!(is_slice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indices>())).lidx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indices),
            "::",
            stringify!(lidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indices>())).uidx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indices),
            "::",
            stringify!(uidx)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct A_Indirection {
    pub type_: NodeTag,
    pub arg: *mut Node,
    pub indirection: *mut List,
}
#[test]
fn bindgen_test_layout_A_Indirection() {
    assert_eq!(
        ::std::mem::size_of::<A_Indirection>(),
        24usize,
        concat!("Size of: ", stringify!(A_Indirection))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Indirection>(),
        8usize,
        concat!("Alignment of ", stringify!(A_Indirection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indirection>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indirection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indirection>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indirection),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indirection>())).indirection as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indirection),
            "::",
            stringify!(indirection)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct A_ArrayExpr {
    pub type_: NodeTag,
    pub elements: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_A_ArrayExpr() {
    assert_eq!(
        ::std::mem::size_of::<A_ArrayExpr>(),
        24usize,
        concat!("Size of: ", stringify!(A_ArrayExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<A_ArrayExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(A_ArrayExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_ArrayExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_ArrayExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_ArrayExpr>())).elements as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_ArrayExpr),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_ArrayExpr>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(A_ArrayExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ResTarget {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub indirection: *mut List,
    pub val: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ResTarget() {
    assert_eq!(
        ::std::mem::size_of::<ResTarget>(),
        40usize,
        concat!("Size of: ", stringify!(ResTarget))
    );
    assert_eq!(
        ::std::mem::align_of::<ResTarget>(),
        8usize,
        concat!("Alignment of ", stringify!(ResTarget))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).indirection as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(indirection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MultiAssignRef {
    pub type_: NodeTag,
    pub source: *mut Node,
    pub colno: ::std::os::raw::c_int,
    pub ncolumns: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MultiAssignRef() {
    assert_eq!(
        ::std::mem::size_of::<MultiAssignRef>(),
        24usize,
        concat!("Size of: ", stringify!(MultiAssignRef))
    );
    assert_eq!(
        ::std::mem::align_of::<MultiAssignRef>(),
        8usize,
        concat!("Alignment of ", stringify!(MultiAssignRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MultiAssignRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MultiAssignRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MultiAssignRef>())).source as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MultiAssignRef),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MultiAssignRef>())).colno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MultiAssignRef),
            "::",
            stringify!(colno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MultiAssignRef>())).ncolumns as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MultiAssignRef),
            "::",
            stringify!(ncolumns)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SortBy {
    pub type_: NodeTag,
    pub node: *mut Node,
    pub sortby_dir: SortByDir,
    pub sortby_nulls: SortByNulls,
    pub useOp: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SortBy() {
    assert_eq!(
        ::std::mem::size_of::<SortBy>(),
        40usize,
        concat!("Size of: ", stringify!(SortBy))
    );
    assert_eq!(
        ::std::mem::align_of::<SortBy>(),
        8usize,
        concat!("Alignment of ", stringify!(SortBy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).node as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).sortby_dir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(sortby_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).sortby_nulls as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(sortby_nulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).useOp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(useOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowDef {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub refname: *mut ::std::os::raw::c_char,
    pub partitionClause: *mut List,
    pub orderClause: *mut List,
    pub frameOptions: ::std::os::raw::c_int,
    pub startOffset: *mut Node,
    pub endOffset: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WindowDef() {
    assert_eq!(
        ::std::mem::size_of::<WindowDef>(),
        72usize,
        concat!("Size of: ", stringify!(WindowDef))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowDef>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).refname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(refname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).partitionClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(partitionClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).orderClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(orderClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).frameOptions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(frameOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).startOffset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).endOffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(endOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).location as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeSubselect {
    pub type_: NodeTag,
    pub lateral: bool,
    pub subquery: *mut Node,
    pub alias: *mut Alias,
}
#[test]
fn bindgen_test_layout_RangeSubselect() {
    assert_eq!(
        ::std::mem::size_of::<RangeSubselect>(),
        24usize,
        concat!("Size of: ", stringify!(RangeSubselect))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeSubselect>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeSubselect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeSubselect>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeSubselect),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeSubselect>())).lateral as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeSubselect),
            "::",
            stringify!(lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeSubselect>())).subquery as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeSubselect),
            "::",
            stringify!(subquery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeSubselect>())).alias as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeSubselect),
            "::",
            stringify!(alias)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeFunction {
    pub type_: NodeTag,
    pub lateral: bool,
    pub ordinality: bool,
    pub is_rowsfrom: bool,
    pub functions: *mut List,
    pub alias: *mut Alias,
    pub coldeflist: *mut List,
}
#[test]
fn bindgen_test_layout_RangeFunction() {
    assert_eq!(
        ::std::mem::size_of::<RangeFunction>(),
        32usize,
        concat!("Size of: ", stringify!(RangeFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeFunction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).lateral as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).ordinality as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(ordinality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).is_rowsfrom as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(is_rowsfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).functions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).alias as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).coldeflist as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(coldeflist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeTableFunc {
    pub type_: NodeTag,
    pub lateral: bool,
    pub docexpr: *mut Node,
    pub rowexpr: *mut Node,
    pub namespaces: *mut List,
    pub columns: *mut List,
    pub alias: *mut Alias,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeTableFunc() {
    assert_eq!(
        ::std::mem::size_of::<RangeTableFunc>(),
        56usize,
        concat!("Size of: ", stringify!(RangeTableFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTableFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTableFunc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).lateral as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).docexpr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(docexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).rowexpr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(rowexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).namespaces as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(namespaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).columns as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).alias as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeTableFuncCol {
    pub type_: NodeTag,
    pub colname: *mut ::std::os::raw::c_char,
    pub typeName: *mut TypeName,
    pub for_ordinality: bool,
    pub is_not_null: bool,
    pub colexpr: *mut Node,
    pub coldefexpr: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeTableFuncCol() {
    assert_eq!(
        ::std::mem::size_of::<RangeTableFuncCol>(),
        56usize,
        concat!("Size of: ", stringify!(RangeTableFuncCol))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTableFuncCol>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTableFuncCol))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).colname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(colname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RangeTableFuncCol>())).for_ordinality as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(for_ordinality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).is_not_null as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(is_not_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).colexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(colexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).coldefexpr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(coldefexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeTableSample {
    pub type_: NodeTag,
    pub relation: *mut Node,
    pub method: *mut List,
    pub args: *mut List,
    pub repeatable: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeTableSample() {
    assert_eq!(
        ::std::mem::size_of::<RangeTableSample>(),
        48usize,
        concat!("Size of: ", stringify!(RangeTableSample))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTableSample>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTableSample))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).method as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).repeatable as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(repeatable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ColumnDef {
    pub type_: NodeTag,
    pub colname: *mut ::std::os::raw::c_char,
    pub typeName: *mut TypeName,
    pub inhcount: ::std::os::raw::c_int,
    pub is_local: bool,
    pub is_not_null: bool,
    pub is_from_type: bool,
    pub is_from_parent: bool,
    pub storage: ::std::os::raw::c_char,
    pub raw_default: *mut Node,
    pub cooked_default: *mut Node,
    pub identity: ::std::os::raw::c_char,
    pub identitySequence: *mut RangeVar,
    pub collClause: *mut CollateClause,
    pub collOid: Oid,
    pub constraints: *mut List,
    pub fdwoptions: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ColumnDef() {
    assert_eq!(
        ::std::mem::size_of::<ColumnDef>(),
        112usize,
        concat!("Size of: ", stringify!(ColumnDef))
    );
    assert_eq!(
        ::std::mem::align_of::<ColumnDef>(),
        8usize,
        concat!("Alignment of ", stringify!(ColumnDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).colname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(colname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).inhcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(inhcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).is_local as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(is_local)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).is_not_null as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(is_not_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).is_from_type as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(is_from_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).is_from_parent as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(is_from_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).storage as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).raw_default as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(raw_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).cooked_default as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(cooked_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).identity as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(identity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).identitySequence as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(identitySequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).collClause as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(collClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).collOid as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(collOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).constraints as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).fdwoptions as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(fdwoptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).location as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TableLikeClause {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub options: bits32,
}
#[test]
fn bindgen_test_layout_TableLikeClause() {
    assert_eq!(
        ::std::mem::size_of::<TableLikeClause>(),
        24usize,
        concat!("Size of: ", stringify!(TableLikeClause))
    );
    assert_eq!(
        ::std::mem::align_of::<TableLikeClause>(),
        8usize,
        concat!("Alignment of ", stringify!(TableLikeClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableLikeClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableLikeClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableLikeClause>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TableLikeClause),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableLikeClause>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TableLikeClause),
            "::",
            stringify!(options)
        )
    );
}
pub const TableLikeOption_CREATE_TABLE_LIKE_COMMENTS: TableLikeOption = 1;
pub const TableLikeOption_CREATE_TABLE_LIKE_CONSTRAINTS: TableLikeOption = 2;
pub const TableLikeOption_CREATE_TABLE_LIKE_DEFAULTS: TableLikeOption = 4;
pub const TableLikeOption_CREATE_TABLE_LIKE_IDENTITY: TableLikeOption = 8;
pub const TableLikeOption_CREATE_TABLE_LIKE_INDEXES: TableLikeOption = 16;
pub const TableLikeOption_CREATE_TABLE_LIKE_STATISTICS: TableLikeOption = 32;
pub const TableLikeOption_CREATE_TABLE_LIKE_STORAGE: TableLikeOption = 64;
pub const TableLikeOption_CREATE_TABLE_LIKE_ALL: TableLikeOption = 2147483647;
pub type TableLikeOption = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexElem {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub expr: *mut Node,
    pub indexcolname: *mut ::std::os::raw::c_char,
    pub collation: *mut List,
    pub opclass: *mut List,
    pub ordering: SortByDir,
    pub nulls_ordering: SortByNulls,
}
#[test]
fn bindgen_test_layout_IndexElem() {
    assert_eq!(
        ::std::mem::size_of::<IndexElem>(),
        56usize,
        concat!("Size of: ", stringify!(IndexElem))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexElem>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexElem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).expr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).indexcolname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(indexcolname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).collation as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).opclass as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(opclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).ordering as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(ordering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).nulls_ordering as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(nulls_ordering)
        )
    );
}
pub const DefElemAction_DEFELEM_UNSPEC: DefElemAction = 0;
pub const DefElemAction_DEFELEM_SET: DefElemAction = 1;
pub const DefElemAction_DEFELEM_ADD: DefElemAction = 2;
pub const DefElemAction_DEFELEM_DROP: DefElemAction = 3;
pub type DefElemAction = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DefElem {
    pub type_: NodeTag,
    pub defnamespace: *mut ::std::os::raw::c_char,
    pub defname: *mut ::std::os::raw::c_char,
    pub arg: *mut Node,
    pub defaction: DefElemAction,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DefElem() {
    assert_eq!(
        ::std::mem::size_of::<DefElem>(),
        40usize,
        concat!("Size of: ", stringify!(DefElem))
    );
    assert_eq!(
        ::std::mem::align_of::<DefElem>(),
        8usize,
        concat!("Alignment of ", stringify!(DefElem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).defnamespace as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(defnamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).defname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(defname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).arg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).defaction as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(defaction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).location as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockingClause {
    pub type_: NodeTag,
    pub lockedRels: *mut List,
    pub strength: LockClauseStrength,
    pub waitPolicy: LockWaitPolicy,
}
#[test]
fn bindgen_test_layout_LockingClause() {
    assert_eq!(
        ::std::mem::size_of::<LockingClause>(),
        24usize,
        concat!("Size of: ", stringify!(LockingClause))
    );
    assert_eq!(
        ::std::mem::align_of::<LockingClause>(),
        8usize,
        concat!("Alignment of ", stringify!(LockingClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockingClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockingClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockingClause>())).lockedRels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LockingClause),
            "::",
            stringify!(lockedRels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockingClause>())).strength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LockingClause),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockingClause>())).waitPolicy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LockingClause),
            "::",
            stringify!(waitPolicy)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XmlSerialize {
    pub type_: NodeTag,
    pub xmloption: XmlOptionType,
    pub expr: *mut Node,
    pub typeName: *mut TypeName,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_XmlSerialize() {
    assert_eq!(
        ::std::mem::size_of::<XmlSerialize>(),
        32usize,
        concat!("Size of: ", stringify!(XmlSerialize))
    );
    assert_eq!(
        ::std::mem::align_of::<XmlSerialize>(),
        8usize,
        concat!("Alignment of ", stringify!(XmlSerialize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).xmloption as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(xmloption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionElem {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub expr: *mut Node,
    pub collation: *mut List,
    pub opclass: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionElem() {
    assert_eq!(
        ::std::mem::size_of::<PartitionElem>(),
        48usize,
        concat!("Size of: ", stringify!(PartitionElem))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionElem>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionElem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).expr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).collation as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).opclass as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(opclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionSpec {
    pub type_: NodeTag,
    pub strategy: *mut ::std::os::raw::c_char,
    pub partParams: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionSpec() {
    assert_eq!(
        ::std::mem::size_of::<PartitionSpec>(),
        32usize,
        concat!("Size of: ", stringify!(PartitionSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionSpec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSpec>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSpec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSpec>())).strategy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSpec),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSpec>())).partParams as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSpec),
            "::",
            stringify!(partParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSpec>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSpec),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionBoundSpec {
    pub type_: NodeTag,
    pub strategy: ::std::os::raw::c_char,
    pub is_default: bool,
    pub modulus: ::std::os::raw::c_int,
    pub remainder: ::std::os::raw::c_int,
    pub listdatums: *mut List,
    pub lowerdatums: *mut List,
    pub upperdatums: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionBoundSpec() {
    assert_eq!(
        ::std::mem::size_of::<PartitionBoundSpec>(),
        48usize,
        concat!("Size of: ", stringify!(PartitionBoundSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionBoundSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionBoundSpec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).strategy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).is_default as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).modulus as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(modulus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).remainder as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(remainder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).listdatums as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(listdatums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).lowerdatums as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(lowerdatums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).upperdatums as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(upperdatums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(location)
        )
    );
}
pub const PartitionRangeDatumKind_PARTITION_RANGE_DATUM_MINVALUE: PartitionRangeDatumKind = -1;
pub const PartitionRangeDatumKind_PARTITION_RANGE_DATUM_VALUE: PartitionRangeDatumKind = 0;
pub const PartitionRangeDatumKind_PARTITION_RANGE_DATUM_MAXVALUE: PartitionRangeDatumKind = 1;
pub type PartitionRangeDatumKind = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionRangeDatum {
    pub type_: NodeTag,
    pub kind: PartitionRangeDatumKind,
    pub value: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionRangeDatum() {
    assert_eq!(
        ::std::mem::size_of::<PartitionRangeDatum>(),
        24usize,
        concat!("Size of: ", stringify!(PartitionRangeDatum))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionRangeDatum>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionRangeDatum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionRangeDatum>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionRangeDatum),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionRangeDatum>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionRangeDatum),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionRangeDatum>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionRangeDatum),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionRangeDatum>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionRangeDatum),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionCmd {
    pub type_: NodeTag,
    pub name: *mut RangeVar,
    pub bound: *mut PartitionBoundSpec,
}
#[test]
fn bindgen_test_layout_PartitionCmd() {
    assert_eq!(
        ::std::mem::size_of::<PartitionCmd>(),
        24usize,
        concat!("Size of: ", stringify!(PartitionCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionCmd>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionCmd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionCmd>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionCmd),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionCmd>())).bound as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionCmd),
            "::",
            stringify!(bound)
        )
    );
}
pub const RTEKind_RTE_RELATION: RTEKind = 0;
pub const RTEKind_RTE_SUBQUERY: RTEKind = 1;
pub const RTEKind_RTE_JOIN: RTEKind = 2;
pub const RTEKind_RTE_FUNCTION: RTEKind = 3;
pub const RTEKind_RTE_TABLEFUNC: RTEKind = 4;
pub const RTEKind_RTE_VALUES: RTEKind = 5;
pub const RTEKind_RTE_CTE: RTEKind = 6;
pub const RTEKind_RTE_NAMEDTUPLESTORE: RTEKind = 7;
pub type RTEKind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeTblEntry {
    pub type_: NodeTag,
    pub rtekind: RTEKind,
    pub relid: Oid,
    pub relkind: ::std::os::raw::c_char,
    pub tablesample: *mut TableSampleClause,
    pub subquery: *mut Query,
    pub security_barrier: bool,
    pub jointype: JoinType,
    pub joinaliasvars: *mut List,
    pub functions: *mut List,
    pub funcordinality: bool,
    pub tablefunc: *mut TableFunc,
    pub values_lists: *mut List,
    pub ctename: *mut ::std::os::raw::c_char,
    pub ctelevelsup: Index,
    pub self_reference: bool,
    pub coltypes: *mut List,
    pub coltypmods: *mut List,
    pub colcollations: *mut List,
    pub enrname: *mut ::std::os::raw::c_char,
    pub enrtuples: f64,
    pub alias: *mut Alias,
    pub eref: *mut Alias,
    pub lateral: bool,
    pub inh: bool,
    pub inFromCl: bool,
    pub requiredPerms: AclMode,
    pub checkAsUser: Oid,
    pub selectedCols: *mut Bitmapset,
    pub insertedCols: *mut Bitmapset,
    pub updatedCols: *mut Bitmapset,
    pub securityQuals: *mut List,
}
#[test]
fn bindgen_test_layout_RangeTblEntry() {
    assert_eq!(
        ::std::mem::size_of::<RangeTblEntry>(),
        200usize,
        concat!("Size of: ", stringify!(RangeTblEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTblEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTblEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).rtekind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(rtekind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).relid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).relkind as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(relkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).tablesample as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(tablesample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).subquery as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(subquery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).security_barrier as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(security_barrier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).jointype as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).joinaliasvars as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(joinaliasvars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).functions as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).funcordinality as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(funcordinality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).tablefunc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(tablefunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).values_lists as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(values_lists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).ctename as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(ctename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).ctelevelsup as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(ctelevelsup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).self_reference as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(self_reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).coltypes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(coltypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).coltypmods as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(coltypmods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).colcollations as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(colcollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).enrname as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(enrname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).enrtuples as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(enrtuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).alias as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).eref as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(eref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).lateral as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).inh as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(inh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).inFromCl as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(inFromCl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).requiredPerms as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(requiredPerms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).checkAsUser as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(checkAsUser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).selectedCols as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(selectedCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).insertedCols as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(insertedCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).updatedCols as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(updatedCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).securityQuals as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(securityQuals)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RangeTblFunction {
    pub type_: NodeTag,
    pub funcexpr: *mut Node,
    pub funccolcount: ::std::os::raw::c_int,
    pub funccolnames: *mut List,
    pub funccoltypes: *mut List,
    pub funccoltypmods: *mut List,
    pub funccolcollations: *mut List,
    pub funcparams: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_RangeTblFunction() {
    assert_eq!(
        ::std::mem::size_of::<RangeTblFunction>(),
        64usize,
        concat!("Size of: ", stringify!(RangeTblFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTblFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTblFunction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funcexpr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funcexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funccolcount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccolcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funccolnames as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccolnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funccoltypes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccoltypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funccoltypmods as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccoltypmods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RangeTblFunction>())).funccolcollations as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccolcollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funcparams as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funcparams)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TableSampleClause {
    pub type_: NodeTag,
    pub tsmhandler: Oid,
    pub args: *mut List,
    pub repeatable: *mut Expr,
}
#[test]
fn bindgen_test_layout_TableSampleClause() {
    assert_eq!(
        ::std::mem::size_of::<TableSampleClause>(),
        24usize,
        concat!("Size of: ", stringify!(TableSampleClause))
    );
    assert_eq!(
        ::std::mem::align_of::<TableSampleClause>(),
        8usize,
        concat!("Alignment of ", stringify!(TableSampleClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableSampleClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableSampleClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableSampleClause>())).tsmhandler as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TableSampleClause),
            "::",
            stringify!(tsmhandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableSampleClause>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TableSampleClause),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableSampleClause>())).repeatable as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TableSampleClause),
            "::",
            stringify!(repeatable)
        )
    );
}
pub const WCOKind_WCO_VIEW_CHECK: WCOKind = 0;
pub const WCOKind_WCO_RLS_INSERT_CHECK: WCOKind = 1;
pub const WCOKind_WCO_RLS_UPDATE_CHECK: WCOKind = 2;
pub const WCOKind_WCO_RLS_CONFLICT_CHECK: WCOKind = 3;
pub type WCOKind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WithCheckOption {
    pub type_: NodeTag,
    pub kind: WCOKind,
    pub relname: *mut ::std::os::raw::c_char,
    pub polname: *mut ::std::os::raw::c_char,
    pub qual: *mut Node,
    pub cascaded: bool,
}
#[test]
fn bindgen_test_layout_WithCheckOption() {
    assert_eq!(
        ::std::mem::size_of::<WithCheckOption>(),
        40usize,
        concat!("Size of: ", stringify!(WithCheckOption))
    );
    assert_eq!(
        ::std::mem::align_of::<WithCheckOption>(),
        8usize,
        concat!("Alignment of ", stringify!(WithCheckOption))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).relname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(relname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).polname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(polname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).qual as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).cascaded as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(cascaded)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SortGroupClause {
    pub type_: NodeTag,
    pub tleSortGroupRef: Index,
    pub eqop: Oid,
    pub sortop: Oid,
    pub nulls_first: bool,
    pub hashable: bool,
}
#[test]
fn bindgen_test_layout_SortGroupClause() {
    assert_eq!(
        ::std::mem::size_of::<SortGroupClause>(),
        20usize,
        concat!("Size of: ", stringify!(SortGroupClause))
    );
    assert_eq!(
        ::std::mem::align_of::<SortGroupClause>(),
        4usize,
        concat!("Alignment of ", stringify!(SortGroupClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).tleSortGroupRef as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(tleSortGroupRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).eqop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(eqop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).sortop as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(sortop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).nulls_first as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(nulls_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).hashable as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(hashable)
        )
    );
}
pub const GroupingSetKind_GROUPING_SET_EMPTY: GroupingSetKind = 0;
pub const GroupingSetKind_GROUPING_SET_SIMPLE: GroupingSetKind = 1;
pub const GroupingSetKind_GROUPING_SET_ROLLUP: GroupingSetKind = 2;
pub const GroupingSetKind_GROUPING_SET_CUBE: GroupingSetKind = 3;
pub const GroupingSetKind_GROUPING_SET_SETS: GroupingSetKind = 4;
pub type GroupingSetKind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GroupingSet {
    pub type_: NodeTag,
    pub kind: GroupingSetKind,
    pub content: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GroupingSet() {
    assert_eq!(
        ::std::mem::size_of::<GroupingSet>(),
        24usize,
        concat!("Size of: ", stringify!(GroupingSet))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupingSet>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupingSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSet>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSet),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSet>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSet),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSet>())).content as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSet),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSet>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSet),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowClause {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub refname: *mut ::std::os::raw::c_char,
    pub partitionClause: *mut List,
    pub orderClause: *mut List,
    pub frameOptions: ::std::os::raw::c_int,
    pub startOffset: *mut Node,
    pub endOffset: *mut Node,
    pub startInRangeFunc: Oid,
    pub endInRangeFunc: Oid,
    pub inRangeColl: Oid,
    pub inRangeAsc: bool,
    pub inRangeNullsFirst: bool,
    pub winref: Index,
    pub copiedOrder: bool,
}
#[test]
fn bindgen_test_layout_WindowClause() {
    assert_eq!(
        ::std::mem::size_of::<WindowClause>(),
        88usize,
        concat!("Size of: ", stringify!(WindowClause))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowClause>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).refname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(refname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).partitionClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(partitionClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).orderClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(orderClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).frameOptions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(frameOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).startOffset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).endOffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(endOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).startInRangeFunc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(startInRangeFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).endInRangeFunc as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(endInRangeFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).inRangeColl as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(inRangeColl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).inRangeAsc as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(inRangeAsc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).inRangeNullsFirst as *const _ as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(inRangeNullsFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).winref as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(winref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).copiedOrder as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(copiedOrder)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RowMarkClause {
    pub type_: NodeTag,
    pub rti: Index,
    pub strength: LockClauseStrength,
    pub waitPolicy: LockWaitPolicy,
    pub pushedDown: bool,
}
#[test]
fn bindgen_test_layout_RowMarkClause() {
    assert_eq!(
        ::std::mem::size_of::<RowMarkClause>(),
        20usize,
        concat!("Size of: ", stringify!(RowMarkClause))
    );
    assert_eq!(
        ::std::mem::align_of::<RowMarkClause>(),
        4usize,
        concat!("Alignment of ", stringify!(RowMarkClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).rti as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(rti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).strength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).waitPolicy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(waitPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).pushedDown as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(pushedDown)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WithClause {
    pub type_: NodeTag,
    pub ctes: *mut List,
    pub recursive: bool,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WithClause() {
    assert_eq!(
        ::std::mem::size_of::<WithClause>(),
        24usize,
        concat!("Size of: ", stringify!(WithClause))
    );
    assert_eq!(
        ::std::mem::align_of::<WithClause>(),
        8usize,
        concat!("Alignment of ", stringify!(WithClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WithClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithClause>())).ctes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WithClause),
            "::",
            stringify!(ctes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithClause>())).recursive as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WithClause),
            "::",
            stringify!(recursive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithClause>())).location as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WithClause),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct InferClause {
    pub type_: NodeTag,
    pub indexElems: *mut List,
    pub whereClause: *mut Node,
    pub conname: *mut ::std::os::raw::c_char,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_InferClause() {
    assert_eq!(
        ::std::mem::size_of::<InferClause>(),
        40usize,
        concat!("Size of: ", stringify!(InferClause))
    );
    assert_eq!(
        ::std::mem::align_of::<InferClause>(),
        8usize,
        concat!("Alignment of ", stringify!(InferClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).indexElems as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(indexElems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).whereClause as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).conname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(conname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OnConflictClause {
    pub type_: NodeTag,
    pub action: OnConflictAction,
    pub infer: *mut InferClause,
    pub targetList: *mut List,
    pub whereClause: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OnConflictClause() {
    assert_eq!(
        ::std::mem::size_of::<OnConflictClause>(),
        40usize,
        concat!("Size of: ", stringify!(OnConflictClause))
    );
    assert_eq!(
        ::std::mem::align_of::<OnConflictClause>(),
        8usize,
        concat!("Alignment of ", stringify!(OnConflictClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).action as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).infer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(infer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).targetList as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).whereClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CommonTableExpr {
    pub type_: NodeTag,
    pub ctename: *mut ::std::os::raw::c_char,
    pub aliascolnames: *mut List,
    pub ctequery: *mut Node,
    pub location: ::std::os::raw::c_int,
    pub cterecursive: bool,
    pub cterefcount: ::std::os::raw::c_int,
    pub ctecolnames: *mut List,
    pub ctecoltypes: *mut List,
    pub ctecoltypmods: *mut List,
    pub ctecolcollations: *mut List,
}
#[test]
fn bindgen_test_layout_CommonTableExpr() {
    assert_eq!(
        ::std::mem::size_of::<CommonTableExpr>(),
        80usize,
        concat!("Size of: ", stringify!(CommonTableExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CommonTableExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CommonTableExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctename as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).aliascolnames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(aliascolnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctequery as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctequery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).cterecursive as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(cterecursive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).cterefcount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(cterefcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctecolnames as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctecolnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctecoltypes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctecoltypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctecoltypmods as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctecoltypmods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CommonTableExpr>())).ctecolcollations as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctecolcollations)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TriggerTransition {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub isNew: bool,
    pub isTable: bool,
}
#[test]
fn bindgen_test_layout_TriggerTransition() {
    assert_eq!(
        ::std::mem::size_of::<TriggerTransition>(),
        24usize,
        concat!("Size of: ", stringify!(TriggerTransition))
    );
    assert_eq!(
        ::std::mem::align_of::<TriggerTransition>(),
        8usize,
        concat!("Alignment of ", stringify!(TriggerTransition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerTransition>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerTransition),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerTransition>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerTransition),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerTransition>())).isNew as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerTransition),
            "::",
            stringify!(isNew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerTransition>())).isTable as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerTransition),
            "::",
            stringify!(isTable)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RawStmt {
    pub type_: NodeTag,
    pub stmt: *mut Node,
    pub stmt_location: ::std::os::raw::c_int,
    pub stmt_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RawStmt() {
    assert_eq!(
        ::std::mem::size_of::<RawStmt>(),
        24usize,
        concat!("Size of: ", stringify!(RawStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<RawStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(RawStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RawStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RawStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RawStmt>())).stmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RawStmt),
            "::",
            stringify!(stmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RawStmt>())).stmt_location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RawStmt),
            "::",
            stringify!(stmt_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RawStmt>())).stmt_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RawStmt),
            "::",
            stringify!(stmt_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct InsertStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub cols: *mut List,
    pub selectStmt: *mut Node,
    pub onConflictClause: *mut OnConflictClause,
    pub returningList: *mut List,
    pub withClause: *mut WithClause,
    pub override_: OverridingKind,
}
#[test]
fn bindgen_test_layout_InsertStmt() {
    assert_eq!(
        ::std::mem::size_of::<InsertStmt>(),
        64usize,
        concat!("Size of: ", stringify!(InsertStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<InsertStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(InsertStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).cols as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).selectStmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(selectStmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).onConflictClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(onConflictClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).returningList as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(returningList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).withClause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(withClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).override_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(override_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DeleteStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub usingClause: *mut List,
    pub whereClause: *mut Node,
    pub returningList: *mut List,
    pub withClause: *mut WithClause,
}
#[test]
fn bindgen_test_layout_DeleteStmt() {
    assert_eq!(
        ::std::mem::size_of::<DeleteStmt>(),
        48usize,
        concat!("Size of: ", stringify!(DeleteStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DeleteStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DeleteStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).usingClause as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(usingClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).whereClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).returningList as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(returningList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).withClause as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(withClause)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UpdateStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub targetList: *mut List,
    pub whereClause: *mut Node,
    pub fromClause: *mut List,
    pub returningList: *mut List,
    pub withClause: *mut WithClause,
}
#[test]
fn bindgen_test_layout_UpdateStmt() {
    assert_eq!(
        ::std::mem::size_of::<UpdateStmt>(),
        56usize,
        concat!("Size of: ", stringify!(UpdateStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<UpdateStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(UpdateStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).targetList as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).whereClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).fromClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(fromClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).returningList as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(returningList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).withClause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(withClause)
        )
    );
}
pub const SetOperation_SETOP_NONE: SetOperation = 0;
pub const SetOperation_SETOP_UNION: SetOperation = 1;
pub const SetOperation_SETOP_INTERSECT: SetOperation = 2;
pub const SetOperation_SETOP_EXCEPT: SetOperation = 3;
pub type SetOperation = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SelectStmt {
    pub type_: NodeTag,
    pub distinctClause: *mut List,
    pub intoClause: *mut IntoClause,
    pub targetList: *mut List,
    pub fromClause: *mut List,
    pub whereClause: *mut Node,
    pub groupClause: *mut List,
    pub havingClause: *mut Node,
    pub windowClause: *mut List,
    pub valuesLists: *mut List,
    pub sortClause: *mut List,
    pub limitOffset: *mut Node,
    pub limitCount: *mut Node,
    pub lockingClause: *mut List,
    pub withClause: *mut WithClause,
    pub op: SetOperation,
    pub all: bool,
    pub larg: *mut SelectStmt,
    pub rarg: *mut SelectStmt,
}
#[test]
fn bindgen_test_layout_SelectStmt() {
    assert_eq!(
        ::std::mem::size_of::<SelectStmt>(),
        144usize,
        concat!("Size of: ", stringify!(SelectStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<SelectStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(SelectStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).distinctClause as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(distinctClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).intoClause as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(intoClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).targetList as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).fromClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(fromClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).whereClause as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).groupClause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(groupClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).havingClause as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(havingClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).windowClause as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(windowClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).valuesLists as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(valuesLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).sortClause as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(sortClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).limitOffset as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).limitCount as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(limitCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).lockingClause as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(lockingClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).withClause as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(withClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).op as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).all as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).larg as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(larg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).rarg as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(rarg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SetOperationStmt {
    pub type_: NodeTag,
    pub op: SetOperation,
    pub all: bool,
    pub larg: *mut Node,
    pub rarg: *mut Node,
    pub colTypes: *mut List,
    pub colTypmods: *mut List,
    pub colCollations: *mut List,
    pub groupClauses: *mut List,
}
#[test]
fn bindgen_test_layout_SetOperationStmt() {
    assert_eq!(
        ::std::mem::size_of::<SetOperationStmt>(),
        64usize,
        concat!("Size of: ", stringify!(SetOperationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<SetOperationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(SetOperationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).all as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).larg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(larg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).rarg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(rarg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).colTypes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(colTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).colTypmods as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(colTypmods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).colCollations as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(colCollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).groupClauses as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(groupClauses)
        )
    );
}
pub const ObjectType_OBJECT_ACCESS_METHOD: ObjectType = 0;
pub const ObjectType_OBJECT_AGGREGATE: ObjectType = 1;
pub const ObjectType_OBJECT_AMOP: ObjectType = 2;
pub const ObjectType_OBJECT_AMPROC: ObjectType = 3;
pub const ObjectType_OBJECT_ATTRIBUTE: ObjectType = 4;
pub const ObjectType_OBJECT_CAST: ObjectType = 5;
pub const ObjectType_OBJECT_COLUMN: ObjectType = 6;
pub const ObjectType_OBJECT_COLLATION: ObjectType = 7;
pub const ObjectType_OBJECT_CONVERSION: ObjectType = 8;
pub const ObjectType_OBJECT_DATABASE: ObjectType = 9;
pub const ObjectType_OBJECT_DEFAULT: ObjectType = 10;
pub const ObjectType_OBJECT_DEFACL: ObjectType = 11;
pub const ObjectType_OBJECT_DOMAIN: ObjectType = 12;
pub const ObjectType_OBJECT_DOMCONSTRAINT: ObjectType = 13;
pub const ObjectType_OBJECT_EVENT_TRIGGER: ObjectType = 14;
pub const ObjectType_OBJECT_EXTENSION: ObjectType = 15;
pub const ObjectType_OBJECT_FDW: ObjectType = 16;
pub const ObjectType_OBJECT_FOREIGN_SERVER: ObjectType = 17;
pub const ObjectType_OBJECT_FOREIGN_TABLE: ObjectType = 18;
pub const ObjectType_OBJECT_FUNCTION: ObjectType = 19;
pub const ObjectType_OBJECT_INDEX: ObjectType = 20;
pub const ObjectType_OBJECT_LANGUAGE: ObjectType = 21;
pub const ObjectType_OBJECT_LARGEOBJECT: ObjectType = 22;
pub const ObjectType_OBJECT_MATVIEW: ObjectType = 23;
pub const ObjectType_OBJECT_OPCLASS: ObjectType = 24;
pub const ObjectType_OBJECT_OPERATOR: ObjectType = 25;
pub const ObjectType_OBJECT_OPFAMILY: ObjectType = 26;
pub const ObjectType_OBJECT_POLICY: ObjectType = 27;
pub const ObjectType_OBJECT_PROCEDURE: ObjectType = 28;
pub const ObjectType_OBJECT_PUBLICATION: ObjectType = 29;
pub const ObjectType_OBJECT_PUBLICATION_REL: ObjectType = 30;
pub const ObjectType_OBJECT_ROLE: ObjectType = 31;
pub const ObjectType_OBJECT_ROUTINE: ObjectType = 32;
pub const ObjectType_OBJECT_RULE: ObjectType = 33;
pub const ObjectType_OBJECT_SCHEMA: ObjectType = 34;
pub const ObjectType_OBJECT_SEQUENCE: ObjectType = 35;
pub const ObjectType_OBJECT_SUBSCRIPTION: ObjectType = 36;
pub const ObjectType_OBJECT_STATISTIC_EXT: ObjectType = 37;
pub const ObjectType_OBJECT_TABCONSTRAINT: ObjectType = 38;
pub const ObjectType_OBJECT_TABLE: ObjectType = 39;
pub const ObjectType_OBJECT_TABLESPACE: ObjectType = 40;
pub const ObjectType_OBJECT_TRANSFORM: ObjectType = 41;
pub const ObjectType_OBJECT_TRIGGER: ObjectType = 42;
pub const ObjectType_OBJECT_TSCONFIGURATION: ObjectType = 43;
pub const ObjectType_OBJECT_TSDICTIONARY: ObjectType = 44;
pub const ObjectType_OBJECT_TSPARSER: ObjectType = 45;
pub const ObjectType_OBJECT_TSTEMPLATE: ObjectType = 46;
pub const ObjectType_OBJECT_TYPE: ObjectType = 47;
pub const ObjectType_OBJECT_USER_MAPPING: ObjectType = 48;
pub const ObjectType_OBJECT_VIEW: ObjectType = 49;
pub type ObjectType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateSchemaStmt {
    pub type_: NodeTag,
    pub schemaname: *mut ::std::os::raw::c_char,
    pub authrole: *mut RoleSpec,
    pub schemaElts: *mut List,
    pub if_not_exists: bool,
}
#[test]
fn bindgen_test_layout_CreateSchemaStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateSchemaStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateSchemaStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateSchemaStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateSchemaStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).schemaname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(schemaname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).authrole as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(authrole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).schemaElts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(schemaElts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).if_not_exists as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
pub const DropBehavior_DROP_RESTRICT: DropBehavior = 0;
pub const DropBehavior_DROP_CASCADE: DropBehavior = 1;
pub type DropBehavior = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterTableStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub cmds: *mut List,
    pub relkind: ObjectType,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_AlterTableStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTableStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterTableStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTableStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTableStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).cmds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(cmds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).relkind as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(relkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).missing_ok as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
pub const AlterTableType_AT_AddColumn: AlterTableType = 0;
pub const AlterTableType_AT_AddColumnRecurse: AlterTableType = 1;
pub const AlterTableType_AT_AddColumnToView: AlterTableType = 2;
pub const AlterTableType_AT_ColumnDefault: AlterTableType = 3;
pub const AlterTableType_AT_DropNotNull: AlterTableType = 4;
pub const AlterTableType_AT_SetNotNull: AlterTableType = 5;
pub const AlterTableType_AT_SetStatistics: AlterTableType = 6;
pub const AlterTableType_AT_SetOptions: AlterTableType = 7;
pub const AlterTableType_AT_ResetOptions: AlterTableType = 8;
pub const AlterTableType_AT_SetStorage: AlterTableType = 9;
pub const AlterTableType_AT_DropColumn: AlterTableType = 10;
pub const AlterTableType_AT_DropColumnRecurse: AlterTableType = 11;
pub const AlterTableType_AT_AddIndex: AlterTableType = 12;
pub const AlterTableType_AT_ReAddIndex: AlterTableType = 13;
pub const AlterTableType_AT_AddConstraint: AlterTableType = 14;
pub const AlterTableType_AT_AddConstraintRecurse: AlterTableType = 15;
pub const AlterTableType_AT_ReAddConstraint: AlterTableType = 16;
pub const AlterTableType_AT_ReAddDomainConstraint: AlterTableType = 17;
pub const AlterTableType_AT_AlterConstraint: AlterTableType = 18;
pub const AlterTableType_AT_ValidateConstraint: AlterTableType = 19;
pub const AlterTableType_AT_ValidateConstraintRecurse: AlterTableType = 20;
pub const AlterTableType_AT_ProcessedConstraint: AlterTableType = 21;
pub const AlterTableType_AT_AddIndexConstraint: AlterTableType = 22;
pub const AlterTableType_AT_DropConstraint: AlterTableType = 23;
pub const AlterTableType_AT_DropConstraintRecurse: AlterTableType = 24;
pub const AlterTableType_AT_ReAddComment: AlterTableType = 25;
pub const AlterTableType_AT_AlterColumnType: AlterTableType = 26;
pub const AlterTableType_AT_AlterColumnGenericOptions: AlterTableType = 27;
pub const AlterTableType_AT_ChangeOwner: AlterTableType = 28;
pub const AlterTableType_AT_ClusterOn: AlterTableType = 29;
pub const AlterTableType_AT_DropCluster: AlterTableType = 30;
pub const AlterTableType_AT_SetLogged: AlterTableType = 31;
pub const AlterTableType_AT_SetUnLogged: AlterTableType = 32;
pub const AlterTableType_AT_AddOids: AlterTableType = 33;
pub const AlterTableType_AT_AddOidsRecurse: AlterTableType = 34;
pub const AlterTableType_AT_DropOids: AlterTableType = 35;
pub const AlterTableType_AT_SetTableSpace: AlterTableType = 36;
pub const AlterTableType_AT_SetRelOptions: AlterTableType = 37;
pub const AlterTableType_AT_ResetRelOptions: AlterTableType = 38;
pub const AlterTableType_AT_ReplaceRelOptions: AlterTableType = 39;
pub const AlterTableType_AT_EnableTrig: AlterTableType = 40;
pub const AlterTableType_AT_EnableAlwaysTrig: AlterTableType = 41;
pub const AlterTableType_AT_EnableReplicaTrig: AlterTableType = 42;
pub const AlterTableType_AT_DisableTrig: AlterTableType = 43;
pub const AlterTableType_AT_EnableTrigAll: AlterTableType = 44;
pub const AlterTableType_AT_DisableTrigAll: AlterTableType = 45;
pub const AlterTableType_AT_EnableTrigUser: AlterTableType = 46;
pub const AlterTableType_AT_DisableTrigUser: AlterTableType = 47;
pub const AlterTableType_AT_EnableRule: AlterTableType = 48;
pub const AlterTableType_AT_EnableAlwaysRule: AlterTableType = 49;
pub const AlterTableType_AT_EnableReplicaRule: AlterTableType = 50;
pub const AlterTableType_AT_DisableRule: AlterTableType = 51;
pub const AlterTableType_AT_AddInherit: AlterTableType = 52;
pub const AlterTableType_AT_DropInherit: AlterTableType = 53;
pub const AlterTableType_AT_AddOf: AlterTableType = 54;
pub const AlterTableType_AT_DropOf: AlterTableType = 55;
pub const AlterTableType_AT_ReplicaIdentity: AlterTableType = 56;
pub const AlterTableType_AT_EnableRowSecurity: AlterTableType = 57;
pub const AlterTableType_AT_DisableRowSecurity: AlterTableType = 58;
pub const AlterTableType_AT_ForceRowSecurity: AlterTableType = 59;
pub const AlterTableType_AT_NoForceRowSecurity: AlterTableType = 60;
pub const AlterTableType_AT_GenericOptions: AlterTableType = 61;
pub const AlterTableType_AT_AttachPartition: AlterTableType = 62;
pub const AlterTableType_AT_DetachPartition: AlterTableType = 63;
pub const AlterTableType_AT_AddIdentity: AlterTableType = 64;
pub const AlterTableType_AT_SetIdentity: AlterTableType = 65;
pub const AlterTableType_AT_DropIdentity: AlterTableType = 66;
pub type AlterTableType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReplicaIdentityStmt {
    pub type_: NodeTag,
    pub identity_type: ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ReplicaIdentityStmt() {
    assert_eq!(
        ::std::mem::size_of::<ReplicaIdentityStmt>(),
        16usize,
        concat!("Size of: ", stringify!(ReplicaIdentityStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ReplicaIdentityStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ReplicaIdentityStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicaIdentityStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicaIdentityStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicaIdentityStmt>())).identity_type as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicaIdentityStmt),
            "::",
            stringify!(identity_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicaIdentityStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicaIdentityStmt),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterTableCmd {
    pub type_: NodeTag,
    pub subtype: AlterTableType,
    pub name: *mut ::std::os::raw::c_char,
    pub num: int16,
    pub newowner: *mut RoleSpec,
    pub def: *mut Node,
    pub behavior: DropBehavior,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_AlterTableCmd() {
    assert_eq!(
        ::std::mem::size_of::<AlterTableCmd>(),
        48usize,
        concat!("Size of: ", stringify!(AlterTableCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTableCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTableCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).subtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).num as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).newowner as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(newowner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).def as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).behavior as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).missing_ok as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterCollationStmt {
    pub type_: NodeTag,
    pub collname: *mut List,
}
#[test]
fn bindgen_test_layout_AlterCollationStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterCollationStmt>(),
        16usize,
        concat!("Size of: ", stringify!(AlterCollationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterCollationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterCollationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterCollationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterCollationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterCollationStmt>())).collname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterCollationStmt),
            "::",
            stringify!(collname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterDomainStmt {
    pub type_: NodeTag,
    pub subtype: ::std::os::raw::c_char,
    pub typeName: *mut List,
    pub name: *mut ::std::os::raw::c_char,
    pub def: *mut Node,
    pub behavior: DropBehavior,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_AlterDomainStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterDomainStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterDomainStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterDomainStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterDomainStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).subtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).typeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).def as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).behavior as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).missing_ok as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
pub const GrantTargetType_ACL_TARGET_OBJECT: GrantTargetType = 0;
pub const GrantTargetType_ACL_TARGET_ALL_IN_SCHEMA: GrantTargetType = 1;
pub const GrantTargetType_ACL_TARGET_DEFAULTS: GrantTargetType = 2;
pub type GrantTargetType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GrantStmt {
    pub type_: NodeTag,
    pub is_grant: bool,
    pub targtype: GrantTargetType,
    pub objtype: ObjectType,
    pub objects: *mut List,
    pub privileges: *mut List,
    pub grantees: *mut List,
    pub grant_option: bool,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_GrantStmt() {
    assert_eq!(
        ::std::mem::size_of::<GrantStmt>(),
        48usize,
        concat!("Size of: ", stringify!(GrantStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<GrantStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(GrantStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).is_grant as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(is_grant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).targtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(targtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).objtype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).objects as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).privileges as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(privileges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).grantees as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(grantees)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).grant_option as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(grant_option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).behavior as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ObjectWithArgs {
    pub type_: NodeTag,
    pub objname: *mut List,
    pub objargs: *mut List,
    pub args_unspecified: bool,
}
#[test]
fn bindgen_test_layout_ObjectWithArgs() {
    assert_eq!(
        ::std::mem::size_of::<ObjectWithArgs>(),
        32usize,
        concat!("Size of: ", stringify!(ObjectWithArgs))
    );
    assert_eq!(
        ::std::mem::align_of::<ObjectWithArgs>(),
        8usize,
        concat!("Alignment of ", stringify!(ObjectWithArgs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectWithArgs>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectWithArgs),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectWithArgs>())).objname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectWithArgs),
            "::",
            stringify!(objname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectWithArgs>())).objargs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectWithArgs),
            "::",
            stringify!(objargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectWithArgs>())).args_unspecified as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectWithArgs),
            "::",
            stringify!(args_unspecified)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AccessPriv {
    pub type_: NodeTag,
    pub priv_name: *mut ::std::os::raw::c_char,
    pub cols: *mut List,
}
#[test]
fn bindgen_test_layout_AccessPriv() {
    assert_eq!(
        ::std::mem::size_of::<AccessPriv>(),
        24usize,
        concat!("Size of: ", stringify!(AccessPriv))
    );
    assert_eq!(
        ::std::mem::align_of::<AccessPriv>(),
        8usize,
        concat!("Alignment of ", stringify!(AccessPriv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AccessPriv>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AccessPriv),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AccessPriv>())).priv_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AccessPriv),
            "::",
            stringify!(priv_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AccessPriv>())).cols as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AccessPriv),
            "::",
            stringify!(cols)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GrantRoleStmt {
    pub type_: NodeTag,
    pub granted_roles: *mut List,
    pub grantee_roles: *mut List,
    pub is_grant: bool,
    pub admin_opt: bool,
    pub grantor: *mut RoleSpec,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_GrantRoleStmt() {
    assert_eq!(
        ::std::mem::size_of::<GrantRoleStmt>(),
        48usize,
        concat!("Size of: ", stringify!(GrantRoleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<GrantRoleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(GrantRoleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).granted_roles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(granted_roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).grantee_roles as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(grantee_roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).is_grant as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(is_grant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).admin_opt as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(admin_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).grantor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(grantor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).behavior as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterDefaultPrivilegesStmt {
    pub type_: NodeTag,
    pub options: *mut List,
    pub action: *mut GrantStmt,
}
#[test]
fn bindgen_test_layout_AlterDefaultPrivilegesStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterDefaultPrivilegesStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterDefaultPrivilegesStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterDefaultPrivilegesStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterDefaultPrivilegesStmt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterDefaultPrivilegesStmt>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDefaultPrivilegesStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterDefaultPrivilegesStmt>())).options as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDefaultPrivilegesStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterDefaultPrivilegesStmt>())).action as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDefaultPrivilegesStmt),
            "::",
            stringify!(action)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CopyStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub query: *mut Node,
    pub attlist: *mut List,
    pub is_from: bool,
    pub is_program: bool,
    pub filename: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CopyStmt() {
    assert_eq!(
        ::std::mem::size_of::<CopyStmt>(),
        56usize,
        concat!("Size of: ", stringify!(CopyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CopyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CopyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).query as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).attlist as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(attlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).is_from as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(is_from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).is_program as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(is_program)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).filename as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).options as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(options)
        )
    );
}
pub const VariableSetKind_VAR_SET_VALUE: VariableSetKind = 0;
pub const VariableSetKind_VAR_SET_DEFAULT: VariableSetKind = 1;
pub const VariableSetKind_VAR_SET_CURRENT: VariableSetKind = 2;
pub const VariableSetKind_VAR_SET_MULTI: VariableSetKind = 3;
pub const VariableSetKind_VAR_RESET: VariableSetKind = 4;
pub const VariableSetKind_VAR_RESET_ALL: VariableSetKind = 5;
pub type VariableSetKind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VariableSetStmt {
    pub type_: NodeTag,
    pub kind: VariableSetKind,
    pub name: *mut ::std::os::raw::c_char,
    pub args: *mut List,
    pub is_local: bool,
}
#[test]
fn bindgen_test_layout_VariableSetStmt() {
    assert_eq!(
        ::std::mem::size_of::<VariableSetStmt>(),
        32usize,
        concat!("Size of: ", stringify!(VariableSetStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<VariableSetStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(VariableSetStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).is_local as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(is_local)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VariableShowStmt {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VariableShowStmt() {
    assert_eq!(
        ::std::mem::size_of::<VariableShowStmt>(),
        16usize,
        concat!("Size of: ", stringify!(VariableShowStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<VariableShowStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(VariableShowStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableShowStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableShowStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableShowStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableShowStmt),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub tableElts: *mut List,
    pub inhRelations: *mut List,
    pub partbound: *mut PartitionBoundSpec,
    pub partspec: *mut PartitionSpec,
    pub ofTypename: *mut TypeName,
    pub constraints: *mut List,
    pub options: *mut List,
    pub oncommit: OnCommitAction,
    pub tablespacename: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool,
}
#[test]
fn bindgen_test_layout_CreateStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateStmt>(),
        96usize,
        concat!("Size of: ", stringify!(CreateStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).tableElts as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(tableElts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).inhRelations as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(inhRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).partbound as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(partbound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).partspec as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(partspec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).ofTypename as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(ofTypename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).constraints as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).options as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).oncommit as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(oncommit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).tablespacename as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).if_not_exists as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
pub const ConstrType_CONSTR_NULL: ConstrType = 0;
pub const ConstrType_CONSTR_NOTNULL: ConstrType = 1;
pub const ConstrType_CONSTR_DEFAULT: ConstrType = 2;
pub const ConstrType_CONSTR_IDENTITY: ConstrType = 3;
pub const ConstrType_CONSTR_CHECK: ConstrType = 4;
pub const ConstrType_CONSTR_PRIMARY: ConstrType = 5;
pub const ConstrType_CONSTR_UNIQUE: ConstrType = 6;
pub const ConstrType_CONSTR_EXCLUSION: ConstrType = 7;
pub const ConstrType_CONSTR_FOREIGN: ConstrType = 8;
pub const ConstrType_CONSTR_ATTR_DEFERRABLE: ConstrType = 9;
pub const ConstrType_CONSTR_ATTR_NOT_DEFERRABLE: ConstrType = 10;
pub const ConstrType_CONSTR_ATTR_DEFERRED: ConstrType = 11;
pub const ConstrType_CONSTR_ATTR_IMMEDIATE: ConstrType = 12;
pub type ConstrType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Constraint {
    pub type_: NodeTag,
    pub contype: ConstrType,
    pub conname: *mut ::std::os::raw::c_char,
    pub deferrable: bool,
    pub initdeferred: bool,
    pub location: ::std::os::raw::c_int,
    pub is_no_inherit: bool,
    pub raw_expr: *mut Node,
    pub cooked_expr: *mut ::std::os::raw::c_char,
    pub generated_when: ::std::os::raw::c_char,
    pub keys: *mut List,
    pub including: *mut List,
    pub exclusions: *mut List,
    pub options: *mut List,
    pub indexname: *mut ::std::os::raw::c_char,
    pub indexspace: *mut ::std::os::raw::c_char,
    pub access_method: *mut ::std::os::raw::c_char,
    pub where_clause: *mut Node,
    pub pktable: *mut RangeVar,
    pub fk_attrs: *mut List,
    pub pk_attrs: *mut List,
    pub fk_matchtype: ::std::os::raw::c_char,
    pub fk_upd_action: ::std::os::raw::c_char,
    pub fk_del_action: ::std::os::raw::c_char,
    pub old_conpfeqop: *mut List,
    pub old_pktable_oid: Oid,
    pub skip_validation: bool,
    pub initially_valid: bool,
}
#[test]
fn bindgen_test_layout_Constraint() {
    assert_eq!(
        ::std::mem::size_of::<Constraint>(),
        168usize,
        concat!("Size of: ", stringify!(Constraint))
    );
    assert_eq!(
        ::std::mem::align_of::<Constraint>(),
        8usize,
        concat!("Alignment of ", stringify!(Constraint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).contype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(contype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).conname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(conname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).deferrable as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(deferrable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).initdeferred as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(initdeferred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).location as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).is_no_inherit as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(is_no_inherit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).raw_expr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(raw_expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).cooked_expr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(cooked_expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).generated_when as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(generated_when)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).keys as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).including as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(including)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).exclusions as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(exclusions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).options as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).indexname as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(indexname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).indexspace as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(indexspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).access_method as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(access_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).where_clause as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(where_clause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).pktable as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(pktable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).fk_attrs as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(fk_attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).pk_attrs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(pk_attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).fk_matchtype as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(fk_matchtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).fk_upd_action as *const _ as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(fk_upd_action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).fk_del_action as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(fk_del_action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).old_conpfeqop as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(old_conpfeqop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).old_pktable_oid as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(old_pktable_oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).skip_validation as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(skip_validation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).initially_valid as *const _ as usize },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(initially_valid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateTableSpaceStmt {
    pub type_: NodeTag,
    pub tablespacename: *mut ::std::os::raw::c_char,
    pub owner: *mut RoleSpec,
    pub location: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateTableSpaceStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateTableSpaceStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateTableSpaceStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateTableSpaceStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateTableSpaceStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableSpaceStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateTableSpaceStmt>())).tablespacename as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableSpaceStmt>())).owner as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableSpaceStmt>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableSpaceStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DropTableSpaceStmt {
    pub type_: NodeTag,
    pub tablespacename: *mut ::std::os::raw::c_char,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_DropTableSpaceStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropTableSpaceStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropTableSpaceStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropTableSpaceStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropTableSpaceStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropTableSpaceStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropTableSpaceStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DropTableSpaceStmt>())).tablespacename as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropTableSpaceStmt),
            "::",
            stringify!(tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropTableSpaceStmt>())).missing_ok as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropTableSpaceStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterTableSpaceOptionsStmt {
    pub type_: NodeTag,
    pub tablespacename: *mut ::std::os::raw::c_char,
    pub options: *mut List,
    pub isReset: bool,
}
#[test]
fn bindgen_test_layout_AlterTableSpaceOptionsStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTableSpaceOptionsStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterTableSpaceOptionsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTableSpaceOptionsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTableSpaceOptionsStmt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableSpaceOptionsStmt>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableSpaceOptionsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableSpaceOptionsStmt>())).tablespacename as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableSpaceOptionsStmt),
            "::",
            stringify!(tablespacename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableSpaceOptionsStmt>())).options as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableSpaceOptionsStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableSpaceOptionsStmt>())).isReset as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableSpaceOptionsStmt),
            "::",
            stringify!(isReset)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterTableMoveAllStmt {
    pub type_: NodeTag,
    pub orig_tablespacename: *mut ::std::os::raw::c_char,
    pub objtype: ObjectType,
    pub roles: *mut List,
    pub new_tablespacename: *mut ::std::os::raw::c_char,
    pub nowait: bool,
}
#[test]
fn bindgen_test_layout_AlterTableMoveAllStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTableMoveAllStmt>(),
        48usize,
        concat!("Size of: ", stringify!(AlterTableMoveAllStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTableMoveAllStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTableMoveAllStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).orig_tablespacename as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(orig_tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).objtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).roles as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).new_tablespacename as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(new_tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).nowait as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(nowait)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateExtensionStmt {
    pub type_: NodeTag,
    pub extname: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateExtensionStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateExtensionStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateExtensionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateExtensionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateExtensionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateExtensionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateExtensionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateExtensionStmt>())).extname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateExtensionStmt),
            "::",
            stringify!(extname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateExtensionStmt>())).if_not_exists as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateExtensionStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateExtensionStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateExtensionStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterExtensionStmt {
    pub type_: NodeTag,
    pub extname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterExtensionStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterExtensionStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterExtensionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterExtensionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterExtensionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterExtensionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterExtensionStmt>())).extname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionStmt),
            "::",
            stringify!(extname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterExtensionStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterExtensionContentsStmt {
    pub type_: NodeTag,
    pub extname: *mut ::std::os::raw::c_char,
    pub action: ::std::os::raw::c_int,
    pub objtype: ObjectType,
    pub object: *mut Node,
}
#[test]
fn bindgen_test_layout_AlterExtensionContentsStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterExtensionContentsStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterExtensionContentsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterExtensionContentsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterExtensionContentsStmt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).extname as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(extname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).action as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).objtype as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).object as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(object)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateFdwStmt {
    pub type_: NodeTag,
    pub fdwname: *mut ::std::os::raw::c_char,
    pub func_options: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateFdwStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateFdwStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateFdwStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateFdwStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateFdwStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFdwStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFdwStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFdwStmt>())).fdwname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFdwStmt),
            "::",
            stringify!(fdwname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFdwStmt>())).func_options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFdwStmt),
            "::",
            stringify!(func_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFdwStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFdwStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterFdwStmt {
    pub type_: NodeTag,
    pub fdwname: *mut ::std::os::raw::c_char,
    pub func_options: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterFdwStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterFdwStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterFdwStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterFdwStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterFdwStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFdwStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFdwStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFdwStmt>())).fdwname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFdwStmt),
            "::",
            stringify!(fdwname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFdwStmt>())).func_options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFdwStmt),
            "::",
            stringify!(func_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFdwStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFdwStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateForeignServerStmt {
    pub type_: NodeTag,
    pub servername: *mut ::std::os::raw::c_char,
    pub servertype: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub fdwname: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateForeignServerStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateForeignServerStmt>(),
        56usize,
        concat!("Size of: ", stringify!(CreateForeignServerStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateForeignServerStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateForeignServerStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignServerStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateForeignServerStmt>())).servername as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateForeignServerStmt>())).servertype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(servertype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignServerStmt>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignServerStmt>())).fdwname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(fdwname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateForeignServerStmt>())).if_not_exists as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignServerStmt>())).options as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterForeignServerStmt {
    pub type_: NodeTag,
    pub servername: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub options: *mut List,
    pub has_version: bool,
}
#[test]
fn bindgen_test_layout_AlterForeignServerStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterForeignServerStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterForeignServerStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterForeignServerStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterForeignServerStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterForeignServerStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterForeignServerStmt>())).servername as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterForeignServerStmt>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterForeignServerStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterForeignServerStmt>())).has_version as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(has_version)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateForeignTableStmt {
    pub base: CreateStmt,
    pub servername: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateForeignTableStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateForeignTableStmt>(),
        112usize,
        concat!("Size of: ", stringify!(CreateForeignTableStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateForeignTableStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateForeignTableStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignTableStmt>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignTableStmt),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateForeignTableStmt>())).servername as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignTableStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignTableStmt>())).options as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignTableStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateUserMappingStmt {
    pub type_: NodeTag,
    pub user: *mut RoleSpec,
    pub servername: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateUserMappingStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateUserMappingStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateUserMappingStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateUserMappingStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateUserMappingStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateUserMappingStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateUserMappingStmt>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateUserMappingStmt>())).servername as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateUserMappingStmt>())).if_not_exists as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateUserMappingStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterUserMappingStmt {
    pub type_: NodeTag,
    pub user: *mut RoleSpec,
    pub servername: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterUserMappingStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterUserMappingStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterUserMappingStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterUserMappingStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterUserMappingStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterUserMappingStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterUserMappingStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterUserMappingStmt>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterUserMappingStmt),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterUserMappingStmt>())).servername as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterUserMappingStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterUserMappingStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterUserMappingStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DropUserMappingStmt {
    pub type_: NodeTag,
    pub user: *mut RoleSpec,
    pub servername: *mut ::std::os::raw::c_char,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_DropUserMappingStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropUserMappingStmt>(),
        32usize,
        concat!("Size of: ", stringify!(DropUserMappingStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropUserMappingStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropUserMappingStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropUserMappingStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropUserMappingStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropUserMappingStmt>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropUserMappingStmt),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropUserMappingStmt>())).servername as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropUserMappingStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropUserMappingStmt>())).missing_ok as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DropUserMappingStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
pub const ImportForeignSchemaType_FDW_IMPORT_SCHEMA_ALL: ImportForeignSchemaType = 0;
pub const ImportForeignSchemaType_FDW_IMPORT_SCHEMA_LIMIT_TO: ImportForeignSchemaType = 1;
pub const ImportForeignSchemaType_FDW_IMPORT_SCHEMA_EXCEPT: ImportForeignSchemaType = 2;
pub type ImportForeignSchemaType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImportForeignSchemaStmt {
    pub type_: NodeTag,
    pub server_name: *mut ::std::os::raw::c_char,
    pub remote_schema: *mut ::std::os::raw::c_char,
    pub local_schema: *mut ::std::os::raw::c_char,
    pub list_type: ImportForeignSchemaType,
    pub table_list: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_ImportForeignSchemaStmt() {
    assert_eq!(
        ::std::mem::size_of::<ImportForeignSchemaStmt>(),
        56usize,
        concat!("Size of: ", stringify!(ImportForeignSchemaStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ImportForeignSchemaStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ImportForeignSchemaStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).server_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(server_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).remote_schema as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(remote_schema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).local_schema as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(local_schema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).list_type as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(list_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).table_list as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(table_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).options as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreatePolicyStmt {
    pub type_: NodeTag,
    pub policy_name: *mut ::std::os::raw::c_char,
    pub table: *mut RangeVar,
    pub cmd_name: *mut ::std::os::raw::c_char,
    pub permissive: bool,
    pub roles: *mut List,
    pub qual: *mut Node,
    pub with_check: *mut Node,
}
#[test]
fn bindgen_test_layout_CreatePolicyStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreatePolicyStmt>(),
        64usize,
        concat!("Size of: ", stringify!(CreatePolicyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreatePolicyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreatePolicyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).policy_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(policy_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).table as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).cmd_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(cmd_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).permissive as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(permissive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).roles as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).qual as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).with_check as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(with_check)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterPolicyStmt {
    pub type_: NodeTag,
    pub policy_name: *mut ::std::os::raw::c_char,
    pub table: *mut RangeVar,
    pub roles: *mut List,
    pub qual: *mut Node,
    pub with_check: *mut Node,
}
#[test]
fn bindgen_test_layout_AlterPolicyStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterPolicyStmt>(),
        48usize,
        concat!("Size of: ", stringify!(AlterPolicyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterPolicyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterPolicyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).policy_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(policy_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).table as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).roles as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).qual as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).with_check as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(with_check)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateAmStmt {
    pub type_: NodeTag,
    pub amname: *mut ::std::os::raw::c_char,
    pub handler_name: *mut List,
    pub amtype: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CreateAmStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateAmStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateAmStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateAmStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateAmStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateAmStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateAmStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateAmStmt>())).amname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateAmStmt),
            "::",
            stringify!(amname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateAmStmt>())).handler_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateAmStmt),
            "::",
            stringify!(handler_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateAmStmt>())).amtype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateAmStmt),
            "::",
            stringify!(amtype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateTrigStmt {
    pub type_: NodeTag,
    pub trigname: *mut ::std::os::raw::c_char,
    pub relation: *mut RangeVar,
    pub funcname: *mut List,
    pub args: *mut List,
    pub row: bool,
    pub timing: int16,
    pub events: int16,
    pub columns: *mut List,
    pub whenClause: *mut Node,
    pub isconstraint: bool,
    pub transitionRels: *mut List,
    pub deferrable: bool,
    pub initdeferred: bool,
    pub constrrel: *mut RangeVar,
}
#[test]
fn bindgen_test_layout_CreateTrigStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateTrigStmt>(),
        96usize,
        concat!("Size of: ", stringify!(CreateTrigStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateTrigStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateTrigStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).trigname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(trigname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).relation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).funcname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).row as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).timing as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(timing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).events as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).columns as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).whenClause as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(whenClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).isconstraint as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(isconstraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).transitionRels as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(transitionRels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).deferrable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(deferrable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).initdeferred as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(initdeferred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).constrrel as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(constrrel)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateEventTrigStmt {
    pub type_: NodeTag,
    pub trigname: *mut ::std::os::raw::c_char,
    pub eventname: *mut ::std::os::raw::c_char,
    pub whenclause: *mut List,
    pub funcname: *mut List,
}
#[test]
fn bindgen_test_layout_CreateEventTrigStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateEventTrigStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateEventTrigStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateEventTrigStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateEventTrigStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).trigname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(trigname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).eventname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(eventname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).whenclause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(whenclause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).funcname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(funcname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterEventTrigStmt {
    pub type_: NodeTag,
    pub trigname: *mut ::std::os::raw::c_char,
    pub tgenabled: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AlterEventTrigStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterEventTrigStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterEventTrigStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterEventTrigStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterEventTrigStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEventTrigStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEventTrigStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEventTrigStmt>())).trigname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEventTrigStmt),
            "::",
            stringify!(trigname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEventTrigStmt>())).tgenabled as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEventTrigStmt),
            "::",
            stringify!(tgenabled)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreatePLangStmt {
    pub type_: NodeTag,
    pub replace: bool,
    pub plname: *mut ::std::os::raw::c_char,
    pub plhandler: *mut List,
    pub plinline: *mut List,
    pub plvalidator: *mut List,
    pub pltrusted: bool,
}
#[test]
fn bindgen_test_layout_CreatePLangStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreatePLangStmt>(),
        48usize,
        concat!("Size of: ", stringify!(CreatePLangStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreatePLangStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreatePLangStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).replace as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).plname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(plname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).plhandler as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(plhandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).plinline as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(plinline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).plvalidator as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(plvalidator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).pltrusted as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(pltrusted)
        )
    );
}
pub const RoleStmtType_ROLESTMT_ROLE: RoleStmtType = 0;
pub const RoleStmtType_ROLESTMT_USER: RoleStmtType = 1;
pub const RoleStmtType_ROLESTMT_GROUP: RoleStmtType = 2;
pub type RoleStmtType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateRoleStmt {
    pub type_: NodeTag,
    pub stmt_type: RoleStmtType,
    pub role: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateRoleStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateRoleStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreateRoleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateRoleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateRoleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRoleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRoleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRoleStmt>())).stmt_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRoleStmt),
            "::",
            stringify!(stmt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRoleStmt>())).role as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRoleStmt),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRoleStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRoleStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterRoleStmt {
    pub type_: NodeTag,
    pub role: *mut RoleSpec,
    pub options: *mut List,
    pub action: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AlterRoleStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterRoleStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterRoleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterRoleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterRoleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleStmt>())).role as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleStmt),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleStmt>())).action as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleStmt),
            "::",
            stringify!(action)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterRoleSetStmt {
    pub type_: NodeTag,
    pub role: *mut RoleSpec,
    pub database: *mut ::std::os::raw::c_char,
    pub setstmt: *mut VariableSetStmt,
}
#[test]
fn bindgen_test_layout_AlterRoleSetStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterRoleSetStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterRoleSetStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterRoleSetStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterRoleSetStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleSetStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleSetStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleSetStmt>())).role as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleSetStmt),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleSetStmt>())).database as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleSetStmt),
            "::",
            stringify!(database)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleSetStmt>())).setstmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleSetStmt),
            "::",
            stringify!(setstmt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DropRoleStmt {
    pub type_: NodeTag,
    pub roles: *mut List,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_DropRoleStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropRoleStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropRoleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropRoleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropRoleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropRoleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropRoleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropRoleStmt>())).roles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropRoleStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropRoleStmt>())).missing_ok as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropRoleStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateSeqStmt {
    pub type_: NodeTag,
    pub sequence: *mut RangeVar,
    pub options: *mut List,
    pub ownerId: Oid,
    pub for_identity: bool,
    pub if_not_exists: bool,
}
#[test]
fn bindgen_test_layout_CreateSeqStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateSeqStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateSeqStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateSeqStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateSeqStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).sequence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).ownerId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(ownerId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).for_identity as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(for_identity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).if_not_exists as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterSeqStmt {
    pub type_: NodeTag,
    pub sequence: *mut RangeVar,
    pub options: *mut List,
    pub for_identity: bool,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_AlterSeqStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterSeqStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterSeqStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterSeqStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterSeqStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).sequence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).for_identity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(for_identity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).missing_ok as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DefineStmt {
    pub type_: NodeTag,
    pub kind: ObjectType,
    pub oldstyle: bool,
    pub defnames: *mut List,
    pub args: *mut List,
    pub definition: *mut List,
    pub if_not_exists: bool,
}
#[test]
fn bindgen_test_layout_DefineStmt() {
    assert_eq!(
        ::std::mem::size_of::<DefineStmt>(),
        48usize,
        concat!("Size of: ", stringify!(DefineStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DefineStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DefineStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).oldstyle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(oldstyle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).defnames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(defnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).definition as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(definition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).if_not_exists as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateDomainStmt {
    pub type_: NodeTag,
    pub domainname: *mut List,
    pub typeName: *mut TypeName,
    pub collClause: *mut CollateClause,
    pub constraints: *mut List,
}
#[test]
fn bindgen_test_layout_CreateDomainStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateDomainStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateDomainStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateDomainStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateDomainStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).domainname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(domainname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).collClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(collClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).constraints as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(constraints)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateOpClassStmt {
    pub type_: NodeTag,
    pub opclassname: *mut List,
    pub opfamilyname: *mut List,
    pub amname: *mut ::std::os::raw::c_char,
    pub datatype: *mut TypeName,
    pub items: *mut List,
    pub isDefault: bool,
}
#[test]
fn bindgen_test_layout_CreateOpClassStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateOpClassStmt>(),
        56usize,
        concat!("Size of: ", stringify!(CreateOpClassStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateOpClassStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateOpClassStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).opclassname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(opclassname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).opfamilyname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(opfamilyname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).amname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(amname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).datatype as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(datatype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).items as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).isDefault as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(isDefault)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateOpClassItem {
    pub type_: NodeTag,
    pub itemtype: ::std::os::raw::c_int,
    pub name: *mut ObjectWithArgs,
    pub number: ::std::os::raw::c_int,
    pub order_family: *mut List,
    pub class_args: *mut List,
    pub storedtype: *mut TypeName,
}
#[test]
fn bindgen_test_layout_CreateOpClassItem() {
    assert_eq!(
        ::std::mem::size_of::<CreateOpClassItem>(),
        48usize,
        concat!("Size of: ", stringify!(CreateOpClassItem))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateOpClassItem>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateOpClassItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).itemtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(itemtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).order_family as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(order_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).class_args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(class_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).storedtype as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(storedtype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateOpFamilyStmt {
    pub type_: NodeTag,
    pub opfamilyname: *mut List,
    pub amname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CreateOpFamilyStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateOpFamilyStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreateOpFamilyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateOpFamilyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateOpFamilyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpFamilyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpFamilyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpFamilyStmt>())).opfamilyname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpFamilyStmt),
            "::",
            stringify!(opfamilyname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpFamilyStmt>())).amname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpFamilyStmt),
            "::",
            stringify!(amname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterOpFamilyStmt {
    pub type_: NodeTag,
    pub opfamilyname: *mut List,
    pub amname: *mut ::std::os::raw::c_char,
    pub isDrop: bool,
    pub items: *mut List,
}
#[test]
fn bindgen_test_layout_AlterOpFamilyStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterOpFamilyStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterOpFamilyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterOpFamilyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterOpFamilyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).opfamilyname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(opfamilyname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).amname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(amname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).isDrop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(isDrop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).items as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DropStmt {
    pub type_: NodeTag,
    pub objects: *mut List,
    pub removeType: ObjectType,
    pub behavior: DropBehavior,
    pub missing_ok: bool,
    pub concurrent: bool,
}
#[test]
fn bindgen_test_layout_DropStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropStmt>(),
        32usize,
        concat!("Size of: ", stringify!(DropStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).objects as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).removeType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(removeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).behavior as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).missing_ok as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(missing_ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).concurrent as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(concurrent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TruncateStmt {
    pub type_: NodeTag,
    pub relations: *mut List,
    pub restart_seqs: bool,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_TruncateStmt() {
    assert_eq!(
        ::std::mem::size_of::<TruncateStmt>(),
        24usize,
        concat!("Size of: ", stringify!(TruncateStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<TruncateStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(TruncateStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TruncateStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TruncateStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TruncateStmt>())).relations as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TruncateStmt),
            "::",
            stringify!(relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TruncateStmt>())).restart_seqs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TruncateStmt),
            "::",
            stringify!(restart_seqs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TruncateStmt>())).behavior as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TruncateStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CommentStmt {
    pub type_: NodeTag,
    pub objtype: ObjectType,
    pub object: *mut Node,
    pub comment: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CommentStmt() {
    assert_eq!(
        ::std::mem::size_of::<CommentStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CommentStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CommentStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CommentStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommentStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CommentStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommentStmt>())).objtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CommentStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommentStmt>())).object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CommentStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommentStmt>())).comment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CommentStmt),
            "::",
            stringify!(comment)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SecLabelStmt {
    pub type_: NodeTag,
    pub objtype: ObjectType,
    pub object: *mut Node,
    pub provider: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SecLabelStmt() {
    assert_eq!(
        ::std::mem::size_of::<SecLabelStmt>(),
        32usize,
        concat!("Size of: ", stringify!(SecLabelStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<SecLabelStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(SecLabelStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).objtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).provider as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(provider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).label as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DeclareCursorStmt {
    pub type_: NodeTag,
    pub portalname: *mut ::std::os::raw::c_char,
    pub options: ::std::os::raw::c_int,
    pub query: *mut Node,
}
#[test]
fn bindgen_test_layout_DeclareCursorStmt() {
    assert_eq!(
        ::std::mem::size_of::<DeclareCursorStmt>(),
        32usize,
        concat!("Size of: ", stringify!(DeclareCursorStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DeclareCursorStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DeclareCursorStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeclareCursorStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeclareCursorStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeclareCursorStmt>())).portalname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeclareCursorStmt),
            "::",
            stringify!(portalname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeclareCursorStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DeclareCursorStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeclareCursorStmt>())).query as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DeclareCursorStmt),
            "::",
            stringify!(query)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ClosePortalStmt {
    pub type_: NodeTag,
    pub portalname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ClosePortalStmt() {
    assert_eq!(
        ::std::mem::size_of::<ClosePortalStmt>(),
        16usize,
        concat!("Size of: ", stringify!(ClosePortalStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ClosePortalStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ClosePortalStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClosePortalStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClosePortalStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClosePortalStmt>())).portalname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClosePortalStmt),
            "::",
            stringify!(portalname)
        )
    );
}
pub const FetchDirection_FETCH_FORWARD: FetchDirection = 0;
pub const FetchDirection_FETCH_BACKWARD: FetchDirection = 1;
pub const FetchDirection_FETCH_ABSOLUTE: FetchDirection = 2;
pub const FetchDirection_FETCH_RELATIVE: FetchDirection = 3;
pub type FetchDirection = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FetchStmt {
    pub type_: NodeTag,
    pub direction: FetchDirection,
    pub howMany: ::std::os::raw::c_long,
    pub portalname: *mut ::std::os::raw::c_char,
    pub ismove: bool,
}
#[test]
fn bindgen_test_layout_FetchStmt() {
    assert_eq!(
        ::std::mem::size_of::<FetchStmt>(),
        32usize,
        concat!("Size of: ", stringify!(FetchStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<FetchStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(FetchStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).howMany as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(howMany)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).portalname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(portalname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).ismove as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(ismove)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexStmt {
    pub type_: NodeTag,
    pub idxname: *mut ::std::os::raw::c_char,
    pub relation: *mut RangeVar,
    pub relationId: Oid,
    pub accessMethod: *mut ::std::os::raw::c_char,
    pub tableSpace: *mut ::std::os::raw::c_char,
    pub indexParams: *mut List,
    pub indexIncludingParams: *mut List,
    pub options: *mut List,
    pub whereClause: *mut Node,
    pub excludeOpNames: *mut List,
    pub idxcomment: *mut ::std::os::raw::c_char,
    pub indexOid: Oid,
    pub oldNode: Oid,
    pub unique: bool,
    pub primary: bool,
    pub isconstraint: bool,
    pub deferrable: bool,
    pub initdeferred: bool,
    pub transformed: bool,
    pub concurrent: bool,
    pub if_not_exists: bool,
}
#[test]
fn bindgen_test_layout_IndexStmt() {
    assert_eq!(
        ::std::mem::size_of::<IndexStmt>(),
        112usize,
        concat!("Size of: ", stringify!(IndexStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).idxname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(idxname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).relation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).relationId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(relationId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).accessMethod as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(accessMethod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).tableSpace as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(tableSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).indexParams as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(indexParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).indexIncludingParams as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(indexIncludingParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).options as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).whereClause as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).excludeOpNames as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(excludeOpNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).idxcomment as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(idxcomment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).indexOid as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(indexOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).oldNode as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(oldNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).unique as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).primary as *const _ as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(primary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).isconstraint as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(isconstraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).deferrable as *const _ as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(deferrable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).initdeferred as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(initdeferred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).transformed as *const _ as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(transformed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).concurrent as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(concurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).if_not_exists as *const _ as usize },
        111usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateStatsStmt {
    pub type_: NodeTag,
    pub defnames: *mut List,
    pub stat_types: *mut List,
    pub exprs: *mut List,
    pub relations: *mut List,
    pub stxcomment: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool,
}
#[test]
fn bindgen_test_layout_CreateStatsStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateStatsStmt>(),
        56usize,
        concat!("Size of: ", stringify!(CreateStatsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateStatsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateStatsStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).defnames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(defnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).stat_types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(stat_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).exprs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).relations as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).stxcomment as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(stxcomment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).if_not_exists as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateFunctionStmt {
    pub type_: NodeTag,
    pub is_procedure: bool,
    pub replace: bool,
    pub funcname: *mut List,
    pub parameters: *mut List,
    pub returnType: *mut TypeName,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateFunctionStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateFunctionStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateFunctionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateFunctionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateFunctionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).is_procedure as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(is_procedure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).replace as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).funcname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).parameters as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).returnType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(returnType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(options)
        )
    );
}
pub const FunctionParameterMode_FUNC_PARAM_IN: FunctionParameterMode = 105;
pub const FunctionParameterMode_FUNC_PARAM_OUT: FunctionParameterMode = 111;
pub const FunctionParameterMode_FUNC_PARAM_INOUT: FunctionParameterMode = 98;
pub const FunctionParameterMode_FUNC_PARAM_VARIADIC: FunctionParameterMode = 118;
pub const FunctionParameterMode_FUNC_PARAM_TABLE: FunctionParameterMode = 116;
pub type FunctionParameterMode = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FunctionParameter {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub argType: *mut TypeName,
    pub mode: FunctionParameterMode,
    pub defexpr: *mut Node,
}
#[test]
fn bindgen_test_layout_FunctionParameter() {
    assert_eq!(
        ::std::mem::size_of::<FunctionParameter>(),
        40usize,
        concat!("Size of: ", stringify!(FunctionParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<FunctionParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(FunctionParameter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).argType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(argType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).defexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(defexpr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterFunctionStmt {
    pub type_: NodeTag,
    pub objtype: ObjectType,
    pub func: *mut ObjectWithArgs,
    pub actions: *mut List,
}
#[test]
fn bindgen_test_layout_AlterFunctionStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterFunctionStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterFunctionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterFunctionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterFunctionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFunctionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFunctionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFunctionStmt>())).objtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFunctionStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFunctionStmt>())).func as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFunctionStmt),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFunctionStmt>())).actions as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFunctionStmt),
            "::",
            stringify!(actions)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DoStmt {
    pub type_: NodeTag,
    pub args: *mut List,
}
#[test]
fn bindgen_test_layout_DoStmt() {
    assert_eq!(
        ::std::mem::size_of::<DoStmt>(),
        16usize,
        concat!("Size of: ", stringify!(DoStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DoStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DoStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DoStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DoStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DoStmt>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DoStmt),
            "::",
            stringify!(args)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct InlineCodeBlock {
    pub type_: NodeTag,
    pub source_text: *mut ::std::os::raw::c_char,
    pub langOid: Oid,
    pub langIsTrusted: bool,
    pub atomic: bool,
}
#[test]
fn bindgen_test_layout_InlineCodeBlock() {
    assert_eq!(
        ::std::mem::size_of::<InlineCodeBlock>(),
        24usize,
        concat!("Size of: ", stringify!(InlineCodeBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<InlineCodeBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(InlineCodeBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).source_text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(source_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).langOid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(langOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).langIsTrusted as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(langIsTrusted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).atomic as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(atomic)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CallStmt {
    pub type_: NodeTag,
    pub funccall: *mut FuncCall,
    pub funcexpr: *mut FuncExpr,
}
#[test]
fn bindgen_test_layout_CallStmt() {
    assert_eq!(
        ::std::mem::size_of::<CallStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CallStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CallStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CallStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CallStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CallStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CallStmt>())).funccall as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CallStmt),
            "::",
            stringify!(funccall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CallStmt>())).funcexpr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CallStmt),
            "::",
            stringify!(funcexpr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CallContext {
    pub type_: NodeTag,
    pub atomic: bool,
}
#[test]
fn bindgen_test_layout_CallContext() {
    assert_eq!(
        ::std::mem::size_of::<CallContext>(),
        8usize,
        concat!("Size of: ", stringify!(CallContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CallContext>(),
        4usize,
        concat!("Alignment of ", stringify!(CallContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CallContext>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CallContext),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CallContext>())).atomic as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CallContext),
            "::",
            stringify!(atomic)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RenameStmt {
    pub type_: NodeTag,
    pub renameType: ObjectType,
    pub relationType: ObjectType,
    pub relation: *mut RangeVar,
    pub object: *mut Node,
    pub subname: *mut ::std::os::raw::c_char,
    pub newname: *mut ::std::os::raw::c_char,
    pub behavior: DropBehavior,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_RenameStmt() {
    assert_eq!(
        ::std::mem::size_of::<RenameStmt>(),
        56usize,
        concat!("Size of: ", stringify!(RenameStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<RenameStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(RenameStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).renameType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(renameType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).relationType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(relationType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).relation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).object as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).subname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(subname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).newname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(newname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).behavior as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).missing_ok as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterObjectDependsStmt {
    pub type_: NodeTag,
    pub objectType: ObjectType,
    pub relation: *mut RangeVar,
    pub object: *mut Node,
    pub extname: *mut Value,
}
#[test]
fn bindgen_test_layout_AlterObjectDependsStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterObjectDependsStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterObjectDependsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterObjectDependsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterObjectDependsStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectDependsStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterObjectDependsStmt>())).objectType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectDependsStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectDependsStmt>())).object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectDependsStmt>())).extname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(extname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterObjectSchemaStmt {
    pub type_: NodeTag,
    pub objectType: ObjectType,
    pub relation: *mut RangeVar,
    pub object: *mut Node,
    pub newschema: *mut ::std::os::raw::c_char,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_AlterObjectSchemaStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterObjectSchemaStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterObjectSchemaStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterObjectSchemaStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterObjectSchemaStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).objectType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).newschema as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(newschema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).missing_ok as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterOwnerStmt {
    pub type_: NodeTag,
    pub objectType: ObjectType,
    pub relation: *mut RangeVar,
    pub object: *mut Node,
    pub newowner: *mut RoleSpec,
}
#[test]
fn bindgen_test_layout_AlterOwnerStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterOwnerStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterOwnerStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterOwnerStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterOwnerStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).objectType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).newowner as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(newowner)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterOperatorStmt {
    pub type_: NodeTag,
    pub opername: *mut ObjectWithArgs,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterOperatorStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterOperatorStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterOperatorStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterOperatorStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterOperatorStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOperatorStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOperatorStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOperatorStmt>())).opername as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOperatorStmt),
            "::",
            stringify!(opername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOperatorStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOperatorStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RuleStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub rulename: *mut ::std::os::raw::c_char,
    pub whereClause: *mut Node,
    pub event: CmdType,
    pub instead: bool,
    pub actions: *mut List,
    pub replace: bool,
}
#[test]
fn bindgen_test_layout_RuleStmt() {
    assert_eq!(
        ::std::mem::size_of::<RuleStmt>(),
        56usize,
        concat!("Size of: ", stringify!(RuleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<RuleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(RuleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).rulename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(rulename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).whereClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).event as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).instead as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(instead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).actions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).replace as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(replace)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NotifyStmt {
    pub type_: NodeTag,
    pub conditionname: *mut ::std::os::raw::c_char,
    pub payload: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NotifyStmt() {
    assert_eq!(
        ::std::mem::size_of::<NotifyStmt>(),
        24usize,
        concat!("Size of: ", stringify!(NotifyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<NotifyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(NotifyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NotifyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NotifyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NotifyStmt>())).conditionname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NotifyStmt),
            "::",
            stringify!(conditionname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NotifyStmt>())).payload as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NotifyStmt),
            "::",
            stringify!(payload)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ListenStmt {
    pub type_: NodeTag,
    pub conditionname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ListenStmt() {
    assert_eq!(
        ::std::mem::size_of::<ListenStmt>(),
        16usize,
        concat!("Size of: ", stringify!(ListenStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ListenStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ListenStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ListenStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListenStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ListenStmt>())).conditionname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ListenStmt),
            "::",
            stringify!(conditionname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnlistenStmt {
    pub type_: NodeTag,
    pub conditionname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_UnlistenStmt() {
    assert_eq!(
        ::std::mem::size_of::<UnlistenStmt>(),
        16usize,
        concat!("Size of: ", stringify!(UnlistenStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<UnlistenStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(UnlistenStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnlistenStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnlistenStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnlistenStmt>())).conditionname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnlistenStmt),
            "::",
            stringify!(conditionname)
        )
    );
}
pub const TransactionStmtKind_TRANS_STMT_BEGIN: TransactionStmtKind = 0;
pub const TransactionStmtKind_TRANS_STMT_START: TransactionStmtKind = 1;
pub const TransactionStmtKind_TRANS_STMT_COMMIT: TransactionStmtKind = 2;
pub const TransactionStmtKind_TRANS_STMT_ROLLBACK: TransactionStmtKind = 3;
pub const TransactionStmtKind_TRANS_STMT_SAVEPOINT: TransactionStmtKind = 4;
pub const TransactionStmtKind_TRANS_STMT_RELEASE: TransactionStmtKind = 5;
pub const TransactionStmtKind_TRANS_STMT_ROLLBACK_TO: TransactionStmtKind = 6;
pub const TransactionStmtKind_TRANS_STMT_PREPARE: TransactionStmtKind = 7;
pub const TransactionStmtKind_TRANS_STMT_COMMIT_PREPARED: TransactionStmtKind = 8;
pub const TransactionStmtKind_TRANS_STMT_ROLLBACK_PREPARED: TransactionStmtKind = 9;
pub type TransactionStmtKind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TransactionStmt {
    pub type_: NodeTag,
    pub kind: TransactionStmtKind,
    pub options: *mut List,
    pub savepoint_name: *mut ::std::os::raw::c_char,
    pub gid: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TransactionStmt() {
    assert_eq!(
        ::std::mem::size_of::<TransactionStmt>(),
        32usize,
        concat!("Size of: ", stringify!(TransactionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<TransactionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(TransactionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).options as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).savepoint_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(savepoint_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).gid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(gid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CompositeTypeStmt {
    pub type_: NodeTag,
    pub typevar: *mut RangeVar,
    pub coldeflist: *mut List,
}
#[test]
fn bindgen_test_layout_CompositeTypeStmt() {
    assert_eq!(
        ::std::mem::size_of::<CompositeTypeStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CompositeTypeStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CompositeTypeStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CompositeTypeStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CompositeTypeStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CompositeTypeStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CompositeTypeStmt>())).typevar as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CompositeTypeStmt),
            "::",
            stringify!(typevar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CompositeTypeStmt>())).coldeflist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CompositeTypeStmt),
            "::",
            stringify!(coldeflist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateEnumStmt {
    pub type_: NodeTag,
    pub typeName: *mut List,
    pub vals: *mut List,
}
#[test]
fn bindgen_test_layout_CreateEnumStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateEnumStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreateEnumStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateEnumStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateEnumStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEnumStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEnumStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEnumStmt>())).typeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEnumStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEnumStmt>())).vals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEnumStmt),
            "::",
            stringify!(vals)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateRangeStmt {
    pub type_: NodeTag,
    pub typeName: *mut List,
    pub params: *mut List,
}
#[test]
fn bindgen_test_layout_CreateRangeStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateRangeStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreateRangeStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateRangeStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateRangeStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRangeStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRangeStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRangeStmt>())).typeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRangeStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRangeStmt>())).params as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRangeStmt),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterEnumStmt {
    pub type_: NodeTag,
    pub typeName: *mut List,
    pub oldVal: *mut ::std::os::raw::c_char,
    pub newVal: *mut ::std::os::raw::c_char,
    pub newValNeighbor: *mut ::std::os::raw::c_char,
    pub newValIsAfter: bool,
    pub skipIfNewValExists: bool,
}
#[test]
fn bindgen_test_layout_AlterEnumStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterEnumStmt>(),
        48usize,
        concat!("Size of: ", stringify!(AlterEnumStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterEnumStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterEnumStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).typeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).oldVal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(oldVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).newVal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(newVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).newValNeighbor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(newValNeighbor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).newValIsAfter as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(newValIsAfter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterEnumStmt>())).skipIfNewValExists as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(skipIfNewValExists)
        )
    );
}
pub const ViewCheckOption_NO_CHECK_OPTION: ViewCheckOption = 0;
pub const ViewCheckOption_LOCAL_CHECK_OPTION: ViewCheckOption = 1;
pub const ViewCheckOption_CASCADED_CHECK_OPTION: ViewCheckOption = 2;
pub type ViewCheckOption = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ViewStmt {
    pub type_: NodeTag,
    pub view: *mut RangeVar,
    pub aliases: *mut List,
    pub query: *mut Node,
    pub replace: bool,
    pub options: *mut List,
    pub withCheckOption: ViewCheckOption,
}
#[test]
fn bindgen_test_layout_ViewStmt() {
    assert_eq!(
        ::std::mem::size_of::<ViewStmt>(),
        56usize,
        concat!("Size of: ", stringify!(ViewStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ViewStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ViewStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).view as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).aliases as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).query as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).replace as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).options as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).withCheckOption as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(withCheckOption)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LoadStmt {
    pub type_: NodeTag,
    pub filename: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_LoadStmt() {
    assert_eq!(
        ::std::mem::size_of::<LoadStmt>(),
        16usize,
        concat!("Size of: ", stringify!(LoadStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<LoadStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(LoadStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LoadStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LoadStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LoadStmt>())).filename as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LoadStmt),
            "::",
            stringify!(filename)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreatedbStmt {
    pub type_: NodeTag,
    pub dbname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreatedbStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreatedbStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreatedbStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreatedbStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreatedbStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatedbStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatedbStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatedbStmt>())).dbname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatedbStmt),
            "::",
            stringify!(dbname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatedbStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatedbStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterDatabaseStmt {
    pub type_: NodeTag,
    pub dbname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterDatabaseStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterDatabaseStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterDatabaseStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterDatabaseStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterDatabaseStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseStmt>())).dbname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseStmt),
            "::",
            stringify!(dbname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterDatabaseSetStmt {
    pub type_: NodeTag,
    pub dbname: *mut ::std::os::raw::c_char,
    pub setstmt: *mut VariableSetStmt,
}
#[test]
fn bindgen_test_layout_AlterDatabaseSetStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterDatabaseSetStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterDatabaseSetStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterDatabaseSetStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterDatabaseSetStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseSetStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseSetStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseSetStmt>())).dbname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseSetStmt),
            "::",
            stringify!(dbname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseSetStmt>())).setstmt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseSetStmt),
            "::",
            stringify!(setstmt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DropdbStmt {
    pub type_: NodeTag,
    pub dbname: *mut ::std::os::raw::c_char,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_DropdbStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropdbStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropdbStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropdbStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropdbStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropdbStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropdbStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropdbStmt>())).dbname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropdbStmt),
            "::",
            stringify!(dbname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropdbStmt>())).missing_ok as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropdbStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterSystemStmt {
    pub type_: NodeTag,
    pub setstmt: *mut VariableSetStmt,
}
#[test]
fn bindgen_test_layout_AlterSystemStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterSystemStmt>(),
        16usize,
        concat!("Size of: ", stringify!(AlterSystemStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterSystemStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterSystemStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSystemStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSystemStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSystemStmt>())).setstmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSystemStmt),
            "::",
            stringify!(setstmt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ClusterStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub indexname: *mut ::std::os::raw::c_char,
    pub verbose: bool,
}
#[test]
fn bindgen_test_layout_ClusterStmt() {
    assert_eq!(
        ::std::mem::size_of::<ClusterStmt>(),
        32usize,
        concat!("Size of: ", stringify!(ClusterStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ClusterStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ClusterStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClusterStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClusterStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClusterStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClusterStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClusterStmt>())).indexname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClusterStmt),
            "::",
            stringify!(indexname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClusterStmt>())).verbose as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ClusterStmt),
            "::",
            stringify!(verbose)
        )
    );
}
pub const VacuumOption_VACOPT_VACUUM: VacuumOption = 1;
pub const VacuumOption_VACOPT_ANALYZE: VacuumOption = 2;
pub const VacuumOption_VACOPT_VERBOSE: VacuumOption = 4;
pub const VacuumOption_VACOPT_FREEZE: VacuumOption = 8;
pub const VacuumOption_VACOPT_FULL: VacuumOption = 16;
pub const VacuumOption_VACOPT_NOWAIT: VacuumOption = 32;
pub const VacuumOption_VACOPT_SKIPTOAST: VacuumOption = 64;
pub const VacuumOption_VACOPT_DISABLE_PAGE_SKIPPING: VacuumOption = 128;
pub type VacuumOption = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VacuumRelation {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub oid: Oid,
    pub va_cols: *mut List,
}
#[test]
fn bindgen_test_layout_VacuumRelation() {
    assert_eq!(
        ::std::mem::size_of::<VacuumRelation>(),
        32usize,
        concat!("Size of: ", stringify!(VacuumRelation))
    );
    assert_eq!(
        ::std::mem::align_of::<VacuumRelation>(),
        8usize,
        concat!("Alignment of ", stringify!(VacuumRelation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumRelation>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumRelation),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumRelation>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumRelation),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumRelation>())).oid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumRelation),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumRelation>())).va_cols as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumRelation),
            "::",
            stringify!(va_cols)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VacuumStmt {
    pub type_: NodeTag,
    pub options: ::std::os::raw::c_int,
    pub rels: *mut List,
}
#[test]
fn bindgen_test_layout_VacuumStmt() {
    assert_eq!(
        ::std::mem::size_of::<VacuumStmt>(),
        16usize,
        concat!("Size of: ", stringify!(VacuumStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<VacuumStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(VacuumStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumStmt>())).options as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumStmt>())).rels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumStmt),
            "::",
            stringify!(rels)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExplainStmt {
    pub type_: NodeTag,
    pub query: *mut Node,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_ExplainStmt() {
    assert_eq!(
        ::std::mem::size_of::<ExplainStmt>(),
        24usize,
        concat!("Size of: ", stringify!(ExplainStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ExplainStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ExplainStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExplainStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExplainStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExplainStmt>())).query as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExplainStmt),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExplainStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExplainStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateTableAsStmt {
    pub type_: NodeTag,
    pub query: *mut Node,
    pub into: *mut IntoClause,
    pub relkind: ObjectType,
    pub is_select_into: bool,
    pub if_not_exists: bool,
}
#[test]
fn bindgen_test_layout_CreateTableAsStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateTableAsStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateTableAsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateTableAsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateTableAsStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).query as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).into as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(into)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).relkind as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(relkind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateTableAsStmt>())).is_select_into as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(is_select_into)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).if_not_exists as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RefreshMatViewStmt {
    pub type_: NodeTag,
    pub concurrent: bool,
    pub skipData: bool,
    pub relation: *mut RangeVar,
}
#[test]
fn bindgen_test_layout_RefreshMatViewStmt() {
    assert_eq!(
        ::std::mem::size_of::<RefreshMatViewStmt>(),
        16usize,
        concat!("Size of: ", stringify!(RefreshMatViewStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<RefreshMatViewStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(RefreshMatViewStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RefreshMatViewStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RefreshMatViewStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RefreshMatViewStmt>())).concurrent as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RefreshMatViewStmt),
            "::",
            stringify!(concurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RefreshMatViewStmt>())).skipData as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(RefreshMatViewStmt),
            "::",
            stringify!(skipData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RefreshMatViewStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RefreshMatViewStmt),
            "::",
            stringify!(relation)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CheckPointStmt {
    pub type_: NodeTag,
}
#[test]
fn bindgen_test_layout_CheckPointStmt() {
    assert_eq!(
        ::std::mem::size_of::<CheckPointStmt>(),
        4usize,
        concat!("Size of: ", stringify!(CheckPointStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CheckPointStmt>(),
        4usize,
        concat!("Alignment of ", stringify!(CheckPointStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CheckPointStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPointStmt),
            "::",
            stringify!(type_)
        )
    );
}
pub const DiscardMode_DISCARD_ALL: DiscardMode = 0;
pub const DiscardMode_DISCARD_PLANS: DiscardMode = 1;
pub const DiscardMode_DISCARD_SEQUENCES: DiscardMode = 2;
pub const DiscardMode_DISCARD_TEMP: DiscardMode = 3;
pub type DiscardMode = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DiscardStmt {
    pub type_: NodeTag,
    pub target: DiscardMode,
}
#[test]
fn bindgen_test_layout_DiscardStmt() {
    assert_eq!(
        ::std::mem::size_of::<DiscardStmt>(),
        8usize,
        concat!("Size of: ", stringify!(DiscardStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DiscardStmt>(),
        4usize,
        concat!("Alignment of ", stringify!(DiscardStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscardStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscardStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscardStmt>())).target as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscardStmt),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockStmt {
    pub type_: NodeTag,
    pub relations: *mut List,
    pub mode: ::std::os::raw::c_int,
    pub nowait: bool,
}
#[test]
fn bindgen_test_layout_LockStmt() {
    assert_eq!(
        ::std::mem::size_of::<LockStmt>(),
        24usize,
        concat!("Size of: ", stringify!(LockStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<LockStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(LockStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockStmt>())).relations as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LockStmt),
            "::",
            stringify!(relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockStmt>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LockStmt),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockStmt>())).nowait as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LockStmt),
            "::",
            stringify!(nowait)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ConstraintsSetStmt {
    pub type_: NodeTag,
    pub constraints: *mut List,
    pub deferred: bool,
}
#[test]
fn bindgen_test_layout_ConstraintsSetStmt() {
    assert_eq!(
        ::std::mem::size_of::<ConstraintsSetStmt>(),
        24usize,
        concat!("Size of: ", stringify!(ConstraintsSetStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ConstraintsSetStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ConstraintsSetStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConstraintsSetStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConstraintsSetStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConstraintsSetStmt>())).constraints as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConstraintsSetStmt),
            "::",
            stringify!(constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConstraintsSetStmt>())).deferred as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConstraintsSetStmt),
            "::",
            stringify!(deferred)
        )
    );
}
pub const ReindexObjectType_REINDEX_OBJECT_INDEX: ReindexObjectType = 0;
pub const ReindexObjectType_REINDEX_OBJECT_TABLE: ReindexObjectType = 1;
pub const ReindexObjectType_REINDEX_OBJECT_SCHEMA: ReindexObjectType = 2;
pub const ReindexObjectType_REINDEX_OBJECT_SYSTEM: ReindexObjectType = 3;
pub const ReindexObjectType_REINDEX_OBJECT_DATABASE: ReindexObjectType = 4;
pub type ReindexObjectType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReindexStmt {
    pub type_: NodeTag,
    pub kind: ReindexObjectType,
    pub relation: *mut RangeVar,
    pub name: *const ::std::os::raw::c_char,
    pub options: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ReindexStmt() {
    assert_eq!(
        ::std::mem::size_of::<ReindexStmt>(),
        32usize,
        concat!("Size of: ", stringify!(ReindexStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ReindexStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ReindexStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateConversionStmt {
    pub type_: NodeTag,
    pub conversion_name: *mut List,
    pub for_encoding_name: *mut ::std::os::raw::c_char,
    pub to_encoding_name: *mut ::std::os::raw::c_char,
    pub func_name: *mut List,
    pub def: bool,
}
#[test]
fn bindgen_test_layout_CreateConversionStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateConversionStmt>(),
        48usize,
        concat!("Size of: ", stringify!(CreateConversionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateConversionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateConversionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateConversionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateConversionStmt>())).conversion_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(conversion_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateConversionStmt>())).for_encoding_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(for_encoding_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateConversionStmt>())).to_encoding_name as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(to_encoding_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateConversionStmt>())).func_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(func_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateConversionStmt>())).def as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(def)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateCastStmt {
    pub type_: NodeTag,
    pub sourcetype: *mut TypeName,
    pub targettype: *mut TypeName,
    pub func: *mut ObjectWithArgs,
    pub context: CoercionContext,
    pub inout: bool,
}
#[test]
fn bindgen_test_layout_CreateCastStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateCastStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateCastStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateCastStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateCastStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).sourcetype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(sourcetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).targettype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(targettype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).context as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).inout as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(inout)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateTransformStmt {
    pub type_: NodeTag,
    pub replace: bool,
    pub type_name: *mut TypeName,
    pub lang: *mut ::std::os::raw::c_char,
    pub fromsql: *mut ObjectWithArgs,
    pub tosql: *mut ObjectWithArgs,
}
#[test]
fn bindgen_test_layout_CreateTransformStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateTransformStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateTransformStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateTransformStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateTransformStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).replace as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).type_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).lang as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).fromsql as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(fromsql)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).tosql as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(tosql)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PrepareStmt {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub argtypes: *mut List,
    pub query: *mut Node,
}
#[test]
fn bindgen_test_layout_PrepareStmt() {
    assert_eq!(
        ::std::mem::size_of::<PrepareStmt>(),
        32usize,
        concat!("Size of: ", stringify!(PrepareStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<PrepareStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(PrepareStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PrepareStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PrepareStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PrepareStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PrepareStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PrepareStmt>())).argtypes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PrepareStmt),
            "::",
            stringify!(argtypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PrepareStmt>())).query as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PrepareStmt),
            "::",
            stringify!(query)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExecuteStmt {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub params: *mut List,
}
#[test]
fn bindgen_test_layout_ExecuteStmt() {
    assert_eq!(
        ::std::mem::size_of::<ExecuteStmt>(),
        24usize,
        concat!("Size of: ", stringify!(ExecuteStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ExecuteStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ExecuteStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecuteStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecuteStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecuteStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecuteStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecuteStmt>())).params as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecuteStmt),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DeallocateStmt {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DeallocateStmt() {
    assert_eq!(
        ::std::mem::size_of::<DeallocateStmt>(),
        16usize,
        concat!("Size of: ", stringify!(DeallocateStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DeallocateStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DeallocateStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeallocateStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeallocateStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeallocateStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeallocateStmt),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DropOwnedStmt {
    pub type_: NodeTag,
    pub roles: *mut List,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_DropOwnedStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropOwnedStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropOwnedStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropOwnedStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropOwnedStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropOwnedStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropOwnedStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropOwnedStmt>())).roles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropOwnedStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropOwnedStmt>())).behavior as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropOwnedStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReassignOwnedStmt {
    pub type_: NodeTag,
    pub roles: *mut List,
    pub newrole: *mut RoleSpec,
}
#[test]
fn bindgen_test_layout_ReassignOwnedStmt() {
    assert_eq!(
        ::std::mem::size_of::<ReassignOwnedStmt>(),
        24usize,
        concat!("Size of: ", stringify!(ReassignOwnedStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ReassignOwnedStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ReassignOwnedStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReassignOwnedStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReassignOwnedStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReassignOwnedStmt>())).roles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReassignOwnedStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReassignOwnedStmt>())).newrole as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReassignOwnedStmt),
            "::",
            stringify!(newrole)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterTSDictionaryStmt {
    pub type_: NodeTag,
    pub dictname: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterTSDictionaryStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTSDictionaryStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterTSDictionaryStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTSDictionaryStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTSDictionaryStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSDictionaryStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSDictionaryStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSDictionaryStmt>())).dictname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSDictionaryStmt),
            "::",
            stringify!(dictname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSDictionaryStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSDictionaryStmt),
            "::",
            stringify!(options)
        )
    );
}
pub const AlterTSConfigType_ALTER_TSCONFIG_ADD_MAPPING: AlterTSConfigType = 0;
pub const AlterTSConfigType_ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN: AlterTSConfigType = 1;
pub const AlterTSConfigType_ALTER_TSCONFIG_REPLACE_DICT: AlterTSConfigType = 2;
pub const AlterTSConfigType_ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN: AlterTSConfigType = 3;
pub const AlterTSConfigType_ALTER_TSCONFIG_DROP_MAPPING: AlterTSConfigType = 4;
pub type AlterTSConfigType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterTSConfigurationStmt {
    pub type_: NodeTag,
    pub kind: AlterTSConfigType,
    pub cfgname: *mut List,
    pub tokentype: *mut List,
    pub dicts: *mut List,
    pub override_: bool,
    pub replace: bool,
    pub missing_ok: bool,
}
#[test]
fn bindgen_test_layout_AlterTSConfigurationStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTSConfigurationStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterTSConfigurationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTSConfigurationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTSConfigurationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).cfgname as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(cfgname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).tokentype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(tokentype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).dicts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(dicts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).override_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).replace as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).missing_ok as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreatePublicationStmt {
    pub type_: NodeTag,
    pub pubname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
    pub tables: *mut List,
    pub for_all_tables: bool,
}
#[test]
fn bindgen_test_layout_CreatePublicationStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreatePublicationStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreatePublicationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreatePublicationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreatePublicationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePublicationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePublicationStmt>())).pubname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(pubname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePublicationStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePublicationStmt>())).tables as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreatePublicationStmt>())).for_all_tables as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(for_all_tables)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterPublicationStmt {
    pub type_: NodeTag,
    pub pubname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
    pub tables: *mut List,
    pub for_all_tables: bool,
    pub tableAction: DefElemAction,
}
#[test]
fn bindgen_test_layout_AlterPublicationStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterPublicationStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterPublicationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterPublicationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterPublicationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPublicationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPublicationStmt>())).pubname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(pubname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPublicationStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPublicationStmt>())).tables as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterPublicationStmt>())).for_all_tables as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(for_all_tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterPublicationStmt>())).tableAction as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(tableAction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CreateSubscriptionStmt {
    pub type_: NodeTag,
    pub subname: *mut ::std::os::raw::c_char,
    pub conninfo: *mut ::std::os::raw::c_char,
    pub publication: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateSubscriptionStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateSubscriptionStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateSubscriptionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateSubscriptionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateSubscriptionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSubscriptionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSubscriptionStmt>())).subname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(subname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSubscriptionStmt>())).conninfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(conninfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateSubscriptionStmt>())).publication as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(publication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSubscriptionStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(options)
        )
    );
}
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_OPTIONS: AlterSubscriptionType = 0;
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_CONNECTION: AlterSubscriptionType = 1;
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_PUBLICATION: AlterSubscriptionType = 2;
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_REFRESH: AlterSubscriptionType = 3;
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_ENABLED: AlterSubscriptionType = 4;
pub type AlterSubscriptionType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AlterSubscriptionStmt {
    pub type_: NodeTag,
    pub kind: AlterSubscriptionType,
    pub subname: *mut ::std::os::raw::c_char,
    pub conninfo: *mut ::std::os::raw::c_char,
    pub publication: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterSubscriptionStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterSubscriptionStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterSubscriptionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterSubscriptionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterSubscriptionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).subname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(subname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).conninfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(conninfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterSubscriptionStmt>())).publication as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(publication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DropSubscriptionStmt {
    pub type_: NodeTag,
    pub subname: *mut ::std::os::raw::c_char,
    pub missing_ok: bool,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_DropSubscriptionStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropSubscriptionStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropSubscriptionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropSubscriptionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropSubscriptionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropSubscriptionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropSubscriptionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropSubscriptionStmt>())).subname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropSubscriptionStmt),
            "::",
            stringify!(subname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropSubscriptionStmt>())).missing_ok as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropSubscriptionStmt),
            "::",
            stringify!(missing_ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropSubscriptionStmt>())).behavior as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DropSubscriptionStmt),
            "::",
            stringify!(behavior)
        )
    );
}
pub type Relids = *mut Bitmapset;
pub const CostSelector_STARTUP_COST: CostSelector = 0;
pub const CostSelector_TOTAL_COST: CostSelector = 1;
pub type CostSelector = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct QualCost {
    pub startup: Cost,
    pub per_tuple: Cost,
}
#[test]
fn bindgen_test_layout_QualCost() {
    assert_eq!(
        ::std::mem::size_of::<QualCost>(),
        16usize,
        concat!("Size of: ", stringify!(QualCost))
    );
    assert_eq!(
        ::std::mem::align_of::<QualCost>(),
        8usize,
        concat!("Alignment of ", stringify!(QualCost))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QualCost>())).startup as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QualCost),
            "::",
            stringify!(startup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QualCost>())).per_tuple as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QualCost),
            "::",
            stringify!(per_tuple)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggClauseCosts {
    pub numAggs: ::std::os::raw::c_int,
    pub numOrderedAggs: ::std::os::raw::c_int,
    pub hasNonPartial: bool,
    pub hasNonSerial: bool,
    pub transCost: QualCost,
    pub finalCost: Cost,
    pub transitionSpace: Size,
}
#[test]
fn bindgen_test_layout_AggClauseCosts() {
    assert_eq!(
        ::std::mem::size_of::<AggClauseCosts>(),
        48usize,
        concat!("Size of: ", stringify!(AggClauseCosts))
    );
    assert_eq!(
        ::std::mem::align_of::<AggClauseCosts>(),
        8usize,
        concat!("Alignment of ", stringify!(AggClauseCosts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggClauseCosts>())).numAggs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AggClauseCosts),
            "::",
            stringify!(numAggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggClauseCosts>())).numOrderedAggs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AggClauseCosts),
            "::",
            stringify!(numOrderedAggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggClauseCosts>())).hasNonPartial as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AggClauseCosts),
            "::",
            stringify!(hasNonPartial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggClauseCosts>())).hasNonSerial as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(AggClauseCosts),
            "::",
            stringify!(hasNonSerial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggClauseCosts>())).transCost as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AggClauseCosts),
            "::",
            stringify!(transCost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggClauseCosts>())).finalCost as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AggClauseCosts),
            "::",
            stringify!(finalCost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggClauseCosts>())).transitionSpace as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AggClauseCosts),
            "::",
            stringify!(transitionSpace)
        )
    );
}
pub const UpperRelationKind_UPPERREL_SETOP: UpperRelationKind = 0;
pub const UpperRelationKind_UPPERREL_PARTIAL_GROUP_AGG: UpperRelationKind = 1;
pub const UpperRelationKind_UPPERREL_GROUP_AGG: UpperRelationKind = 2;
pub const UpperRelationKind_UPPERREL_WINDOW: UpperRelationKind = 3;
pub const UpperRelationKind_UPPERREL_DISTINCT: UpperRelationKind = 4;
pub const UpperRelationKind_UPPERREL_ORDERED: UpperRelationKind = 5;
pub const UpperRelationKind_UPPERREL_FINAL: UpperRelationKind = 6;
pub type UpperRelationKind = u32;
pub const InheritanceKind_INHKIND_NONE: InheritanceKind = 0;
pub const InheritanceKind_INHKIND_INHERITED: InheritanceKind = 1;
pub const InheritanceKind_INHKIND_PARTITIONED: InheritanceKind = 2;
pub type InheritanceKind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlannerGlobal {
    pub type_: NodeTag,
    pub boundParams: ParamListInfo,
    pub subplans: *mut List,
    pub subroots: *mut List,
    pub rewindPlanIDs: *mut Bitmapset,
    pub finalrtable: *mut List,
    pub finalrowmarks: *mut List,
    pub resultRelations: *mut List,
    pub nonleafResultRelations: *mut List,
    pub rootResultRelations: *mut List,
    pub relationOids: *mut List,
    pub invalItems: *mut List,
    pub paramExecTypes: *mut List,
    pub lastPHId: Index,
    pub lastRowMarkId: Index,
    pub lastPlanNodeId: ::std::os::raw::c_int,
    pub transientPlan: bool,
    pub dependsOnRole: bool,
    pub parallelModeOK: bool,
    pub parallelModeNeeded: bool,
    pub maxParallelHazard: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PlannerGlobal() {
    assert_eq!(
        ::std::mem::size_of::<PlannerGlobal>(),
        128usize,
        concat!("Size of: ", stringify!(PlannerGlobal))
    );
    assert_eq!(
        ::std::mem::align_of::<PlannerGlobal>(),
        8usize,
        concat!("Alignment of ", stringify!(PlannerGlobal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).boundParams as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(boundParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).subplans as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(subplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).subroots as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(subroots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).rewindPlanIDs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(rewindPlanIDs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).finalrtable as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(finalrtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).finalrowmarks as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(finalrowmarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).resultRelations as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(resultRelations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlannerGlobal>())).nonleafResultRelations as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(nonleafResultRelations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlannerGlobal>())).rootResultRelations as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(rootResultRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).relationOids as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(relationOids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).invalItems as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(invalItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).paramExecTypes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(paramExecTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).lastPHId as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(lastPHId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).lastRowMarkId as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(lastRowMarkId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).lastPlanNodeId as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(lastPlanNodeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).transientPlan as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(transientPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).dependsOnRole as *const _ as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(dependsOnRole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).parallelModeOK as *const _ as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(parallelModeOK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlannerGlobal>())).parallelModeNeeded as *const _ as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(parallelModeNeeded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerGlobal>())).maxParallelHazard as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerGlobal),
            "::",
            stringify!(maxParallelHazard)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlannerInfo {
    pub type_: NodeTag,
    pub parse: *mut Query,
    pub glob: *mut PlannerGlobal,
    pub query_level: Index,
    pub parent_root: *mut PlannerInfo,
    pub plan_params: *mut List,
    pub outer_params: *mut Bitmapset,
    pub simple_rel_array: *mut *mut RelOptInfo,
    pub simple_rel_array_size: ::std::os::raw::c_int,
    pub simple_rte_array: *mut *mut RangeTblEntry,
    pub append_rel_array: *mut *mut AppendRelInfo,
    pub all_baserels: Relids,
    pub nullable_baserels: Relids,
    pub join_rel_list: *mut List,
    pub join_rel_hash: *mut HTAB,
    pub join_rel_level: *mut *mut List,
    pub join_cur_level: ::std::os::raw::c_int,
    pub init_plans: *mut List,
    pub cte_plan_ids: *mut List,
    pub multiexpr_params: *mut List,
    pub eq_classes: *mut List,
    pub canon_pathkeys: *mut List,
    pub left_join_clauses: *mut List,
    pub right_join_clauses: *mut List,
    pub full_join_clauses: *mut List,
    pub join_info_list: *mut List,
    pub append_rel_list: *mut List,
    pub rowMarks: *mut List,
    pub placeholder_list: *mut List,
    pub fkey_list: *mut List,
    pub query_pathkeys: *mut List,
    pub group_pathkeys: *mut List,
    pub window_pathkeys: *mut List,
    pub distinct_pathkeys: *mut List,
    pub sort_pathkeys: *mut List,
    pub part_schemes: *mut List,
    pub initial_rels: *mut List,
    pub upper_rels: [*mut List; 7usize],
    pub upper_targets: [*mut PathTarget; 7usize],
    pub processed_tlist: *mut List,
    pub grouping_map: *mut AttrNumber,
    pub minmax_aggs: *mut List,
    pub planner_cxt: MemoryContext,
    pub total_table_pages: f64,
    pub tuple_fraction: f64,
    pub limit_tuples: f64,
    pub qual_security_level: Index,
    pub inhTargetKind: InheritanceKind,
    pub hasJoinRTEs: bool,
    pub hasLateralRTEs: bool,
    pub hasDeletedRTEs: bool,
    pub hasHavingQual: bool,
    pub hasPseudoConstantQuals: bool,
    pub hasRecursion: bool,
    pub wt_param_id: ::std::os::raw::c_int,
    pub non_recursive_path: *mut Path,
    pub curOuterRels: Relids,
    pub curOuterParams: *mut List,
    pub join_search_private: *mut ::std::os::raw::c_void,
    pub partColsUpdated: bool,
}
#[test]
fn bindgen_test_layout_PlannerInfo() {
    assert_eq!(
        ::std::mem::size_of::<PlannerInfo>(),
        528usize,
        concat!("Size of: ", stringify!(PlannerInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PlannerInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PlannerInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).parse as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(parse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).glob as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(glob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).query_level as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(query_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).parent_root as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(parent_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).plan_params as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(plan_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).outer_params as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(outer_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).simple_rel_array as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(simple_rel_array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlannerInfo>())).simple_rel_array_size as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(simple_rel_array_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).simple_rte_array as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(simple_rte_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).append_rel_array as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(append_rel_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).all_baserels as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(all_baserels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).nullable_baserels as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(nullable_baserels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).join_rel_list as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(join_rel_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).join_rel_hash as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(join_rel_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).join_rel_level as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(join_rel_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).join_cur_level as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(join_cur_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).init_plans as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(init_plans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).cte_plan_ids as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(cte_plan_ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).multiexpr_params as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(multiexpr_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).eq_classes as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(eq_classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).canon_pathkeys as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(canon_pathkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).left_join_clauses as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(left_join_clauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).right_join_clauses as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(right_join_clauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).full_join_clauses as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(full_join_clauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).join_info_list as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(join_info_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).append_rel_list as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(append_rel_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).rowMarks as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).placeholder_list as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(placeholder_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).fkey_list as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(fkey_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).query_pathkeys as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(query_pathkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).group_pathkeys as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(group_pathkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).window_pathkeys as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(window_pathkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).distinct_pathkeys as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(distinct_pathkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).sort_pathkeys as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(sort_pathkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).part_schemes as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(part_schemes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).initial_rels as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(initial_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).upper_rels as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(upper_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).upper_targets as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(upper_targets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).processed_tlist as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(processed_tlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).grouping_map as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(grouping_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).minmax_aggs as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(minmax_aggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).planner_cxt as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(planner_cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).total_table_pages as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(total_table_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).tuple_fraction as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(tuple_fraction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).limit_tuples as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(limit_tuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).qual_security_level as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(qual_security_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).inhTargetKind as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(inhTargetKind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).hasJoinRTEs as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(hasJoinRTEs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).hasLateralRTEs as *const _ as usize },
        473usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(hasLateralRTEs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).hasDeletedRTEs as *const _ as usize },
        474usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(hasDeletedRTEs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).hasHavingQual as *const _ as usize },
        475usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(hasHavingQual)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlannerInfo>())).hasPseudoConstantQuals as *const _ as usize
        },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(hasPseudoConstantQuals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).hasRecursion as *const _ as usize },
        477usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(hasRecursion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).wt_param_id as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(wt_param_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).non_recursive_path as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(non_recursive_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).curOuterRels as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(curOuterRels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).curOuterParams as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(curOuterParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).join_search_private as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(join_search_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerInfo>())).partColsUpdated as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerInfo),
            "::",
            stringify!(partColsUpdated)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionSchemeData {
    pub strategy: ::std::os::raw::c_char,
    pub partnatts: int16,
    pub partopfamily: *mut Oid,
    pub partopcintype: *mut Oid,
    pub partcollation: *mut Oid,
    pub parttyplen: *mut int16,
    pub parttypbyval: *mut bool,
    pub partsupfunc: *mut FmgrInfo,
}
#[test]
fn bindgen_test_layout_PartitionSchemeData() {
    assert_eq!(
        ::std::mem::size_of::<PartitionSchemeData>(),
        56usize,
        concat!("Size of: ", stringify!(PartitionSchemeData))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionSchemeData>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionSchemeData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSchemeData>())).strategy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSchemeData),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSchemeData>())).partnatts as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSchemeData),
            "::",
            stringify!(partnatts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionSchemeData>())).partopfamily as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSchemeData),
            "::",
            stringify!(partopfamily)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionSchemeData>())).partopcintype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSchemeData),
            "::",
            stringify!(partopcintype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionSchemeData>())).partcollation as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSchemeData),
            "::",
            stringify!(partcollation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSchemeData>())).parttyplen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSchemeData),
            "::",
            stringify!(parttyplen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PartitionSchemeData>())).parttypbyval as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSchemeData),
            "::",
            stringify!(parttypbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSchemeData>())).partsupfunc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSchemeData),
            "::",
            stringify!(partsupfunc)
        )
    );
}
pub type PartitionScheme = *mut PartitionSchemeData;
pub const RelOptKind_RELOPT_BASEREL: RelOptKind = 0;
pub const RelOptKind_RELOPT_JOINREL: RelOptKind = 1;
pub const RelOptKind_RELOPT_OTHER_MEMBER_REL: RelOptKind = 2;
pub const RelOptKind_RELOPT_OTHER_JOINREL: RelOptKind = 3;
pub const RelOptKind_RELOPT_UPPER_REL: RelOptKind = 4;
pub const RelOptKind_RELOPT_OTHER_UPPER_REL: RelOptKind = 5;
pub const RelOptKind_RELOPT_DEADREL: RelOptKind = 6;
pub type RelOptKind = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RelOptInfo {
    pub type_: NodeTag,
    pub reloptkind: RelOptKind,
    pub relids: Relids,
    pub rows: f64,
    pub consider_startup: bool,
    pub consider_param_startup: bool,
    pub consider_parallel: bool,
    pub reltarget: *mut PathTarget,
    pub pathlist: *mut List,
    pub ppilist: *mut List,
    pub partial_pathlist: *mut List,
    pub cheapest_startup_path: *mut Path,
    pub cheapest_total_path: *mut Path,
    pub cheapest_unique_path: *mut Path,
    pub cheapest_parameterized_paths: *mut List,
    pub direct_lateral_relids: Relids,
    pub lateral_relids: Relids,
    pub relid: Index,
    pub reltablespace: Oid,
    pub rtekind: RTEKind,
    pub min_attr: AttrNumber,
    pub max_attr: AttrNumber,
    pub attr_needed: *mut Relids,
    pub attr_widths: *mut int32,
    pub lateral_vars: *mut List,
    pub lateral_referencers: Relids,
    pub indexlist: *mut List,
    pub statlist: *mut List,
    pub pages: BlockNumber,
    pub tuples: f64,
    pub allvisfrac: f64,
    pub subroot: *mut PlannerInfo,
    pub subplan_params: *mut List,
    pub rel_parallel_workers: ::std::os::raw::c_int,
    pub serverid: Oid,
    pub userid: Oid,
    pub useridiscurrent: bool,
    pub fdwroutine: *mut FdwRoutine,
    pub fdw_private: *mut ::std::os::raw::c_void,
    pub unique_for_rels: *mut List,
    pub non_unique_for_rels: *mut List,
    pub baserestrictinfo: *mut List,
    pub baserestrictcost: QualCost,
    pub baserestrict_min_security: Index,
    pub joininfo: *mut List,
    pub has_eclass_joins: bool,
    pub consider_partitionwise_join: bool,
    pub top_parent_relids: Relids,
    pub part_scheme: PartitionScheme,
    pub nparts: ::std::os::raw::c_int,
    pub boundinfo: *mut PartitionBoundInfoData,
    pub partition_qual: *mut List,
    pub part_rels: *mut *mut RelOptInfo,
    pub partexprs: *mut *mut List,
    pub nullable_partexprs: *mut *mut List,
    pub partitioned_child_rels: *mut List,
}
#[test]
fn bindgen_test_layout_RelOptInfo() {
    assert_eq!(
        ::std::mem::size_of::<RelOptInfo>(),
        384usize,
        concat!("Size of: ", stringify!(RelOptInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RelOptInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RelOptInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).reloptkind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(reloptkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).relids as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).rows as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).consider_startup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(consider_startup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RelOptInfo>())).consider_param_startup as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(consider_param_startup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).consider_parallel as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(consider_parallel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).reltarget as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(reltarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).pathlist as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(pathlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).ppilist as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(ppilist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).partial_pathlist as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(partial_pathlist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RelOptInfo>())).cheapest_startup_path as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(cheapest_startup_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).cheapest_total_path as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(cheapest_total_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).cheapest_unique_path as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(cheapest_unique_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RelOptInfo>())).cheapest_parameterized_paths as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(cheapest_parameterized_paths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RelOptInfo>())).direct_lateral_relids as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(direct_lateral_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).lateral_relids as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(lateral_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).relid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).reltablespace as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(reltablespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).rtekind as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(rtekind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).min_attr as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(min_attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).max_attr as *const _ as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(max_attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).attr_needed as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(attr_needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).attr_widths as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(attr_widths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).lateral_vars as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(lateral_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).lateral_referencers as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(lateral_referencers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).indexlist as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(indexlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).statlist as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(statlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).pages as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).tuples as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(tuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).allvisfrac as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(allvisfrac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).subroot as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(subroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).subplan_params as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(subplan_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).rel_parallel_workers as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(rel_parallel_workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).serverid as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(serverid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).userid as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(userid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).useridiscurrent as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(useridiscurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).fdwroutine as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(fdwroutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).fdw_private as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(fdw_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).unique_for_rels as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(unique_for_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).non_unique_for_rels as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(non_unique_for_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).baserestrictinfo as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(baserestrictinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).baserestrictcost as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(baserestrictcost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RelOptInfo>())).baserestrict_min_security as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(baserestrict_min_security)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).joininfo as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(joininfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).has_eclass_joins as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(has_eclass_joins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RelOptInfo>())).consider_partitionwise_join as *const _ as usize
        },
        305usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(consider_partitionwise_join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).top_parent_relids as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(top_parent_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).part_scheme as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(part_scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).nparts as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(nparts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).boundinfo as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(boundinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).partition_qual as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(partition_qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).part_rels as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(part_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).partexprs as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(partexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelOptInfo>())).nullable_partexprs as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(nullable_partexprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RelOptInfo>())).partitioned_child_rels as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(RelOptInfo),
            "::",
            stringify!(partitioned_child_rels)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexOptInfo {
    pub type_: NodeTag,
    pub indexoid: Oid,
    pub reltablespace: Oid,
    pub rel: *mut RelOptInfo,
    pub pages: BlockNumber,
    pub tuples: f64,
    pub tree_height: ::std::os::raw::c_int,
    pub ncolumns: ::std::os::raw::c_int,
    pub nkeycolumns: ::std::os::raw::c_int,
    pub indexkeys: *mut ::std::os::raw::c_int,
    pub indexcollations: *mut Oid,
    pub opfamily: *mut Oid,
    pub opcintype: *mut Oid,
    pub sortopfamily: *mut Oid,
    pub reverse_sort: *mut bool,
    pub nulls_first: *mut bool,
    pub canreturn: *mut bool,
    pub relam: Oid,
    pub indexprs: *mut List,
    pub indpred: *mut List,
    pub indextlist: *mut List,
    pub indrestrictinfo: *mut List,
    pub predOK: bool,
    pub unique: bool,
    pub immediate: bool,
    pub hypothetical: bool,
    pub amcanorderbyop: bool,
    pub amoptionalkey: bool,
    pub amsearcharray: bool,
    pub amsearchnulls: bool,
    pub amhasgettuple: bool,
    pub amhasgetbitmap: bool,
    pub amcanparallel: bool,
    pub amcostestimate: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_IndexOptInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexOptInfo>(),
        184usize,
        concat!("Size of: ", stringify!(IndexOptInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexOptInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexOptInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).indexoid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(indexoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).reltablespace as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(reltablespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).rel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).pages as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).tuples as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(tuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).tree_height as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(tree_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).ncolumns as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(ncolumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).nkeycolumns as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(nkeycolumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).indexkeys as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(indexkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).indexcollations as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(indexcollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).opfamily as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(opfamily)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).opcintype as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(opcintype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).sortopfamily as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(sortopfamily)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).reverse_sort as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(reverse_sort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).nulls_first as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(nulls_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).canreturn as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(canreturn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).relam as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(relam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).indexprs as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(indexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).indpred as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(indpred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).indextlist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(indextlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).indrestrictinfo as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(indrestrictinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).predOK as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(predOK)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).unique as *const _ as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).immediate as *const _ as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(immediate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).hypothetical as *const _ as usize },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(hypothetical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).amcanorderbyop as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(amcanorderbyop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).amoptionalkey as *const _ as usize },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(amoptionalkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).amsearcharray as *const _ as usize },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(amsearcharray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).amsearchnulls as *const _ as usize },
        167usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(amsearchnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).amhasgettuple as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(amhasgettuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).amhasgetbitmap as *const _ as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(amhasgetbitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).amcanparallel as *const _ as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(amcanparallel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOptInfo>())).amcostestimate as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOptInfo),
            "::",
            stringify!(amcostestimate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForeignKeyOptInfo {
    pub type_: NodeTag,
    pub con_relid: Index,
    pub ref_relid: Index,
    pub nkeys: ::std::os::raw::c_int,
    pub conkey: [AttrNumber; 32usize],
    pub confkey: [AttrNumber; 32usize],
    pub conpfeqop: [Oid; 32usize],
    pub nmatched_ec: ::std::os::raw::c_int,
    pub nmatched_rcols: ::std::os::raw::c_int,
    pub nmatched_ri: ::std::os::raw::c_int,
    pub eclass: [*mut EquivalenceClass; 32usize],
    pub rinfos: [*mut List; 32usize],
}
#[test]
fn bindgen_test_layout_ForeignKeyOptInfo() {
    assert_eq!(
        ::std::mem::size_of::<ForeignKeyOptInfo>(),
        800usize,
        concat!("Size of: ", stringify!(ForeignKeyOptInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignKeyOptInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignKeyOptInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).con_relid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(con_relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).ref_relid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(ref_relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).nkeys as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(nkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).conkey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(conkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).confkey as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(confkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).conpfeqop as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(conpfeqop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).nmatched_ec as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(nmatched_ec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ForeignKeyOptInfo>())).nmatched_rcols as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(nmatched_rcols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).nmatched_ri as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(nmatched_ri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).eclass as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(eclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyOptInfo>())).rinfos as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyOptInfo),
            "::",
            stringify!(rinfos)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StatisticExtInfo {
    pub type_: NodeTag,
    pub statOid: Oid,
    pub rel: *mut RelOptInfo,
    pub kind: ::std::os::raw::c_char,
    pub keys: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_StatisticExtInfo() {
    assert_eq!(
        ::std::mem::size_of::<StatisticExtInfo>(),
        32usize,
        concat!("Size of: ", stringify!(StatisticExtInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<StatisticExtInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(StatisticExtInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StatisticExtInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StatisticExtInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StatisticExtInfo>())).statOid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StatisticExtInfo),
            "::",
            stringify!(statOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StatisticExtInfo>())).rel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StatisticExtInfo),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StatisticExtInfo>())).kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StatisticExtInfo),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StatisticExtInfo>())).keys as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StatisticExtInfo),
            "::",
            stringify!(keys)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EquivalenceClass {
    pub type_: NodeTag,
    pub ec_opfamilies: *mut List,
    pub ec_collation: Oid,
    pub ec_members: *mut List,
    pub ec_sources: *mut List,
    pub ec_derives: *mut List,
    pub ec_relids: Relids,
    pub ec_has_const: bool,
    pub ec_has_volatile: bool,
    pub ec_below_outer_join: bool,
    pub ec_broken: bool,
    pub ec_sortref: Index,
    pub ec_min_security: Index,
    pub ec_max_security: Index,
    pub ec_merged: *mut EquivalenceClass,
}
#[test]
fn bindgen_test_layout_EquivalenceClass() {
    assert_eq!(
        ::std::mem::size_of::<EquivalenceClass>(),
        80usize,
        concat!("Size of: ", stringify!(EquivalenceClass))
    );
    assert_eq!(
        ::std::mem::align_of::<EquivalenceClass>(),
        8usize,
        concat!("Alignment of ", stringify!(EquivalenceClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_opfamilies as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_opfamilies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_collation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_members as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_sources as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_sources)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_derives as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_derives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_relids as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_has_const as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_has_const)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EquivalenceClass>())).ec_has_volatile as *const _ as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_has_volatile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EquivalenceClass>())).ec_below_outer_join as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_below_outer_join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_broken as *const _ as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_broken)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_sortref as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_sortref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EquivalenceClass>())).ec_min_security as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_min_security)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EquivalenceClass>())).ec_max_security as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_max_security)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceClass>())).ec_merged as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceClass),
            "::",
            stringify!(ec_merged)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EquivalenceMember {
    pub type_: NodeTag,
    pub em_expr: *mut Expr,
    pub em_relids: Relids,
    pub em_nullable_relids: Relids,
    pub em_is_const: bool,
    pub em_is_child: bool,
    pub em_datatype: Oid,
}
#[test]
fn bindgen_test_layout_EquivalenceMember() {
    assert_eq!(
        ::std::mem::size_of::<EquivalenceMember>(),
        40usize,
        concat!("Size of: ", stringify!(EquivalenceMember))
    );
    assert_eq!(
        ::std::mem::align_of::<EquivalenceMember>(),
        8usize,
        concat!("Alignment of ", stringify!(EquivalenceMember))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceMember>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceMember),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceMember>())).em_expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceMember),
            "::",
            stringify!(em_expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceMember>())).em_relids as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceMember),
            "::",
            stringify!(em_relids)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EquivalenceMember>())).em_nullable_relids as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceMember),
            "::",
            stringify!(em_nullable_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceMember>())).em_is_const as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceMember),
            "::",
            stringify!(em_is_const)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceMember>())).em_is_child as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceMember),
            "::",
            stringify!(em_is_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EquivalenceMember>())).em_datatype as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(EquivalenceMember),
            "::",
            stringify!(em_datatype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PathKey {
    pub type_: NodeTag,
    pub pk_eclass: *mut EquivalenceClass,
    pub pk_opfamily: Oid,
    pub pk_strategy: ::std::os::raw::c_int,
    pub pk_nulls_first: bool,
}
#[test]
fn bindgen_test_layout_PathKey() {
    assert_eq!(
        ::std::mem::size_of::<PathKey>(),
        32usize,
        concat!("Size of: ", stringify!(PathKey))
    );
    assert_eq!(
        ::std::mem::align_of::<PathKey>(),
        8usize,
        concat!("Alignment of ", stringify!(PathKey))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathKey>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PathKey),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathKey>())).pk_eclass as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PathKey),
            "::",
            stringify!(pk_eclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathKey>())).pk_opfamily as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PathKey),
            "::",
            stringify!(pk_opfamily)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathKey>())).pk_strategy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PathKey),
            "::",
            stringify!(pk_strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathKey>())).pk_nulls_first as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PathKey),
            "::",
            stringify!(pk_nulls_first)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PathTarget {
    pub type_: NodeTag,
    pub exprs: *mut List,
    pub sortgrouprefs: *mut Index,
    pub cost: QualCost,
    pub width: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PathTarget() {
    assert_eq!(
        ::std::mem::size_of::<PathTarget>(),
        48usize,
        concat!("Size of: ", stringify!(PathTarget))
    );
    assert_eq!(
        ::std::mem::align_of::<PathTarget>(),
        8usize,
        concat!("Alignment of ", stringify!(PathTarget))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathTarget>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PathTarget),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathTarget>())).exprs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PathTarget),
            "::",
            stringify!(exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathTarget>())).sortgrouprefs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PathTarget),
            "::",
            stringify!(sortgrouprefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathTarget>())).cost as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PathTarget),
            "::",
            stringify!(cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathTarget>())).width as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PathTarget),
            "::",
            stringify!(width)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParamPathInfo {
    pub type_: NodeTag,
    pub ppi_req_outer: Relids,
    pub ppi_rows: f64,
    pub ppi_clauses: *mut List,
}
#[test]
fn bindgen_test_layout_ParamPathInfo() {
    assert_eq!(
        ::std::mem::size_of::<ParamPathInfo>(),
        32usize,
        concat!("Size of: ", stringify!(ParamPathInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamPathInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ParamPathInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamPathInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamPathInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamPathInfo>())).ppi_req_outer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamPathInfo),
            "::",
            stringify!(ppi_req_outer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamPathInfo>())).ppi_rows as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamPathInfo),
            "::",
            stringify!(ppi_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamPathInfo>())).ppi_clauses as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamPathInfo),
            "::",
            stringify!(ppi_clauses)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Path {
    pub type_: NodeTag,
    pub pathtype: NodeTag,
    pub parent: *mut RelOptInfo,
    pub pathtarget: *mut PathTarget,
    pub param_info: *mut ParamPathInfo,
    pub parallel_aware: bool,
    pub parallel_safe: bool,
    pub parallel_workers: ::std::os::raw::c_int,
    pub rows: f64,
    pub startup_cost: Cost,
    pub total_cost: Cost,
    pub pathkeys: *mut List,
}
#[test]
fn bindgen_test_layout_Path() {
    assert_eq!(
        ::std::mem::size_of::<Path>(),
        72usize,
        concat!("Size of: ", stringify!(Path))
    );
    assert_eq!(
        ::std::mem::align_of::<Path>(),
        8usize,
        concat!("Alignment of ", stringify!(Path))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).pathtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(pathtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).parent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).pathtarget as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(pathtarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).param_info as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(param_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).parallel_aware as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(parallel_aware)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).parallel_safe as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(parallel_safe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).parallel_workers as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(parallel_workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).rows as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).startup_cost as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(startup_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).total_cost as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(total_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).pathkeys as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(pathkeys)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IndexPath {
    pub path: Path,
    pub indexinfo: *mut IndexOptInfo,
    pub indexclauses: *mut List,
    pub indexquals: *mut List,
    pub indexqualcols: *mut List,
    pub indexorderbys: *mut List,
    pub indexorderbycols: *mut List,
    pub indexscandir: ScanDirection,
    pub indextotalcost: Cost,
    pub indexselectivity: Selectivity,
}
#[test]
fn bindgen_test_layout_IndexPath() {
    assert_eq!(
        ::std::mem::size_of::<IndexPath>(),
        144usize,
        concat!("Size of: ", stringify!(IndexPath))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexPath>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indexinfo as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indexinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indexclauses as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indexclauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indexquals as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indexquals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indexqualcols as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indexqualcols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indexorderbys as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indexorderbys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indexorderbycols as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indexorderbycols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indexscandir as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indexscandir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indextotalcost as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indextotalcost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexPath>())).indexselectivity as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexPath),
            "::",
            stringify!(indexselectivity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapHeapPath {
    pub path: Path,
    pub bitmapqual: *mut Path,
}
#[test]
fn bindgen_test_layout_BitmapHeapPath() {
    assert_eq!(
        ::std::mem::size_of::<BitmapHeapPath>(),
        80usize,
        concat!("Size of: ", stringify!(BitmapHeapPath))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapHeapPath>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapHeapPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapPath>())).bitmapqual as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapPath),
            "::",
            stringify!(bitmapqual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapAndPath {
    pub path: Path,
    pub bitmapquals: *mut List,
    pub bitmapselectivity: Selectivity,
}
#[test]
fn bindgen_test_layout_BitmapAndPath() {
    assert_eq!(
        ::std::mem::size_of::<BitmapAndPath>(),
        88usize,
        concat!("Size of: ", stringify!(BitmapAndPath))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapAndPath>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapAndPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndPath>())).bitmapquals as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndPath),
            "::",
            stringify!(bitmapquals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndPath>())).bitmapselectivity as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndPath),
            "::",
            stringify!(bitmapselectivity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BitmapOrPath {
    pub path: Path,
    pub bitmapquals: *mut List,
    pub bitmapselectivity: Selectivity,
}
#[test]
fn bindgen_test_layout_BitmapOrPath() {
    assert_eq!(
        ::std::mem::size_of::<BitmapOrPath>(),
        88usize,
        concat!("Size of: ", stringify!(BitmapOrPath))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapOrPath>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapOrPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrPath>())).bitmapquals as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrPath),
            "::",
            stringify!(bitmapquals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrPath>())).bitmapselectivity as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrPath),
            "::",
            stringify!(bitmapselectivity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TidPath {
    pub path: Path,
    pub tidquals: *mut List,
}
#[test]
fn bindgen_test_layout_TidPath() {
    assert_eq!(
        ::std::mem::size_of::<TidPath>(),
        80usize,
        concat!("Size of: ", stringify!(TidPath))
    );
    assert_eq!(
        ::std::mem::align_of::<TidPath>(),
        8usize,
        concat!("Alignment of ", stringify!(TidPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TidPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidPath>())).tidquals as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TidPath),
            "::",
            stringify!(tidquals)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SubqueryScanPath {
    pub path: Path,
    pub subpath: *mut Path,
}
#[test]
fn bindgen_test_layout_SubqueryScanPath() {
    assert_eq!(
        ::std::mem::size_of::<SubqueryScanPath>(),
        80usize,
        concat!("Size of: ", stringify!(SubqueryScanPath))
    );
    assert_eq!(
        ::std::mem::align_of::<SubqueryScanPath>(),
        8usize,
        concat!("Alignment of ", stringify!(SubqueryScanPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScanPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScanPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScanPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScanPath),
            "::",
            stringify!(subpath)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForeignPath {
    pub path: Path,
    pub fdw_outerpath: *mut Path,
    pub fdw_private: *mut List,
}
#[test]
fn bindgen_test_layout_ForeignPath() {
    assert_eq!(
        ::std::mem::size_of::<ForeignPath>(),
        88usize,
        concat!("Size of: ", stringify!(ForeignPath))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignPath>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignPath>())).fdw_outerpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignPath),
            "::",
            stringify!(fdw_outerpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignPath>())).fdw_private as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignPath),
            "::",
            stringify!(fdw_private)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CustomPathMethods {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CustomPath {
    pub path: Path,
    pub flags: uint32,
    pub custom_paths: *mut List,
    pub custom_private: *mut List,
    pub methods: *const CustomPathMethods,
}
#[test]
fn bindgen_test_layout_CustomPath() {
    assert_eq!(
        ::std::mem::size_of::<CustomPath>(),
        104usize,
        concat!("Size of: ", stringify!(CustomPath))
    );
    assert_eq!(
        ::std::mem::align_of::<CustomPath>(),
        8usize,
        concat!("Alignment of ", stringify!(CustomPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomPath>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomPath),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomPath>())).custom_paths as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomPath),
            "::",
            stringify!(custom_paths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomPath>())).custom_private as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomPath),
            "::",
            stringify!(custom_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomPath>())).methods as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomPath),
            "::",
            stringify!(methods)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AppendPath {
    pub path: Path,
    pub partitioned_rels: *mut List,
    pub subpaths: *mut List,
    pub first_partial_path: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AppendPath() {
    assert_eq!(
        ::std::mem::size_of::<AppendPath>(),
        96usize,
        concat!("Size of: ", stringify!(AppendPath))
    );
    assert_eq!(
        ::std::mem::align_of::<AppendPath>(),
        8usize,
        concat!("Alignment of ", stringify!(AppendPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendPath>())).partitioned_rels as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendPath),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendPath>())).subpaths as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendPath),
            "::",
            stringify!(subpaths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendPath>())).first_partial_path as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendPath),
            "::",
            stringify!(first_partial_path)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MergeAppendPath {
    pub path: Path,
    pub partitioned_rels: *mut List,
    pub subpaths: *mut List,
    pub limit_tuples: f64,
}
#[test]
fn bindgen_test_layout_MergeAppendPath() {
    assert_eq!(
        ::std::mem::size_of::<MergeAppendPath>(),
        96usize,
        concat!("Size of: ", stringify!(MergeAppendPath))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeAppendPath>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeAppendPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeAppendPath>())).partitioned_rels as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendPath),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendPath>())).subpaths as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendPath),
            "::",
            stringify!(subpaths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendPath>())).limit_tuples as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendPath),
            "::",
            stringify!(limit_tuples)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ResultPath {
    pub path: Path,
    pub quals: *mut List,
}
#[test]
fn bindgen_test_layout_ResultPath() {
    assert_eq!(
        ::std::mem::size_of::<ResultPath>(),
        80usize,
        concat!("Size of: ", stringify!(ResultPath))
    );
    assert_eq!(
        ::std::mem::align_of::<ResultPath>(),
        8usize,
        concat!("Alignment of ", stringify!(ResultPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultPath>())).quals as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultPath),
            "::",
            stringify!(quals)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MaterialPath {
    pub path: Path,
    pub subpath: *mut Path,
}
#[test]
fn bindgen_test_layout_MaterialPath() {
    assert_eq!(
        ::std::mem::size_of::<MaterialPath>(),
        80usize,
        concat!("Size of: ", stringify!(MaterialPath))
    );
    assert_eq!(
        ::std::mem::align_of::<MaterialPath>(),
        8usize,
        concat!("Alignment of ", stringify!(MaterialPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialPath),
            "::",
            stringify!(subpath)
        )
    );
}
pub const UniquePathMethod_UNIQUE_PATH_NOOP: UniquePathMethod = 0;
pub const UniquePathMethod_UNIQUE_PATH_HASH: UniquePathMethod = 1;
pub const UniquePathMethod_UNIQUE_PATH_SORT: UniquePathMethod = 2;
pub type UniquePathMethod = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UniquePath {
    pub path: Path,
    pub subpath: *mut Path,
    pub umethod: UniquePathMethod,
    pub in_operators: *mut List,
    pub uniq_exprs: *mut List,
}
#[test]
fn bindgen_test_layout_UniquePath() {
    assert_eq!(
        ::std::mem::size_of::<UniquePath>(),
        104usize,
        concat!("Size of: ", stringify!(UniquePath))
    );
    assert_eq!(
        ::std::mem::align_of::<UniquePath>(),
        8usize,
        concat!("Alignment of ", stringify!(UniquePath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniquePath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UniquePath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniquePath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(UniquePath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniquePath>())).umethod as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(UniquePath),
            "::",
            stringify!(umethod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniquePath>())).in_operators as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(UniquePath),
            "::",
            stringify!(in_operators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniquePath>())).uniq_exprs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(UniquePath),
            "::",
            stringify!(uniq_exprs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GatherPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub single_copy: bool,
    pub num_workers: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GatherPath() {
    assert_eq!(
        ::std::mem::size_of::<GatherPath>(),
        88usize,
        concat!("Size of: ", stringify!(GatherPath))
    );
    assert_eq!(
        ::std::mem::align_of::<GatherPath>(),
        8usize,
        concat!("Alignment of ", stringify!(GatherPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherPath>())).single_copy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherPath),
            "::",
            stringify!(single_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherPath>())).num_workers as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherPath),
            "::",
            stringify!(num_workers)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GatherMergePath {
    pub path: Path,
    pub subpath: *mut Path,
    pub num_workers: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GatherMergePath() {
    assert_eq!(
        ::std::mem::size_of::<GatherMergePath>(),
        88usize,
        concat!("Size of: ", stringify!(GatherMergePath))
    );
    assert_eq!(
        ::std::mem::align_of::<GatherMergePath>(),
        8usize,
        concat!("Alignment of ", stringify!(GatherMergePath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergePath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergePath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergePath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergePath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergePath>())).num_workers as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergePath),
            "::",
            stringify!(num_workers)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JoinPath {
    pub path: Path,
    pub jointype: JoinType,
    pub inner_unique: bool,
    pub outerjoinpath: *mut Path,
    pub innerjoinpath: *mut Path,
    pub joinrestrictinfo: *mut List,
}
#[test]
fn bindgen_test_layout_JoinPath() {
    assert_eq!(
        ::std::mem::size_of::<JoinPath>(),
        104usize,
        concat!("Size of: ", stringify!(JoinPath))
    );
    assert_eq!(
        ::std::mem::align_of::<JoinPath>(),
        8usize,
        concat!("Alignment of ", stringify!(JoinPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPath>())).jointype as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPath),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPath>())).inner_unique as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPath),
            "::",
            stringify!(inner_unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPath>())).outerjoinpath as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPath),
            "::",
            stringify!(outerjoinpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPath>())).innerjoinpath as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPath),
            "::",
            stringify!(innerjoinpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPath>())).joinrestrictinfo as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPath),
            "::",
            stringify!(joinrestrictinfo)
        )
    );
}
pub type NestPath = JoinPath;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MergePath {
    pub jpath: JoinPath,
    pub path_mergeclauses: *mut List,
    pub outersortkeys: *mut List,
    pub innersortkeys: *mut List,
    pub skip_mark_restore: bool,
    pub materialize_inner: bool,
}
#[test]
fn bindgen_test_layout_MergePath() {
    assert_eq!(
        ::std::mem::size_of::<MergePath>(),
        136usize,
        concat!("Size of: ", stringify!(MergePath))
    );
    assert_eq!(
        ::std::mem::align_of::<MergePath>(),
        8usize,
        concat!("Alignment of ", stringify!(MergePath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergePath>())).jpath as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergePath),
            "::",
            stringify!(jpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergePath>())).path_mergeclauses as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(MergePath),
            "::",
            stringify!(path_mergeclauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergePath>())).outersortkeys as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(MergePath),
            "::",
            stringify!(outersortkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergePath>())).innersortkeys as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(MergePath),
            "::",
            stringify!(innersortkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergePath>())).skip_mark_restore as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MergePath),
            "::",
            stringify!(skip_mark_restore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergePath>())).materialize_inner as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(MergePath),
            "::",
            stringify!(materialize_inner)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HashPath {
    pub jpath: JoinPath,
    pub path_hashclauses: *mut List,
    pub num_batches: ::std::os::raw::c_int,
    pub inner_rows_total: f64,
}
#[test]
fn bindgen_test_layout_HashPath() {
    assert_eq!(
        ::std::mem::size_of::<HashPath>(),
        128usize,
        concat!("Size of: ", stringify!(HashPath))
    );
    assert_eq!(
        ::std::mem::align_of::<HashPath>(),
        8usize,
        concat!("Alignment of ", stringify!(HashPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashPath>())).jpath as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashPath),
            "::",
            stringify!(jpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashPath>())).path_hashclauses as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(HashPath),
            "::",
            stringify!(path_hashclauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashPath>())).num_batches as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(HashPath),
            "::",
            stringify!(num_batches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashPath>())).inner_rows_total as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(HashPath),
            "::",
            stringify!(inner_rows_total)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProjectionPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub dummypp: bool,
}
#[test]
fn bindgen_test_layout_ProjectionPath() {
    assert_eq!(
        ::std::mem::size_of::<ProjectionPath>(),
        88usize,
        concat!("Size of: ", stringify!(ProjectionPath))
    );
    assert_eq!(
        ::std::mem::align_of::<ProjectionPath>(),
        8usize,
        concat!("Alignment of ", stringify!(ProjectionPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionPath>())).dummypp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionPath),
            "::",
            stringify!(dummypp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProjectSetPath {
    pub path: Path,
    pub subpath: *mut Path,
}
#[test]
fn bindgen_test_layout_ProjectSetPath() {
    assert_eq!(
        ::std::mem::size_of::<ProjectSetPath>(),
        80usize,
        concat!("Size of: ", stringify!(ProjectSetPath))
    );
    assert_eq!(
        ::std::mem::align_of::<ProjectSetPath>(),
        8usize,
        concat!("Alignment of ", stringify!(ProjectSetPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetPath),
            "::",
            stringify!(subpath)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SortPath {
    pub path: Path,
    pub subpath: *mut Path,
}
#[test]
fn bindgen_test_layout_SortPath() {
    assert_eq!(
        ::std::mem::size_of::<SortPath>(),
        80usize,
        concat!("Size of: ", stringify!(SortPath))
    );
    assert_eq!(
        ::std::mem::align_of::<SortPath>(),
        8usize,
        concat!("Alignment of ", stringify!(SortPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SortPath),
            "::",
            stringify!(subpath)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GroupPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub groupClause: *mut List,
    pub qual: *mut List,
}
#[test]
fn bindgen_test_layout_GroupPath() {
    assert_eq!(
        ::std::mem::size_of::<GroupPath>(),
        96usize,
        concat!("Size of: ", stringify!(GroupPath))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupPath>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupPath>())).groupClause as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPath),
            "::",
            stringify!(groupClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupPath>())).qual as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPath),
            "::",
            stringify!(qual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UpperUniquePath {
    pub path: Path,
    pub subpath: *mut Path,
    pub numkeys: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_UpperUniquePath() {
    assert_eq!(
        ::std::mem::size_of::<UpperUniquePath>(),
        88usize,
        concat!("Size of: ", stringify!(UpperUniquePath))
    );
    assert_eq!(
        ::std::mem::align_of::<UpperUniquePath>(),
        8usize,
        concat!("Alignment of ", stringify!(UpperUniquePath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpperUniquePath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UpperUniquePath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpperUniquePath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(UpperUniquePath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpperUniquePath>())).numkeys as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(UpperUniquePath),
            "::",
            stringify!(numkeys)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AggPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub aggstrategy: AggStrategy,
    pub aggsplit: AggSplit,
    pub numGroups: f64,
    pub groupClause: *mut List,
    pub qual: *mut List,
}
#[test]
fn bindgen_test_layout_AggPath() {
    assert_eq!(
        ::std::mem::size_of::<AggPath>(),
        112usize,
        concat!("Size of: ", stringify!(AggPath))
    );
    assert_eq!(
        ::std::mem::align_of::<AggPath>(),
        8usize,
        concat!("Alignment of ", stringify!(AggPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AggPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AggPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggPath>())).aggstrategy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AggPath),
            "::",
            stringify!(aggstrategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggPath>())).aggsplit as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(AggPath),
            "::",
            stringify!(aggsplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggPath>())).numGroups as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(AggPath),
            "::",
            stringify!(numGroups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggPath>())).groupClause as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(AggPath),
            "::",
            stringify!(groupClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggPath>())).qual as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(AggPath),
            "::",
            stringify!(qual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GroupingSetData {
    pub type_: NodeTag,
    pub set: *mut List,
    pub numGroups: f64,
}
#[test]
fn bindgen_test_layout_GroupingSetData() {
    assert_eq!(
        ::std::mem::size_of::<GroupingSetData>(),
        24usize,
        concat!("Size of: ", stringify!(GroupingSetData))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupingSetData>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupingSetData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSetData>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSetData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSetData>())).set as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSetData),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSetData>())).numGroups as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSetData),
            "::",
            stringify!(numGroups)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RollupData {
    pub type_: NodeTag,
    pub groupClause: *mut List,
    pub gsets: *mut List,
    pub gsets_data: *mut List,
    pub numGroups: f64,
    pub hashable: bool,
    pub is_hashed: bool,
}
#[test]
fn bindgen_test_layout_RollupData() {
    assert_eq!(
        ::std::mem::size_of::<RollupData>(),
        48usize,
        concat!("Size of: ", stringify!(RollupData))
    );
    assert_eq!(
        ::std::mem::align_of::<RollupData>(),
        8usize,
        concat!("Alignment of ", stringify!(RollupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RollupData>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RollupData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RollupData>())).groupClause as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RollupData),
            "::",
            stringify!(groupClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RollupData>())).gsets as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RollupData),
            "::",
            stringify!(gsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RollupData>())).gsets_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RollupData),
            "::",
            stringify!(gsets_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RollupData>())).numGroups as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RollupData),
            "::",
            stringify!(numGroups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RollupData>())).hashable as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RollupData),
            "::",
            stringify!(hashable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RollupData>())).is_hashed as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(RollupData),
            "::",
            stringify!(is_hashed)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GroupingSetsPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub aggstrategy: AggStrategy,
    pub rollups: *mut List,
    pub qual: *mut List,
}
#[test]
fn bindgen_test_layout_GroupingSetsPath() {
    assert_eq!(
        ::std::mem::size_of::<GroupingSetsPath>(),
        104usize,
        concat!("Size of: ", stringify!(GroupingSetsPath))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupingSetsPath>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupingSetsPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSetsPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSetsPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSetsPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSetsPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSetsPath>())).aggstrategy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSetsPath),
            "::",
            stringify!(aggstrategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSetsPath>())).rollups as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSetsPath),
            "::",
            stringify!(rollups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSetsPath>())).qual as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSetsPath),
            "::",
            stringify!(qual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MinMaxAggPath {
    pub path: Path,
    pub mmaggregates: *mut List,
    pub quals: *mut List,
}
#[test]
fn bindgen_test_layout_MinMaxAggPath() {
    assert_eq!(
        ::std::mem::size_of::<MinMaxAggPath>(),
        88usize,
        concat!("Size of: ", stringify!(MinMaxAggPath))
    );
    assert_eq!(
        ::std::mem::align_of::<MinMaxAggPath>(),
        8usize,
        concat!("Alignment of ", stringify!(MinMaxAggPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggPath>())).mmaggregates as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggPath),
            "::",
            stringify!(mmaggregates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggPath>())).quals as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggPath),
            "::",
            stringify!(quals)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowAggPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub winclause: *mut WindowClause,
}
#[test]
fn bindgen_test_layout_WindowAggPath() {
    assert_eq!(
        ::std::mem::size_of::<WindowAggPath>(),
        88usize,
        concat!("Size of: ", stringify!(WindowAggPath))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowAggPath>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowAggPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggPath>())).winclause as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggPath),
            "::",
            stringify!(winclause)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SetOpPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub cmd: SetOpCmd,
    pub strategy: SetOpStrategy,
    pub distinctList: *mut List,
    pub flagColIdx: AttrNumber,
    pub firstFlag: ::std::os::raw::c_int,
    pub numGroups: f64,
}
#[test]
fn bindgen_test_layout_SetOpPath() {
    assert_eq!(
        ::std::mem::size_of::<SetOpPath>(),
        112usize,
        concat!("Size of: ", stringify!(SetOpPath))
    );
    assert_eq!(
        ::std::mem::align_of::<SetOpPath>(),
        8usize,
        concat!("Alignment of ", stringify!(SetOpPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpPath>())).cmd as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpPath),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpPath>())).strategy as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpPath),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpPath>())).distinctList as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpPath),
            "::",
            stringify!(distinctList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpPath>())).flagColIdx as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpPath),
            "::",
            stringify!(flagColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpPath>())).firstFlag as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpPath),
            "::",
            stringify!(firstFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpPath>())).numGroups as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpPath),
            "::",
            stringify!(numGroups)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RecursiveUnionPath {
    pub path: Path,
    pub leftpath: *mut Path,
    pub rightpath: *mut Path,
    pub distinctList: *mut List,
    pub wtParam: ::std::os::raw::c_int,
    pub numGroups: f64,
}
#[test]
fn bindgen_test_layout_RecursiveUnionPath() {
    assert_eq!(
        ::std::mem::size_of::<RecursiveUnionPath>(),
        112usize,
        concat!("Size of: ", stringify!(RecursiveUnionPath))
    );
    assert_eq!(
        ::std::mem::align_of::<RecursiveUnionPath>(),
        8usize,
        concat!("Alignment of ", stringify!(RecursiveUnionPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionPath>())).leftpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionPath),
            "::",
            stringify!(leftpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionPath>())).rightpath as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionPath),
            "::",
            stringify!(rightpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionPath>())).distinctList as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionPath),
            "::",
            stringify!(distinctList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionPath>())).wtParam as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionPath),
            "::",
            stringify!(wtParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionPath>())).numGroups as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionPath),
            "::",
            stringify!(numGroups)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockRowsPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub rowMarks: *mut List,
    pub epqParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LockRowsPath() {
    assert_eq!(
        ::std::mem::size_of::<LockRowsPath>(),
        96usize,
        concat!("Size of: ", stringify!(LockRowsPath))
    );
    assert_eq!(
        ::std::mem::align_of::<LockRowsPath>(),
        8usize,
        concat!("Alignment of ", stringify!(LockRowsPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsPath>())).rowMarks as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsPath),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsPath>())).epqParam as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsPath),
            "::",
            stringify!(epqParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ModifyTablePath {
    pub path: Path,
    pub operation: CmdType,
    pub canSetTag: bool,
    pub nominalRelation: Index,
    pub partitioned_rels: *mut List,
    pub partColsUpdated: bool,
    pub resultRelations: *mut List,
    pub subpaths: *mut List,
    pub subroots: *mut List,
    pub withCheckOptionLists: *mut List,
    pub returningLists: *mut List,
    pub rowMarks: *mut List,
    pub onconflict: *mut OnConflictExpr,
    pub epqParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ModifyTablePath() {
    assert_eq!(
        ::std::mem::size_of::<ModifyTablePath>(),
        168usize,
        concat!("Size of: ", stringify!(ModifyTablePath))
    );
    assert_eq!(
        ::std::mem::align_of::<ModifyTablePath>(),
        8usize,
        concat!("Alignment of ", stringify!(ModifyTablePath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).operation as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).canSetTag as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).nominalRelation as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(nominalRelation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTablePath>())).partitioned_rels as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).partColsUpdated as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(partColsUpdated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).resultRelations as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(resultRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).subpaths as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(subpaths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).subroots as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(subroots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTablePath>())).withCheckOptionLists as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(withCheckOptionLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).returningLists as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(returningLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).rowMarks as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).onconflict as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(onconflict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTablePath>())).epqParam as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTablePath),
            "::",
            stringify!(epqParam)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LimitPath {
    pub path: Path,
    pub subpath: *mut Path,
    pub limitOffset: *mut Node,
    pub limitCount: *mut Node,
}
#[test]
fn bindgen_test_layout_LimitPath() {
    assert_eq!(
        ::std::mem::size_of::<LimitPath>(),
        96usize,
        concat!("Size of: ", stringify!(LimitPath))
    );
    assert_eq!(
        ::std::mem::align_of::<LimitPath>(),
        8usize,
        concat!("Alignment of ", stringify!(LimitPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitPath>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitPath>())).subpath as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitPath),
            "::",
            stringify!(subpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitPath>())).limitOffset as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitPath),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitPath>())).limitCount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitPath),
            "::",
            stringify!(limitCount)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RestrictInfo {
    pub type_: NodeTag,
    pub clause: *mut Expr,
    pub is_pushed_down: bool,
    pub outerjoin_delayed: bool,
    pub can_join: bool,
    pub pseudoconstant: bool,
    pub leakproof: bool,
    pub security_level: Index,
    pub clause_relids: Relids,
    pub required_relids: Relids,
    pub outer_relids: Relids,
    pub nullable_relids: Relids,
    pub left_relids: Relids,
    pub right_relids: Relids,
    pub orclause: *mut Expr,
    pub parent_ec: *mut EquivalenceClass,
    pub eval_cost: QualCost,
    pub norm_selec: Selectivity,
    pub outer_selec: Selectivity,
    pub mergeopfamilies: *mut List,
    pub left_ec: *mut EquivalenceClass,
    pub right_ec: *mut EquivalenceClass,
    pub left_em: *mut EquivalenceMember,
    pub right_em: *mut EquivalenceMember,
    pub scansel_cache: *mut List,
    pub outer_is_left: bool,
    pub hashjoinoperator: Oid,
    pub left_bucketsize: Selectivity,
    pub right_bucketsize: Selectivity,
    pub left_mcvfreq: Selectivity,
    pub right_mcvfreq: Selectivity,
}
#[test]
fn bindgen_test_layout_RestrictInfo() {
    assert_eq!(
        ::std::mem::size_of::<RestrictInfo>(),
        216usize,
        concat!("Size of: ", stringify!(RestrictInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RestrictInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RestrictInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).clause as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(clause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).is_pushed_down as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(is_pushed_down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).outerjoin_delayed as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(outerjoin_delayed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).can_join as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(can_join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).pseudoconstant as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(pseudoconstant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).leakproof as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(leakproof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).security_level as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(security_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).clause_relids as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(clause_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).required_relids as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(required_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).outer_relids as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(outer_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).nullable_relids as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(nullable_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).left_relids as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(left_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).right_relids as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(right_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).orclause as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(orclause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).parent_ec as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(parent_ec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).eval_cost as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(eval_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).norm_selec as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(norm_selec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).outer_selec as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(outer_selec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).mergeopfamilies as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(mergeopfamilies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).left_ec as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(left_ec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).right_ec as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(right_ec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).left_em as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(left_em)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).right_em as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(right_em)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).scansel_cache as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(scansel_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).outer_is_left as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(outer_is_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).hashjoinoperator as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(hashjoinoperator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).left_bucketsize as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(left_bucketsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).right_bucketsize as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(right_bucketsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).left_mcvfreq as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(left_mcvfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RestrictInfo>())).right_mcvfreq as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(RestrictInfo),
            "::",
            stringify!(right_mcvfreq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MergeScanSelCache {
    pub opfamily: Oid,
    pub collation: Oid,
    pub strategy: ::std::os::raw::c_int,
    pub nulls_first: bool,
    pub leftstartsel: Selectivity,
    pub leftendsel: Selectivity,
    pub rightstartsel: Selectivity,
    pub rightendsel: Selectivity,
}
#[test]
fn bindgen_test_layout_MergeScanSelCache() {
    assert_eq!(
        ::std::mem::size_of::<MergeScanSelCache>(),
        48usize,
        concat!("Size of: ", stringify!(MergeScanSelCache))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeScanSelCache>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeScanSelCache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeScanSelCache>())).opfamily as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeScanSelCache),
            "::",
            stringify!(opfamily)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeScanSelCache>())).collation as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeScanSelCache),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeScanSelCache>())).strategy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeScanSelCache),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeScanSelCache>())).nulls_first as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeScanSelCache),
            "::",
            stringify!(nulls_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeScanSelCache>())).leftstartsel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeScanSelCache),
            "::",
            stringify!(leftstartsel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeScanSelCache>())).leftendsel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeScanSelCache),
            "::",
            stringify!(leftendsel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeScanSelCache>())).rightstartsel as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeScanSelCache),
            "::",
            stringify!(rightstartsel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeScanSelCache>())).rightendsel as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeScanSelCache),
            "::",
            stringify!(rightendsel)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlaceHolderVar {
    pub xpr: Expr,
    pub phexpr: *mut Expr,
    pub phrels: Relids,
    pub phid: Index,
    pub phlevelsup: Index,
}
#[test]
fn bindgen_test_layout_PlaceHolderVar() {
    assert_eq!(
        ::std::mem::size_of::<PlaceHolderVar>(),
        32usize,
        concat!("Size of: ", stringify!(PlaceHolderVar))
    );
    assert_eq!(
        ::std::mem::align_of::<PlaceHolderVar>(),
        8usize,
        concat!("Alignment of ", stringify!(PlaceHolderVar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderVar>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderVar),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderVar>())).phexpr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderVar),
            "::",
            stringify!(phexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderVar>())).phrels as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderVar),
            "::",
            stringify!(phrels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderVar>())).phid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderVar),
            "::",
            stringify!(phid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderVar>())).phlevelsup as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderVar),
            "::",
            stringify!(phlevelsup)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SpecialJoinInfo {
    pub type_: NodeTag,
    pub min_lefthand: Relids,
    pub min_righthand: Relids,
    pub syn_lefthand: Relids,
    pub syn_righthand: Relids,
    pub jointype: JoinType,
    pub lhs_strict: bool,
    pub delay_upper_joins: bool,
    pub semi_can_btree: bool,
    pub semi_can_hash: bool,
    pub semi_operators: *mut List,
    pub semi_rhs_exprs: *mut List,
}
#[test]
fn bindgen_test_layout_SpecialJoinInfo() {
    assert_eq!(
        ::std::mem::size_of::<SpecialJoinInfo>(),
        64usize,
        concat!("Size of: ", stringify!(SpecialJoinInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SpecialJoinInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SpecialJoinInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).min_lefthand as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(min_lefthand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).min_righthand as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(min_righthand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).syn_lefthand as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(syn_lefthand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).syn_righthand as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(syn_righthand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).jointype as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).lhs_strict as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(lhs_strict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SpecialJoinInfo>())).delay_upper_joins as *const _ as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(delay_upper_joins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).semi_can_btree as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(semi_can_btree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).semi_can_hash as *const _ as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(semi_can_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).semi_operators as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(semi_operators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpecialJoinInfo>())).semi_rhs_exprs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SpecialJoinInfo),
            "::",
            stringify!(semi_rhs_exprs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AppendRelInfo {
    pub type_: NodeTag,
    pub parent_relid: Index,
    pub child_relid: Index,
    pub parent_reltype: Oid,
    pub child_reltype: Oid,
    pub translated_vars: *mut List,
    pub parent_reloid: Oid,
}
#[test]
fn bindgen_test_layout_AppendRelInfo() {
    assert_eq!(
        ::std::mem::size_of::<AppendRelInfo>(),
        40usize,
        concat!("Size of: ", stringify!(AppendRelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AppendRelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(AppendRelInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendRelInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendRelInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendRelInfo>())).parent_relid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendRelInfo),
            "::",
            stringify!(parent_relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendRelInfo>())).child_relid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendRelInfo),
            "::",
            stringify!(child_relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendRelInfo>())).parent_reltype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendRelInfo),
            "::",
            stringify!(parent_reltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendRelInfo>())).child_reltype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendRelInfo),
            "::",
            stringify!(child_reltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendRelInfo>())).translated_vars as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendRelInfo),
            "::",
            stringify!(translated_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendRelInfo>())).parent_reloid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendRelInfo),
            "::",
            stringify!(parent_reloid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlaceHolderInfo {
    pub type_: NodeTag,
    pub phid: Index,
    pub ph_var: *mut PlaceHolderVar,
    pub ph_eval_at: Relids,
    pub ph_lateral: Relids,
    pub ph_needed: Relids,
    pub ph_width: int32,
}
#[test]
fn bindgen_test_layout_PlaceHolderInfo() {
    assert_eq!(
        ::std::mem::size_of::<PlaceHolderInfo>(),
        48usize,
        concat!("Size of: ", stringify!(PlaceHolderInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PlaceHolderInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PlaceHolderInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderInfo>())).phid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderInfo),
            "::",
            stringify!(phid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderInfo>())).ph_var as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderInfo),
            "::",
            stringify!(ph_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderInfo>())).ph_eval_at as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderInfo),
            "::",
            stringify!(ph_eval_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderInfo>())).ph_lateral as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderInfo),
            "::",
            stringify!(ph_lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderInfo>())).ph_needed as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderInfo),
            "::",
            stringify!(ph_needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlaceHolderInfo>())).ph_width as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaceHolderInfo),
            "::",
            stringify!(ph_width)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MinMaxAggInfo {
    pub type_: NodeTag,
    pub aggfnoid: Oid,
    pub aggsortop: Oid,
    pub target: *mut Expr,
    pub subroot: *mut PlannerInfo,
    pub path: *mut Path,
    pub pathcost: Cost,
    pub param: *mut Param,
}
#[test]
fn bindgen_test_layout_MinMaxAggInfo() {
    assert_eq!(
        ::std::mem::size_of::<MinMaxAggInfo>(),
        56usize,
        concat!("Size of: ", stringify!(MinMaxAggInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<MinMaxAggInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(MinMaxAggInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggInfo>())).aggfnoid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggInfo),
            "::",
            stringify!(aggfnoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggInfo>())).aggsortop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggInfo),
            "::",
            stringify!(aggsortop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggInfo>())).target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggInfo),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggInfo>())).subroot as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggInfo),
            "::",
            stringify!(subroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggInfo>())).path as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggInfo),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggInfo>())).pathcost as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggInfo),
            "::",
            stringify!(pathcost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxAggInfo>())).param as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxAggInfo),
            "::",
            stringify!(param)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlannerParamItem {
    pub type_: NodeTag,
    pub item: *mut Node,
    pub paramId: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PlannerParamItem() {
    assert_eq!(
        ::std::mem::size_of::<PlannerParamItem>(),
        24usize,
        concat!("Size of: ", stringify!(PlannerParamItem))
    );
    assert_eq!(
        ::std::mem::align_of::<PlannerParamItem>(),
        8usize,
        concat!("Alignment of ", stringify!(PlannerParamItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerParamItem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerParamItem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerParamItem>())).item as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerParamItem),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannerParamItem>())).paramId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannerParamItem),
            "::",
            stringify!(paramId)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SemiAntiJoinFactors {
    pub outer_match_frac: Selectivity,
    pub match_count: Selectivity,
}
#[test]
fn bindgen_test_layout_SemiAntiJoinFactors() {
    assert_eq!(
        ::std::mem::size_of::<SemiAntiJoinFactors>(),
        16usize,
        concat!("Size of: ", stringify!(SemiAntiJoinFactors))
    );
    assert_eq!(
        ::std::mem::align_of::<SemiAntiJoinFactors>(),
        8usize,
        concat!("Alignment of ", stringify!(SemiAntiJoinFactors))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SemiAntiJoinFactors>())).outer_match_frac as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SemiAntiJoinFactors),
            "::",
            stringify!(outer_match_frac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SemiAntiJoinFactors>())).match_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SemiAntiJoinFactors),
            "::",
            stringify!(match_count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JoinPathExtraData {
    pub restrictlist: *mut List,
    pub mergeclause_list: *mut List,
    pub inner_unique: bool,
    pub sjinfo: *mut SpecialJoinInfo,
    pub semifactors: SemiAntiJoinFactors,
    pub param_source_rels: Relids,
}
#[test]
fn bindgen_test_layout_JoinPathExtraData() {
    assert_eq!(
        ::std::mem::size_of::<JoinPathExtraData>(),
        56usize,
        concat!("Size of: ", stringify!(JoinPathExtraData))
    );
    assert_eq!(
        ::std::mem::align_of::<JoinPathExtraData>(),
        8usize,
        concat!("Alignment of ", stringify!(JoinPathExtraData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPathExtraData>())).restrictlist as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPathExtraData),
            "::",
            stringify!(restrictlist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JoinPathExtraData>())).mergeclause_list as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPathExtraData),
            "::",
            stringify!(mergeclause_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPathExtraData>())).inner_unique as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPathExtraData),
            "::",
            stringify!(inner_unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPathExtraData>())).sjinfo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPathExtraData),
            "::",
            stringify!(sjinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinPathExtraData>())).semifactors as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPathExtraData),
            "::",
            stringify!(semifactors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JoinPathExtraData>())).param_source_rels as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinPathExtraData),
            "::",
            stringify!(param_source_rels)
        )
    );
}
pub const PartitionwiseAggregateType_PARTITIONWISE_AGGREGATE_NONE: PartitionwiseAggregateType = 0;
pub const PartitionwiseAggregateType_PARTITIONWISE_AGGREGATE_FULL: PartitionwiseAggregateType = 1;
pub const PartitionwiseAggregateType_PARTITIONWISE_AGGREGATE_PARTIAL: PartitionwiseAggregateType =
    2;
pub type PartitionwiseAggregateType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GroupPathExtraData {
    pub flags: ::std::os::raw::c_int,
    pub partial_costs_set: bool,
    pub agg_partial_costs: AggClauseCosts,
    pub agg_final_costs: AggClauseCosts,
    pub target_parallel_safe: bool,
    pub havingQual: *mut Node,
    pub targetList: *mut List,
    pub patype: PartitionwiseAggregateType,
}
#[test]
fn bindgen_test_layout_GroupPathExtraData() {
    assert_eq!(
        ::std::mem::size_of::<GroupPathExtraData>(),
        136usize,
        concat!("Size of: ", stringify!(GroupPathExtraData))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupPathExtraData>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupPathExtraData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupPathExtraData>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPathExtraData),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GroupPathExtraData>())).partial_costs_set as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPathExtraData),
            "::",
            stringify!(partial_costs_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GroupPathExtraData>())).agg_partial_costs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPathExtraData),
            "::",
            stringify!(agg_partial_costs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GroupPathExtraData>())).agg_final_costs as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPathExtraData),
            "::",
            stringify!(agg_final_costs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GroupPathExtraData>())).target_parallel_safe as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPathExtraData),
            "::",
            stringify!(target_parallel_safe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupPathExtraData>())).havingQual as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPathExtraData),
            "::",
            stringify!(havingQual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupPathExtraData>())).targetList as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPathExtraData),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupPathExtraData>())).patype as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupPathExtraData),
            "::",
            stringify!(patype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JoinCostWorkspace {
    pub startup_cost: Cost,
    pub total_cost: Cost,
    pub run_cost: Cost,
    pub inner_run_cost: Cost,
    pub inner_rescan_run_cost: Cost,
    pub outer_rows: f64,
    pub inner_rows: f64,
    pub outer_skip_rows: f64,
    pub inner_skip_rows: f64,
    pub numbuckets: ::std::os::raw::c_int,
    pub numbatches: ::std::os::raw::c_int,
    pub inner_rows_total: f64,
}
#[test]
fn bindgen_test_layout_JoinCostWorkspace() {
    assert_eq!(
        ::std::mem::size_of::<JoinCostWorkspace>(),
        88usize,
        concat!("Size of: ", stringify!(JoinCostWorkspace))
    );
    assert_eq!(
        ::std::mem::align_of::<JoinCostWorkspace>(),
        8usize,
        concat!("Alignment of ", stringify!(JoinCostWorkspace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinCostWorkspace>())).startup_cost as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(startup_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinCostWorkspace>())).total_cost as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(total_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinCostWorkspace>())).run_cost as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(run_cost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JoinCostWorkspace>())).inner_run_cost as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(inner_run_cost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JoinCostWorkspace>())).inner_rescan_run_cost as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(inner_rescan_run_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinCostWorkspace>())).outer_rows as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(outer_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinCostWorkspace>())).inner_rows as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(inner_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JoinCostWorkspace>())).outer_skip_rows as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(outer_skip_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JoinCostWorkspace>())).inner_skip_rows as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(inner_skip_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinCostWorkspace>())).numbuckets as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(numbuckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinCostWorkspace>())).numbatches as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(numbatches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<JoinCostWorkspace>())).inner_rows_total as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinCostWorkspace),
            "::",
            stringify!(inner_rows_total)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExplainState {
    _unused: [u8; 0],
}
pub type GetForeignRelSize_function = ::std::option::Option<
    unsafe extern "C" fn(root: *mut PlannerInfo, baserel: *mut RelOptInfo, foreigntableid: Oid),
>;
pub type GetForeignPaths_function = ::std::option::Option<
    unsafe extern "C" fn(root: *mut PlannerInfo, baserel: *mut RelOptInfo, foreigntableid: Oid),
>;
pub type GetForeignPlan_function = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut PlannerInfo,
        baserel: *mut RelOptInfo,
        foreigntableid: Oid,
        best_path: *mut ForeignPath,
        tlist: *mut List,
        scan_clauses: *mut List,
        outer_plan: *mut Plan,
    ) -> *mut ForeignScan,
>;
pub type BeginForeignScan_function = ::std::option::Option<
    unsafe extern "C" fn(node: *mut ForeignScanState, eflags: ::std::os::raw::c_int),
>;
pub type IterateForeignScan_function =
    ::std::option::Option<unsafe extern "C" fn(node: *mut ForeignScanState) -> *mut TupleTableSlot>;
pub type RecheckForeignScan_function = ::std::option::Option<
    unsafe extern "C" fn(node: *mut ForeignScanState, slot: *mut TupleTableSlot) -> bool,
>;
pub type ReScanForeignScan_function =
    ::std::option::Option<unsafe extern "C" fn(node: *mut ForeignScanState)>;
pub type EndForeignScan_function =
    ::std::option::Option<unsafe extern "C" fn(node: *mut ForeignScanState)>;
pub type GetForeignJoinPaths_function = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut PlannerInfo,
        joinrel: *mut RelOptInfo,
        outerrel: *mut RelOptInfo,
        innerrel: *mut RelOptInfo,
        jointype: JoinType,
        extra: *mut JoinPathExtraData,
    ),
>;
pub type GetForeignUpperPaths_function = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut PlannerInfo,
        stage: UpperRelationKind,
        input_rel: *mut RelOptInfo,
        output_rel: *mut RelOptInfo,
        extra: *mut ::std::os::raw::c_void,
    ),
>;
pub type AddForeignUpdateTargets_function = ::std::option::Option<
    unsafe extern "C" fn(
        parsetree: *mut Query,
        target_rte: *mut RangeTblEntry,
        target_relation: Relation,
    ),
>;
pub type PlanForeignModify_function = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut PlannerInfo,
        plan: *mut ModifyTable,
        resultRelation: Index,
        subplan_index: ::std::os::raw::c_int,
    ) -> *mut List,
>;
pub type BeginForeignModify_function = ::std::option::Option<
    unsafe extern "C" fn(
        mtstate: *mut ModifyTableState,
        rinfo: *mut ResultRelInfo,
        fdw_private: *mut List,
        subplan_index: ::std::os::raw::c_int,
        eflags: ::std::os::raw::c_int,
    ),
>;
pub type ExecForeignInsert_function = ::std::option::Option<
    unsafe extern "C" fn(
        estate: *mut EState,
        rinfo: *mut ResultRelInfo,
        slot: *mut TupleTableSlot,
        planSlot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot,
>;
pub type ExecForeignUpdate_function = ::std::option::Option<
    unsafe extern "C" fn(
        estate: *mut EState,
        rinfo: *mut ResultRelInfo,
        slot: *mut TupleTableSlot,
        planSlot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot,
>;
pub type ExecForeignDelete_function = ::std::option::Option<
    unsafe extern "C" fn(
        estate: *mut EState,
        rinfo: *mut ResultRelInfo,
        slot: *mut TupleTableSlot,
        planSlot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot,
>;
pub type EndForeignModify_function =
    ::std::option::Option<unsafe extern "C" fn(estate: *mut EState, rinfo: *mut ResultRelInfo)>;
pub type BeginForeignInsert_function = ::std::option::Option<
    unsafe extern "C" fn(mtstate: *mut ModifyTableState, rinfo: *mut ResultRelInfo),
>;
pub type EndForeignInsert_function =
    ::std::option::Option<unsafe extern "C" fn(estate: *mut EState, rinfo: *mut ResultRelInfo)>;
pub type IsForeignRelUpdatable_function =
    ::std::option::Option<unsafe extern "C" fn(rel: Relation) -> ::std::os::raw::c_int>;
pub type PlanDirectModify_function = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut PlannerInfo,
        plan: *mut ModifyTable,
        resultRelation: Index,
        subplan_index: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type BeginDirectModify_function = ::std::option::Option<
    unsafe extern "C" fn(node: *mut ForeignScanState, eflags: ::std::os::raw::c_int),
>;
pub type IterateDirectModify_function =
    ::std::option::Option<unsafe extern "C" fn(node: *mut ForeignScanState) -> *mut TupleTableSlot>;
pub type EndDirectModify_function =
    ::std::option::Option<unsafe extern "C" fn(node: *mut ForeignScanState)>;
pub type GetForeignRowMarkType_function = ::std::option::Option<
    unsafe extern "C" fn(rte: *mut RangeTblEntry, strength: LockClauseStrength) -> RowMarkType,
>;
pub type RefetchForeignRow_function = ::std::option::Option<
    unsafe extern "C" fn(
        estate: *mut EState,
        erm: *mut ExecRowMark,
        rowid: Datum,
        updated: *mut bool,
    ) -> HeapTuple,
>;
pub type ExplainForeignScan_function =
    ::std::option::Option<unsafe extern "C" fn(node: *mut ForeignScanState, es: *mut ExplainState)>;
pub type ExplainForeignModify_function = ::std::option::Option<
    unsafe extern "C" fn(
        mtstate: *mut ModifyTableState,
        rinfo: *mut ResultRelInfo,
        fdw_private: *mut List,
        subplan_index: ::std::os::raw::c_int,
        es: *mut ExplainState,
    ),
>;
pub type ExplainDirectModify_function =
    ::std::option::Option<unsafe extern "C" fn(node: *mut ForeignScanState, es: *mut ExplainState)>;
pub type AcquireSampleRowsFunc = ::std::option::Option<
    unsafe extern "C" fn(
        relation: Relation,
        elevel: ::std::os::raw::c_int,
        rows: *mut HeapTuple,
        targrows: ::std::os::raw::c_int,
        totalrows: *mut f64,
        totaldeadrows: *mut f64,
    ) -> ::std::os::raw::c_int,
>;
pub type AnalyzeForeignTable_function = ::std::option::Option<
    unsafe extern "C" fn(
        relation: Relation,
        func: *mut AcquireSampleRowsFunc,
        totalpages: *mut BlockNumber,
    ) -> bool,
>;
pub type ImportForeignSchema_function = ::std::option::Option<
    unsafe extern "C" fn(stmt: *mut ImportForeignSchemaStmt, serverOid: Oid) -> *mut List,
>;
pub type EstimateDSMForeignScan_function = ::std::option::Option<
    unsafe extern "C" fn(node: *mut ForeignScanState, pcxt: *mut ParallelContext) -> Size,
>;
pub type InitializeDSMForeignScan_function = ::std::option::Option<
    unsafe extern "C" fn(
        node: *mut ForeignScanState,
        pcxt: *mut ParallelContext,
        coordinate: *mut ::std::os::raw::c_void,
    ),
>;
pub type ReInitializeDSMForeignScan_function = ::std::option::Option<
    unsafe extern "C" fn(
        node: *mut ForeignScanState,
        pcxt: *mut ParallelContext,
        coordinate: *mut ::std::os::raw::c_void,
    ),
>;
pub type InitializeWorkerForeignScan_function = ::std::option::Option<
    unsafe extern "C" fn(
        node: *mut ForeignScanState,
        toc: *mut shm_toc,
        coordinate: *mut ::std::os::raw::c_void,
    ),
>;
pub type ShutdownForeignScan_function =
    ::std::option::Option<unsafe extern "C" fn(node: *mut ForeignScanState)>;
pub type IsForeignScanParallelSafe_function = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        rte: *mut RangeTblEntry,
    ) -> bool,
>;
pub type ReparameterizeForeignPathByChild_function = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut PlannerInfo,
        fdw_private: *mut List,
        child_rel: *mut RelOptInfo,
    ) -> *mut List,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FdwRoutine {
    pub type_: NodeTag,
    pub GetForeignRelSize: GetForeignRelSize_function,
    pub GetForeignPaths: GetForeignPaths_function,
    pub GetForeignPlan: GetForeignPlan_function,
    pub BeginForeignScan: BeginForeignScan_function,
    pub IterateForeignScan: IterateForeignScan_function,
    pub ReScanForeignScan: ReScanForeignScan_function,
    pub EndForeignScan: EndForeignScan_function,
    pub GetForeignJoinPaths: GetForeignJoinPaths_function,
    pub GetForeignUpperPaths: GetForeignUpperPaths_function,
    pub AddForeignUpdateTargets: AddForeignUpdateTargets_function,
    pub PlanForeignModify: PlanForeignModify_function,
    pub BeginForeignModify: BeginForeignModify_function,
    pub ExecForeignInsert: ExecForeignInsert_function,
    pub ExecForeignUpdate: ExecForeignUpdate_function,
    pub ExecForeignDelete: ExecForeignDelete_function,
    pub EndForeignModify: EndForeignModify_function,
    pub BeginForeignInsert: BeginForeignInsert_function,
    pub EndForeignInsert: EndForeignInsert_function,
    pub IsForeignRelUpdatable: IsForeignRelUpdatable_function,
    pub PlanDirectModify: PlanDirectModify_function,
    pub BeginDirectModify: BeginDirectModify_function,
    pub IterateDirectModify: IterateDirectModify_function,
    pub EndDirectModify: EndDirectModify_function,
    pub GetForeignRowMarkType: GetForeignRowMarkType_function,
    pub RefetchForeignRow: RefetchForeignRow_function,
    pub RecheckForeignScan: RecheckForeignScan_function,
    pub ExplainForeignScan: ExplainForeignScan_function,
    pub ExplainForeignModify: ExplainForeignModify_function,
    pub ExplainDirectModify: ExplainDirectModify_function,
    pub AnalyzeForeignTable: AnalyzeForeignTable_function,
    pub ImportForeignSchema: ImportForeignSchema_function,
    pub IsForeignScanParallelSafe: IsForeignScanParallelSafe_function,
    pub EstimateDSMForeignScan: EstimateDSMForeignScan_function,
    pub InitializeDSMForeignScan: InitializeDSMForeignScan_function,
    pub ReInitializeDSMForeignScan: ReInitializeDSMForeignScan_function,
    pub InitializeWorkerForeignScan: InitializeWorkerForeignScan_function,
    pub ShutdownForeignScan: ShutdownForeignScan_function,
    pub ReparameterizeForeignPathByChild: ReparameterizeForeignPathByChild_function,
}
#[test]
fn bindgen_test_layout_FdwRoutine() {
    assert_eq!(
        ::std::mem::size_of::<FdwRoutine>(),
        312usize,
        concat!("Size of: ", stringify!(FdwRoutine))
    );
    assert_eq!(
        ::std::mem::align_of::<FdwRoutine>(),
        8usize,
        concat!("Alignment of ", stringify!(FdwRoutine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).GetForeignRelSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(GetForeignRelSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).GetForeignPaths as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(GetForeignPaths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).GetForeignPlan as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(GetForeignPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).BeginForeignScan as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(BeginForeignScan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).IterateForeignScan as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(IterateForeignScan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ReScanForeignScan as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ReScanForeignScan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).EndForeignScan as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(EndForeignScan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).GetForeignJoinPaths as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(GetForeignJoinPaths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).GetForeignUpperPaths as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(GetForeignUpperPaths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).AddForeignUpdateTargets as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(AddForeignUpdateTargets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).PlanForeignModify as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(PlanForeignModify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).BeginForeignModify as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(BeginForeignModify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ExecForeignInsert as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ExecForeignInsert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ExecForeignUpdate as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ExecForeignUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ExecForeignDelete as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ExecForeignDelete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).EndForeignModify as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(EndForeignModify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).BeginForeignInsert as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(BeginForeignInsert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).EndForeignInsert as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(EndForeignInsert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).IsForeignRelUpdatable as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(IsForeignRelUpdatable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).PlanDirectModify as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(PlanDirectModify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).BeginDirectModify as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(BeginDirectModify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).IterateDirectModify as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(IterateDirectModify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).EndDirectModify as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(EndDirectModify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).GetForeignRowMarkType as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(GetForeignRowMarkType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).RefetchForeignRow as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(RefetchForeignRow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).RecheckForeignScan as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(RecheckForeignScan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ExplainForeignScan as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ExplainForeignScan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ExplainForeignModify as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ExplainForeignModify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ExplainDirectModify as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ExplainDirectModify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).AnalyzeForeignTable as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(AnalyzeForeignTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ImportForeignSchema as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ImportForeignSchema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).IsForeignScanParallelSafe as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(IsForeignScanParallelSafe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).EstimateDSMForeignScan as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(EstimateDSMForeignScan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).InitializeDSMForeignScan as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(InitializeDSMForeignScan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).ReInitializeDSMForeignScan as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ReInitializeDSMForeignScan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).InitializeWorkerForeignScan as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(InitializeWorkerForeignScan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FdwRoutine>())).ShutdownForeignScan as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ShutdownForeignScan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FdwRoutine>())).ReparameterizeForeignPathByChild as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(FdwRoutine),
            "::",
            stringify!(ReparameterizeForeignPathByChild)
        )
    );
}
extern "C" {
    pub fn GetFdwRoutine(fdwhandler: Oid) -> *mut FdwRoutine;
}
extern "C" {
    pub fn GetForeignServerIdByRelId(relid: Oid) -> Oid;
}
extern "C" {
    pub fn GetFdwRoutineByServerId(serverid: Oid) -> *mut FdwRoutine;
}
extern "C" {
    pub fn GetFdwRoutineByRelId(relid: Oid) -> *mut FdwRoutine;
}
extern "C" {
    pub fn GetFdwRoutineForRelation(relation: Relation, makecopy: bool) -> *mut FdwRoutine;
}
extern "C" {
    pub fn IsImportableForeignTable(
        tablename: *const ::std::os::raw::c_char,
        stmt: *mut ImportForeignSchemaStmt,
    ) -> bool;
}
extern "C" {
    pub fn GetExistingLocalJoinPath(joinrel: *mut RelOptInfo) -> *mut Path;
}
pub const GenericOptionFlags_ServerOpt: GenericOptionFlags = 1;
pub const GenericOptionFlags_UserMappingOpt: GenericOptionFlags = 2;
pub const GenericOptionFlags_FdwOpt: GenericOptionFlags = 4;
pub type GenericOptionFlags = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForeignDataWrapper {
    pub fdwid: Oid,
    pub owner: Oid,
    pub fdwname: *mut ::std::os::raw::c_char,
    pub fdwhandler: Oid,
    pub fdwvalidator: Oid,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_ForeignDataWrapper() {
    assert_eq!(
        ::std::mem::size_of::<ForeignDataWrapper>(),
        32usize,
        concat!("Size of: ", stringify!(ForeignDataWrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignDataWrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignDataWrapper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignDataWrapper>())).fdwid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignDataWrapper),
            "::",
            stringify!(fdwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignDataWrapper>())).owner as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignDataWrapper),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignDataWrapper>())).fdwname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignDataWrapper),
            "::",
            stringify!(fdwname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignDataWrapper>())).fdwhandler as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignDataWrapper),
            "::",
            stringify!(fdwhandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignDataWrapper>())).fdwvalidator as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignDataWrapper),
            "::",
            stringify!(fdwvalidator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignDataWrapper>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignDataWrapper),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForeignServer {
    pub serverid: Oid,
    pub fdwid: Oid,
    pub owner: Oid,
    pub servername: *mut ::std::os::raw::c_char,
    pub servertype: *mut ::std::os::raw::c_char,
    pub serverversion: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_ForeignServer() {
    assert_eq!(
        ::std::mem::size_of::<ForeignServer>(),
        48usize,
        concat!("Size of: ", stringify!(ForeignServer))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignServer>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignServer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignServer>())).serverid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignServer),
            "::",
            stringify!(serverid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignServer>())).fdwid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignServer),
            "::",
            stringify!(fdwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignServer>())).owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignServer),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignServer>())).servername as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignServer),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignServer>())).servertype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignServer),
            "::",
            stringify!(servertype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignServer>())).serverversion as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignServer),
            "::",
            stringify!(serverversion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignServer>())).options as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignServer),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UserMapping {
    pub umid: Oid,
    pub userid: Oid,
    pub serverid: Oid,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_UserMapping() {
    assert_eq!(
        ::std::mem::size_of::<UserMapping>(),
        24usize,
        concat!("Size of: ", stringify!(UserMapping))
    );
    assert_eq!(
        ::std::mem::align_of::<UserMapping>(),
        8usize,
        concat!("Alignment of ", stringify!(UserMapping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UserMapping>())).umid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UserMapping),
            "::",
            stringify!(umid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UserMapping>())).userid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UserMapping),
            "::",
            stringify!(userid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UserMapping>())).serverid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UserMapping),
            "::",
            stringify!(serverid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UserMapping>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UserMapping),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForeignTable {
    pub relid: Oid,
    pub serverid: Oid,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_ForeignTable() {
    assert_eq!(
        ::std::mem::size_of::<ForeignTable>(),
        16usize,
        concat!("Size of: ", stringify!(ForeignTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignTable>())).relid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignTable),
            "::",
            stringify!(relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignTable>())).serverid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignTable),
            "::",
            stringify!(serverid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignTable>())).options as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignTable),
            "::",
            stringify!(options)
        )
    );
}
extern "C" {
    pub fn GetForeignServer(serverid: Oid) -> *mut ForeignServer;
}
extern "C" {
    pub fn GetForeignServerByName(
        name: *const ::std::os::raw::c_char,
        missing_ok: bool,
    ) -> *mut ForeignServer;
}
extern "C" {
    pub fn GetUserMapping(userid: Oid, serverid: Oid) -> *mut UserMapping;
}
extern "C" {
    pub fn GetForeignDataWrapper(fdwid: Oid) -> *mut ForeignDataWrapper;
}
extern "C" {
    pub fn GetForeignDataWrapperByName(
        name: *const ::std::os::raw::c_char,
        missing_ok: bool,
    ) -> *mut ForeignDataWrapper;
}
extern "C" {
    pub fn GetForeignTable(relid: Oid) -> *mut ForeignTable;
}
extern "C" {
    pub fn GetForeignColumnOptions(relid: Oid, attnum: AttrNumber) -> *mut List;
}
extern "C" {
    pub fn get_foreign_data_wrapper_oid(
        fdwname: *const ::std::os::raw::c_char,
        missing_ok: bool,
    ) -> Oid;
}
extern "C" {
    pub fn get_foreign_server_oid(
        servername: *const ::std::os::raw::c_char,
        missing_ok: bool,
    ) -> Oid;
}
extern "C" {
    pub fn compare_path_costs(
        path1: *mut Path,
        path2: *mut Path,
        criterion: CostSelector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compare_fractional_path_costs(
        path1: *mut Path,
        path2: *mut Path,
        fraction: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_cheapest(parent_rel: *mut RelOptInfo);
}
extern "C" {
    pub fn add_path(parent_rel: *mut RelOptInfo, new_path: *mut Path);
}
extern "C" {
    pub fn add_path_precheck(
        parent_rel: *mut RelOptInfo,
        startup_cost: Cost,
        total_cost: Cost,
        pathkeys: *mut List,
        required_outer: Relids,
    ) -> bool;
}
extern "C" {
    pub fn add_partial_path(parent_rel: *mut RelOptInfo, new_path: *mut Path);
}
extern "C" {
    pub fn add_partial_path_precheck(
        parent_rel: *mut RelOptInfo,
        total_cost: Cost,
        pathkeys: *mut List,
    ) -> bool;
}
extern "C" {
    pub fn create_seqscan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        required_outer: Relids,
        parallel_workers: ::std::os::raw::c_int,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_samplescan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        required_outer: Relids,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_index_path(
        root: *mut PlannerInfo,
        index: *mut IndexOptInfo,
        indexclauses: *mut List,
        indexclausecols: *mut List,
        indexorderbys: *mut List,
        indexorderbycols: *mut List,
        pathkeys: *mut List,
        indexscandir: ScanDirection,
        indexonly: bool,
        required_outer: Relids,
        loop_count: f64,
        partial_path: bool,
    ) -> *mut IndexPath;
}
extern "C" {
    pub fn create_bitmap_heap_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        bitmapqual: *mut Path,
        required_outer: Relids,
        loop_count: f64,
        parallel_degree: ::std::os::raw::c_int,
    ) -> *mut BitmapHeapPath;
}
extern "C" {
    pub fn create_bitmap_and_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        bitmapquals: *mut List,
    ) -> *mut BitmapAndPath;
}
extern "C" {
    pub fn create_bitmap_or_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        bitmapquals: *mut List,
    ) -> *mut BitmapOrPath;
}
extern "C" {
    pub fn create_tidscan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        tidquals: *mut List,
        required_outer: Relids,
    ) -> *mut TidPath;
}
extern "C" {
    pub fn create_append_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpaths: *mut List,
        partial_subpaths: *mut List,
        required_outer: Relids,
        parallel_workers: ::std::os::raw::c_int,
        parallel_aware: bool,
        partitioned_rels: *mut List,
        rows: f64,
    ) -> *mut AppendPath;
}
extern "C" {
    pub fn create_merge_append_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpaths: *mut List,
        pathkeys: *mut List,
        required_outer: Relids,
        partitioned_rels: *mut List,
    ) -> *mut MergeAppendPath;
}
extern "C" {
    pub fn create_result_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        target: *mut PathTarget,
        resconstantqual: *mut List,
    ) -> *mut ResultPath;
}
extern "C" {
    pub fn create_material_path(rel: *mut RelOptInfo, subpath: *mut Path) -> *mut MaterialPath;
}
extern "C" {
    pub fn create_unique_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        sjinfo: *mut SpecialJoinInfo,
    ) -> *mut UniquePath;
}
extern "C" {
    pub fn create_gather_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        target: *mut PathTarget,
        required_outer: Relids,
        rows: *mut f64,
    ) -> *mut GatherPath;
}
extern "C" {
    pub fn create_gather_merge_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        target: *mut PathTarget,
        pathkeys: *mut List,
        required_outer: Relids,
        rows: *mut f64,
    ) -> *mut GatherMergePath;
}
extern "C" {
    pub fn create_subqueryscan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        pathkeys: *mut List,
        required_outer: Relids,
    ) -> *mut SubqueryScanPath;
}
extern "C" {
    pub fn create_functionscan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        pathkeys: *mut List,
        required_outer: Relids,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_tablexprscan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        pathkeys: *mut List,
        required_outer: Relids,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_valuesscan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        required_outer: Relids,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_tablefuncscan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        required_outer: Relids,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_ctescan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        required_outer: Relids,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_namedtuplestorescan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        required_outer: Relids,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_worktablescan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        required_outer: Relids,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_foreignscan_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        target: *mut PathTarget,
        rows: f64,
        startup_cost: Cost,
        total_cost: Cost,
        pathkeys: *mut List,
        required_outer: Relids,
        fdw_outerpath: *mut Path,
        fdw_private: *mut List,
    ) -> *mut ForeignPath;
}
extern "C" {
    pub fn calc_nestloop_required_outer(
        outerrelids: Relids,
        outer_paramrels: Relids,
        innerrelids: Relids,
        inner_paramrels: Relids,
    ) -> Relids;
}
extern "C" {
    pub fn calc_non_nestloop_required_outer(outer_path: *mut Path, inner_path: *mut Path)
        -> Relids;
}
extern "C" {
    pub fn create_nestloop_path(
        root: *mut PlannerInfo,
        joinrel: *mut RelOptInfo,
        jointype: JoinType,
        workspace: *mut JoinCostWorkspace,
        extra: *mut JoinPathExtraData,
        outer_path: *mut Path,
        inner_path: *mut Path,
        restrict_clauses: *mut List,
        pathkeys: *mut List,
        required_outer: Relids,
    ) -> *mut NestPath;
}
extern "C" {
    pub fn create_mergejoin_path(
        root: *mut PlannerInfo,
        joinrel: *mut RelOptInfo,
        jointype: JoinType,
        workspace: *mut JoinCostWorkspace,
        extra: *mut JoinPathExtraData,
        outer_path: *mut Path,
        inner_path: *mut Path,
        restrict_clauses: *mut List,
        pathkeys: *mut List,
        required_outer: Relids,
        mergeclauses: *mut List,
        outersortkeys: *mut List,
        innersortkeys: *mut List,
    ) -> *mut MergePath;
}
extern "C" {
    pub fn create_hashjoin_path(
        root: *mut PlannerInfo,
        joinrel: *mut RelOptInfo,
        jointype: JoinType,
        workspace: *mut JoinCostWorkspace,
        extra: *mut JoinPathExtraData,
        outer_path: *mut Path,
        inner_path: *mut Path,
        parallel_hash: bool,
        restrict_clauses: *mut List,
        required_outer: Relids,
        hashclauses: *mut List,
    ) -> *mut HashPath;
}
extern "C" {
    pub fn create_projection_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        target: *mut PathTarget,
    ) -> *mut ProjectionPath;
}
extern "C" {
    pub fn apply_projection_to_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        path: *mut Path,
        target: *mut PathTarget,
    ) -> *mut Path;
}
extern "C" {
    pub fn create_set_projection_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        target: *mut PathTarget,
    ) -> *mut ProjectSetPath;
}
extern "C" {
    pub fn create_sort_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        pathkeys: *mut List,
        limit_tuples: f64,
    ) -> *mut SortPath;
}
extern "C" {
    pub fn create_group_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        groupClause: *mut List,
        qual: *mut List,
        numGroups: f64,
    ) -> *mut GroupPath;
}
extern "C" {
    pub fn create_upper_unique_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        numCols: ::std::os::raw::c_int,
        numGroups: f64,
    ) -> *mut UpperUniquePath;
}
extern "C" {
    pub fn create_agg_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        target: *mut PathTarget,
        aggstrategy: AggStrategy,
        aggsplit: AggSplit,
        groupClause: *mut List,
        qual: *mut List,
        aggcosts: *const AggClauseCosts,
        numGroups: f64,
    ) -> *mut AggPath;
}
extern "C" {
    pub fn create_groupingsets_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        having_qual: *mut List,
        aggstrategy: AggStrategy,
        rollups: *mut List,
        agg_costs: *const AggClauseCosts,
        numGroups: f64,
    ) -> *mut GroupingSetsPath;
}
extern "C" {
    pub fn create_minmaxagg_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        target: *mut PathTarget,
        mmaggregates: *mut List,
        quals: *mut List,
    ) -> *mut MinMaxAggPath;
}
extern "C" {
    pub fn create_windowagg_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        target: *mut PathTarget,
        windowFuncs: *mut List,
        winclause: *mut WindowClause,
    ) -> *mut WindowAggPath;
}
extern "C" {
    pub fn create_setop_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        cmd: SetOpCmd,
        strategy: SetOpStrategy,
        distinctList: *mut List,
        flagColIdx: AttrNumber,
        firstFlag: ::std::os::raw::c_int,
        numGroups: f64,
        outputRows: f64,
    ) -> *mut SetOpPath;
}
extern "C" {
    pub fn create_recursiveunion_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        leftpath: *mut Path,
        rightpath: *mut Path,
        target: *mut PathTarget,
        distinctList: *mut List,
        wtParam: ::std::os::raw::c_int,
        numGroups: f64,
    ) -> *mut RecursiveUnionPath;
}
extern "C" {
    pub fn create_lockrows_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        rowMarks: *mut List,
        epqParam: ::std::os::raw::c_int,
    ) -> *mut LockRowsPath;
}
extern "C" {
    pub fn create_modifytable_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        operation: CmdType,
        canSetTag: bool,
        nominalRelation: Index,
        partitioned_rels: *mut List,
        partColsUpdated: bool,
        resultRelations: *mut List,
        subpaths: *mut List,
        subroots: *mut List,
        withCheckOptionLists: *mut List,
        returningLists: *mut List,
        rowMarks: *mut List,
        onconflict: *mut OnConflictExpr,
        epqParam: ::std::os::raw::c_int,
    ) -> *mut ModifyTablePath;
}
extern "C" {
    pub fn create_limit_path(
        root: *mut PlannerInfo,
        rel: *mut RelOptInfo,
        subpath: *mut Path,
        limitOffset: *mut Node,
        limitCount: *mut Node,
        offset_est: int64,
        count_est: int64,
    ) -> *mut LimitPath;
}
extern "C" {
    pub fn reparameterize_path(
        root: *mut PlannerInfo,
        path: *mut Path,
        required_outer: Relids,
        loop_count: f64,
    ) -> *mut Path;
}
extern "C" {
    pub fn reparameterize_path_by_child(
        root: *mut PlannerInfo,
        path: *mut Path,
        child_rel: *mut RelOptInfo,
    ) -> *mut Path;
}
extern "C" {
    pub fn setup_simple_rel_arrays(root: *mut PlannerInfo);
}
extern "C" {
    pub fn setup_append_rel_array(root: *mut PlannerInfo);
}
extern "C" {
    pub fn build_simple_rel(
        root: *mut PlannerInfo,
        relid: ::std::os::raw::c_int,
        parent: *mut RelOptInfo,
    ) -> *mut RelOptInfo;
}
extern "C" {
    pub fn find_base_rel(root: *mut PlannerInfo, relid: ::std::os::raw::c_int) -> *mut RelOptInfo;
}
extern "C" {
    pub fn find_join_rel(root: *mut PlannerInfo, relids: Relids) -> *mut RelOptInfo;
}
extern "C" {
    pub fn build_join_rel(
        root: *mut PlannerInfo,
        joinrelids: Relids,
        outer_rel: *mut RelOptInfo,
        inner_rel: *mut RelOptInfo,
        sjinfo: *mut SpecialJoinInfo,
        restrictlist_ptr: *mut *mut List,
    ) -> *mut RelOptInfo;
}
extern "C" {
    pub fn min_join_parameterization(
        root: *mut PlannerInfo,
        joinrelids: Relids,
        outer_rel: *mut RelOptInfo,
        inner_rel: *mut RelOptInfo,
    ) -> Relids;
}
extern "C" {
    pub fn build_empty_join_rel(root: *mut PlannerInfo) -> *mut RelOptInfo;
}
extern "C" {
    pub fn fetch_upper_rel(
        root: *mut PlannerInfo,
        kind: UpperRelationKind,
        relids: Relids,
    ) -> *mut RelOptInfo;
}
extern "C" {
    pub fn find_childrel_parents(root: *mut PlannerInfo, rel: *mut RelOptInfo) -> Relids;
}
extern "C" {
    pub fn get_baserel_parampathinfo(
        root: *mut PlannerInfo,
        baserel: *mut RelOptInfo,
        required_outer: Relids,
    ) -> *mut ParamPathInfo;
}
extern "C" {
    pub fn get_joinrel_parampathinfo(
        root: *mut PlannerInfo,
        joinrel: *mut RelOptInfo,
        outer_path: *mut Path,
        inner_path: *mut Path,
        sjinfo: *mut SpecialJoinInfo,
        required_outer: Relids,
        restrict_clauses: *mut *mut List,
    ) -> *mut ParamPathInfo;
}
extern "C" {
    pub fn get_appendrel_parampathinfo(
        appendrel: *mut RelOptInfo,
        required_outer: Relids,
    ) -> *mut ParamPathInfo;
}
extern "C" {
    pub fn find_param_path_info(rel: *mut RelOptInfo, required_outer: Relids)
        -> *mut ParamPathInfo;
}
extern "C" {
    pub fn build_child_join_rel(
        root: *mut PlannerInfo,
        outer_rel: *mut RelOptInfo,
        inner_rel: *mut RelOptInfo,
        parent_joinrel: *mut RelOptInfo,
        restrictlist: *mut List,
        sjinfo: *mut SpecialJoinInfo,
        jointype: JoinType,
    ) -> *mut RelOptInfo;
}
pub const ForceParallelMode_FORCE_PARALLEL_OFF: ForceParallelMode = 0;
pub const ForceParallelMode_FORCE_PARALLEL_ON: ForceParallelMode = 1;
pub const ForceParallelMode_FORCE_PARALLEL_REGRESS: ForceParallelMode = 2;
pub type ForceParallelMode = u32;
extern "C" {
    #[link_name = "\u{1}cursor_tuple_fraction"]
    pub static mut cursor_tuple_fraction: f64;
}
extern "C" {
    #[link_name = "\u{1}force_parallel_mode"]
    pub static mut force_parallel_mode: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}parallel_leader_participation"]
    pub static mut parallel_leader_participation: bool;
}
pub type query_pathkeys_callback = ::std::option::Option<
    unsafe extern "C" fn(root: *mut PlannerInfo, extra: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn query_planner(
        root: *mut PlannerInfo,
        tlist: *mut List,
        qp_callback: query_pathkeys_callback,
        qp_extra: *mut ::std::os::raw::c_void,
    ) -> *mut RelOptInfo;
}
extern "C" {
    pub fn preprocess_minmax_aggregates(root: *mut PlannerInfo, tlist: *mut List);
}
extern "C" {
    pub fn create_plan(root: *mut PlannerInfo, best_path: *mut Path) -> *mut Plan;
}
extern "C" {
    pub fn make_foreignscan(
        qptlist: *mut List,
        qpqual: *mut List,
        scanrelid: Index,
        fdw_exprs: *mut List,
        fdw_private: *mut List,
        fdw_scan_tlist: *mut List,
        fdw_recheck_quals: *mut List,
        outer_plan: *mut Plan,
    ) -> *mut ForeignScan;
}
extern "C" {
    pub fn change_plan_targetlist(
        subplan: *mut Plan,
        tlist: *mut List,
        tlist_parallel_safe: bool,
    ) -> *mut Plan;
}
extern "C" {
    pub fn materialize_finished_plan(subplan: *mut Plan) -> *mut Plan;
}
extern "C" {
    pub fn is_projection_capable_path(path: *mut Path) -> bool;
}
extern "C" {
    pub fn is_projection_capable_plan(plan: *mut Plan) -> bool;
}
extern "C" {
    pub fn make_sort_from_sortclauses(sortcls: *mut List, lefttree: *mut Plan) -> *mut Sort;
}
extern "C" {
    pub fn make_agg(
        tlist: *mut List,
        qual: *mut List,
        aggstrategy: AggStrategy,
        aggsplit: AggSplit,
        numGroupCols: ::std::os::raw::c_int,
        grpColIdx: *mut AttrNumber,
        grpOperators: *mut Oid,
        groupingSets: *mut List,
        chain: *mut List,
        dNumGroups: f64,
        lefttree: *mut Plan,
    ) -> *mut Agg;
}
extern "C" {
    pub fn make_limit(
        lefttree: *mut Plan,
        limitOffset: *mut Node,
        limitCount: *mut Node,
    ) -> *mut Limit;
}
extern "C" {
    #[link_name = "\u{1}from_collapse_limit"]
    pub static mut from_collapse_limit: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}join_collapse_limit"]
    pub static mut join_collapse_limit: ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_base_rels_to_query(root: *mut PlannerInfo, jtnode: *mut Node);
}
extern "C" {
    pub fn build_base_rel_tlists(root: *mut PlannerInfo, final_tlist: *mut List);
}
extern "C" {
    pub fn add_vars_to_targetlist(
        root: *mut PlannerInfo,
        vars: *mut List,
        where_needed: Relids,
        create_new_ph: bool,
    );
}
extern "C" {
    pub fn find_lateral_references(root: *mut PlannerInfo);
}
extern "C" {
    pub fn create_lateral_join_info(root: *mut PlannerInfo);
}
extern "C" {
    pub fn deconstruct_jointree(root: *mut PlannerInfo) -> *mut List;
}
extern "C" {
    pub fn distribute_restrictinfo_to_rels(root: *mut PlannerInfo, restrictinfo: *mut RestrictInfo);
}
extern "C" {
    pub fn process_implied_equality(
        root: *mut PlannerInfo,
        opno: Oid,
        collation: Oid,
        item1: *mut Expr,
        item2: *mut Expr,
        qualscope: Relids,
        nullable_relids: Relids,
        security_level: Index,
        below_outer_join: bool,
        both_const: bool,
    );
}
extern "C" {
    pub fn build_implied_join_equality(
        opno: Oid,
        collation: Oid,
        item1: *mut Expr,
        item2: *mut Expr,
        qualscope: Relids,
        nullable_relids: Relids,
        security_level: Index,
    ) -> *mut RestrictInfo;
}
extern "C" {
    pub fn match_foreign_keys_to_quals(root: *mut PlannerInfo);
}
extern "C" {
    pub fn remove_useless_joins(root: *mut PlannerInfo, joinlist: *mut List) -> *mut List;
}
extern "C" {
    pub fn reduce_unique_semijoins(root: *mut PlannerInfo);
}
extern "C" {
    pub fn query_supports_distinctness(query: *mut Query) -> bool;
}
extern "C" {
    pub fn query_is_distinct_for(query: *mut Query, colnos: *mut List, opids: *mut List) -> bool;
}
extern "C" {
    pub fn innerrel_is_unique(
        root: *mut PlannerInfo,
        joinrelids: Relids,
        outerrelids: Relids,
        innerrel: *mut RelOptInfo,
        jointype: JoinType,
        restrictlist: *mut List,
        force_cache: bool,
    ) -> bool;
}
extern "C" {
    pub fn set_plan_references(root: *mut PlannerInfo, plan: *mut Plan) -> *mut Plan;
}
extern "C" {
    pub fn record_plan_function_dependency(root: *mut PlannerInfo, funcid: Oid);
}
extern "C" {
    pub fn extract_query_dependencies(
        query: *mut Node,
        relationOids: *mut *mut List,
        invalItems: *mut *mut List,
        hasRowSecurity: *mut bool,
    );
}
extern "C" {
    pub fn make_restrictinfo(
        clause: *mut Expr,
        is_pushed_down: bool,
        outerjoin_delayed: bool,
        pseudoconstant: bool,
        security_level: Index,
        required_relids: Relids,
        outer_relids: Relids,
        nullable_relids: Relids,
    ) -> *mut RestrictInfo;
}
extern "C" {
    pub fn restriction_is_or_clause(restrictinfo: *mut RestrictInfo) -> bool;
}
extern "C" {
    pub fn restriction_is_securely_promotable(
        restrictinfo: *mut RestrictInfo,
        rel: *mut RelOptInfo,
    ) -> bool;
}
extern "C" {
    pub fn get_actual_clauses(restrictinfo_list: *mut List) -> *mut List;
}
extern "C" {
    pub fn extract_actual_clauses(restrictinfo_list: *mut List, pseudoconstant: bool) -> *mut List;
}
extern "C" {
    pub fn extract_actual_join_clauses(
        restrictinfo_list: *mut List,
        joinrelids: Relids,
        joinquals: *mut *mut List,
        otherquals: *mut *mut List,
    );
}
extern "C" {
    pub fn join_clause_is_movable_to(rinfo: *mut RestrictInfo, baserel: *mut RelOptInfo) -> bool;
}
extern "C" {
    pub fn join_clause_is_movable_into(
        rinfo: *mut RestrictInfo,
        currentrelids: Relids,
        current_and_outer: Relids,
    ) -> bool;
}
extern "C" {
    pub fn byteaout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn charout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namein(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nameout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2vectorin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2vectorout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regprocin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regprocout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xidin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xidout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boollt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolgt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn booleq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn chareq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nameeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn texteq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xideq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cideq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn charne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn charle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn chargt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn charge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn chartoi4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i4tochar(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nameregexeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ddl_command_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ddl_command_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ddl_command_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pgsql_version(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ddl_command_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn eqsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn neqsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn scalarltsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn scalargtsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn eqjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn neqjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn scalarltjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn scalargtjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn unknownin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn unknownout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_fac(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_above_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_below_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_overlap(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_above(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_left(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_right(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_below(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn on_pb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn on_ppath(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_center(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn areasel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn areajoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2mod(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4mod(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int24mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int42mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oideq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_same(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_contain(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_left(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_overleft(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_overright(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_right(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_contained(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_contain_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_node_tree_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_node_tree_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_node_tree_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_node_tree_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4um(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4abs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4um(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2um(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8um(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8abs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_center(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_center(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_center(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dround(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dtrunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dsqrt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dcbrt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dpow(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dexp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dlog1(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i2tod(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i2tof(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dtoi2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ftoi2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimein(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimeout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimein(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimeout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timepl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timemi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn intinterval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalrel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timenow(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimeeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimene(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimelt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimegt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimele(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimege(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimeeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimene(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimelt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimegt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimele(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimege(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalsame(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalct(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalov(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalleneq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervallenne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervallenlt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervallengt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervallenle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervallenge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalstart(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timeofday(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstime_finite(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_combine(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inter_sl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inter_lb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float48ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float84ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ftod(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dtof(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i2toi4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i4toi2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_jit_available(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i4tod(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dtoi4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i4tof(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ftoi4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn width_bucket_float8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn index_am_handler_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn index_am_handler_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashmacaddr8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hash_aclitem(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bthandler(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashhandler(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gisthandler(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ginhandler(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spghandler(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brinhandler(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn scalarlesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn scalargesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn amvalidate(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_same(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_contain(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_left(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_overleft(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_overright(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_right(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_contained(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_overlap(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint2cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint4cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btfloat4cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btfloat8cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btoidcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btabstimecmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btcharcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btnamecmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bttextcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_interpt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_ps(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_pb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_sb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn close_ps(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn close_pb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn close_sb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn on_ps(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_ppath(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn on_sb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inter_sb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_to_array_null(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_append(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_prepend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btreltimecmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bttintervalcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btarraycmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_cat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_to_text_null(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn scalarlejoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_to_array(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_to_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn scalargejoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashmacaddr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashtext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn rtrim1(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btoidvectorcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn name_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn name_bpchar(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashinet(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashint4extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hash_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_num_nulls(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_num_nonnulls(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashint2extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashint8extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashfloat4extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashfloat8extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashoidextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashcharextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashnameextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashtextextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashint2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashint4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashfloat4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashfloat8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashoid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashchar(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashname(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashvarlena(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashoidvector(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8um(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i8tod(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dtoi8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_abbrev(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidr_abbrev(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_set_masklen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hash_array(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidr_set_masklen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_indexam_has_property(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_index_has_property(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_index_column_has_property(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i8tof(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ftoi8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namelt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namele(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namegt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namege(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namene(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varchar(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn mktinterval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorlt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectoreq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorgt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_network(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_netmask(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_masklen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_broadcast(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_host(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn current_user(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_family(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_create(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidlt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteaoctetlen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteaGetByte(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteaSetByte(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteaGetBit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteaSetBit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_lb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_sl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_cpoly(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_show(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn session_user(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_dims(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_ndims(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteaoverlay(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteaoverlay_no_len(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_trunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn smgrin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn smgrout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn smgreq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn smgrne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_import(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_export(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4inc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_import_with_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashvarlenaextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashoidvectorextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hash_aclitem_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashmacaddrextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashinetextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hash_numeric_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashmacaddr8extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hash_array_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervaleq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervallt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalgt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_client_encoding(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn current_query(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint8cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_mul_flt4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_div_flt4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn flt4_mul_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textpos(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textlike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textnlike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namelike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namenlike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn char_bpchar(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn current_database(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_mul_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2_mul_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_mul_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_div_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_mul_int2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_div_int2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lower(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn upper(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn initcap(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lpad(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn rpad(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ltrim(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn rtrim(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_substr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn translate(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ltrim1(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_substr_no_len(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btrim(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btrim1(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_mul_flt8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_div_flt8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cashlarger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cashsmaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn flt8_mul_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_sub(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_subeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_sup(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_supeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_words(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_series_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_series_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8mod(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn char_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashint8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_open(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_close(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_loread(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lowrite(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_lseek(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_creat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_tell(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn on_pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn on_sl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn close_pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn close_sl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn close_lb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_unlink(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashbpcharextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_inter(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_area(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_width(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_height(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_area(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_intersect(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_diagonal(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_n_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_n_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_n_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_n_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_n_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_length(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_vert(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_horiz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_slope(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_construct(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_intersect(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_parallel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_perp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_vertical(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_horizontal(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_truncate(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_izone(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_point_compress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn aclitemin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn aclitemout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn aclinsert(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn aclremove(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn aclcontains(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn getdatabaseencoding(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varcharin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varcharout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchareq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharlt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchargt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn aclitem_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_prepared_xact(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_series_step_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_series_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_series_step_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_series_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_regclass(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashbpchar(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn format_type(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_pli(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_mii(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_add_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_sub_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_mul_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_div_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_zone(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_um(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_part(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_part(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstime_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_justify_hours(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltime_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstime_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_abstime(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xid_age(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_pl_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_mi_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_subscripts(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_subscripts_nodir(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_fill(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_reltime(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_age(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_scale(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_trunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_trunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8inc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8abs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn texticregexeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn texticregexne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nameicregexeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nameicregexne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteain(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn charin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn charlt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn unique_key_recheck(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4abs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nameregexne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2abs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textregexeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textregexne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textlen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textcat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn PG_char_to_encoding(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidr_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn parse_ident(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_column_size(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn overlaps_timetz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn datetime_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_part(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int84div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48pl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int48div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn quote_ident(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn quote_literal(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_fill_with_lower_bounds(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn i8tooid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidtoi8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn quote_nullable(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn suppress_redundant_updates_trigger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tideq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn currtid_byreloid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn currtid_byrelname(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_justify_days(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn datetimetz_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn now(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn positionsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn positionjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn contsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn contjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn overlaps_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn overlaps_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharlen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dlog10(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectortypes(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_hostmask(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn makeaclitem(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lock_status(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_finite(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textoctetlen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharoctetlen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_part(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_constraintdef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_timetz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_finite(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_finite(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_start(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_client_addr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_client_port(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn current_schema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn current_schemas(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textoverlay(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textoverlay_no_len(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_parallel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_perp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_vertical(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_horizontal(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_center(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn points_box(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_add(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_sub(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidr_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_contain_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pt_contained_poly(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_isclosed(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_isopen(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_npoints(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_close(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_open(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_add(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_add_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_sub_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_mul_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_div_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn construct_point(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_add(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_sub(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_npoints(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_box(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_path(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_poly(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_poly(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_same(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_contain(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_left(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_overleft(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_overright(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_right(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_contained(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_overlap(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_below(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_above(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_area(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_diameter(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_radius(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cr_circle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_circle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_poly(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_pc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_contain_pt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pt_contained_circle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_circle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_box(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_length(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn close_ls(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn close_lseg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_construct_pp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_interpt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_intersect(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bit_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bit_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_ruledef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nextval_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn currval_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn setval_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varbit_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varbit_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn biteq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitgt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitlt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn PG_encoding_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn drandom(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn setseed(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dasin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dacos(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn datan(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn datan2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dsin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dcos(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dtan(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dcot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn degrees(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn radians(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dpi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_typeof(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ascii(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn chr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn repeat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn similar_escape(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn mul_d_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn texticlike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn texticnlike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nameiclike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nameicnlike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn like_escape(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidgt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_viewdef_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_viewdef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_userbyid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_indexdef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_check_ins(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_check_upd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_cascade_del(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_cascade_upd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_restrict_del(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_restrict_upd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_setnull_del(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_setnull_upd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_setdefault_del(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_setdefault_upd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_noaction_del(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn RI_FKey_noaction_upd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_triggerdef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_serial_sequence(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bit_and(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bit_or(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitxor(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitnot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitshiftleft(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitshiftright(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitcat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitsubstr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitlength(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitoctetlength(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitfromint4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bittoint4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_keywords(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varbit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_hash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn aclexplode(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_mi_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btboolcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_hash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_hash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitposition(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitsubstr_no_len(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_abs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_sign(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_round(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_trunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_ceil(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_floor(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn length_in_encoding(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_convert_from(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_to_cidr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_expr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_convert_to(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_add(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_sub(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_mul(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_div(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_mod(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_sqrt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_exp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_ln(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_log(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_power(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_float4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_float8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_pl_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_mi_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_pl_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_mi_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_inc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn setval3_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_uminus(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_to_number(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_int2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_convert(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn iclikesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn icnlikesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn iclikejoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn icnlikejoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexeqsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn likesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn icregexeqsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexnesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nlikesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn icregexnesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexeqjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn likejoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn icregexeqjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexnejoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn nlikejoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn icregexnejoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_avg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_var_samp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_stddev_samp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_avg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_var_samp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_stddev_samp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2_sum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_sum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_sum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_avg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_ascii_default(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_ascii_enc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_ascii_encname(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int28ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int82ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2and(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2or(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2xor(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2not(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2shl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2shr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4and(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4or(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4xor(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4not(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4shl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4shr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8and(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8or(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8xor(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8not(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8shl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8shr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8up(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2up(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4up(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4up(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8up(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_uplus(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_table_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_table_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_table_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_table_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_table_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_table_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_numscans(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_tuples_returned(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_tuples_fetched(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_tuples_inserted(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_tuples_updated(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_tuples_deleted(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_blocks_fetched(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_blocks_hit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_idset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_pid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_dbid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_userid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_activity(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_numbackends(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_xact_commit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_xact_rollback(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_blocks_fetched(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_blocks_hit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_encode(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_decode(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteaeq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bytealt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteale(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteagt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteage(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteane(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteacmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_scale(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2_avg_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_avg_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_avg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidlarger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidsmaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_scale(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_scale(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_scale(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_tuples_hot_updated(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_div_trunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bytealike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteanlike(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn like_escape_bytea(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteacat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bytea_substr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bytea_substr_no_len(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteapos(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteatrim(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_trunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_part(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_activity(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstime_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_backend_pid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_abstime(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_pl_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_mi_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_conf_load_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_zone(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_izone(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_hash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_timetz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_to_char(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn aggregate_dummy(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_age(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_zone(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_izone(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_pl_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_mi_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textregexsubstr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitfromint8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bittoint8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn show_config_by_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn set_config_by_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_table_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_type_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_function_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_operator_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_opclass_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn show_all_settings(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn replace_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn split_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_hex32(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_hex64(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_lower(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_upper(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_conversion_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_activity_start(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_terminate_backend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_functiondef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_pattern_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_pattern_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_function_arguments(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_pattern_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_pattern_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_function_result(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bttext_pattern_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_database_size_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn width_bucket_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_cancel_backend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_start_backup(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stop_backup(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar_pattern_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar_pattern_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_length(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar_pattern_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar_pattern_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_point_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btbpchar_pattern_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_sequence_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_sequence_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_sequence_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_sequence_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_sequence_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_sequence_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint48cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint84cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint24cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint42cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint28cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint82cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btfloat48cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btfloat84cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_client_addr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_client_port(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_server_addr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_server_port(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regprocedurein(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regprocedureout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regoperin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regoperout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regoperatorin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regoperatorout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regclassin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regclassout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regtypein(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regtypeout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_clear_snapshot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_function_identity_arguments(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn fmgr_internal_validator(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn fmgr_c_validator(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn fmgr_sql_validator(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_database_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_database_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_database_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_database_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_database_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_database_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_function_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_function_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_function_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_function_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_function_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_function_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_language_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_language_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_language_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_language_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_language_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_language_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_schema_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_schema_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_schema_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_schema_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_schema_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_schema_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_reset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textregexreplace_noopt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textregexreplace(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_total_relation_size(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_size_pretty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_options_to_table(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cstring_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cstring_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn any_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn any_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyarray_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyarray_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn void_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn void_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn trigger_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn trigger_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn language_handler_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn language_handler_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn internal_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn internal_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn opaque_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn opaque_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dceil(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dfloor(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dsign(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn md5_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyelement_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyelement_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn postgresql_fdw_validator(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_encoding_max_length_sql(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn md5_bytea(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_tablespace_size_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_tablespace_size_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_database_size_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_unnest(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_relation_size(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_agg_transfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_agg_finalfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_lt_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_le_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_eq_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_gt_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_ge_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_ne_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_cmp_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_lt_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_le_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_eq_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_gt_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_ge_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_ne_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_cmp_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_lt_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_le_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_eq_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_gt_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_ge_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_ne_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_cmp_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_lt_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_le_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_eq_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_gt_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_ge_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_ne_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_cmp_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_tablespace_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_tablespace_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_tablespace_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_tablespace_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_tablespace_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_tablespace_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn shell_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn shell_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2vectorrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2vectorsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bytearecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn byteasend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn textsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn unknownrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn unknownsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn oidvectorsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namerecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn namesend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float4send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpcharsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varcharrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varcharsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn charrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn charsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xidrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xidsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regprocrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regprocsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regprocedurerecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regproceduresend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regoperrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regopersend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regoperatorrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regoperatorsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regclassrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regclasssend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regtyperecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regtypesend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bit_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bit_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varbit_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varbit_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimerecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn abstimesend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimerecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn reltimesend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tintervalsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lseg_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn path_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn line_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidr_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cidr_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cstring_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cstring_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyarray_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyarray_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_ruledef_ext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_viewdef_name_ext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_viewdef_ext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_indexdef_ext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_constraintdef_ext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_expr_ext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_prepared_statement(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_cursor(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_var_pop(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_stddev_pop(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_var_pop(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn booland_statefunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boolor_statefunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_lt_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_le_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_eq_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_gt_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_ge_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_ne_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_cmp_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_lt_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_le_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_eq_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_gt_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_ge_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_ne_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptz_cmp_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_tablespace_databases(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_bool(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bool_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn lastval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_postmaster_start_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_blocking_pids(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_below(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_overbelow(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_overabove(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn box_above(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_below(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_overbelow(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_overabove(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn poly_above(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_box_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_float8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_box_penalty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_box_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_box_union(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_box_same(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_poly_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_poly_compress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_overbelow(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn circle_overabove(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_circle_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_circle_compress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_stddev_pop(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn domain_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn domain_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_timezone_abbrevs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xmlexists(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_reload_conf(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_rotate_logfile_v2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_file_1arg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_read_file_off_len(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ls_dir_1arg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_sleep(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inetnot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inetand(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inetor(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inetpl(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inetmi_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inetmi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn statement_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn clock_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_cmp_prefix(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_has_role_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_has_role_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_has_role_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_has_role_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_has_role_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_has_role_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_justify_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_triggerdef_ext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dasind(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dacosd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn datand(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn datan2d(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dsind(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dcosd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dtand(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dcotd(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stop_backup_v2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_avg_serialize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_avg_deserialize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ginarrayextract(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ginarrayconsistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_avg_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn arrayoverlap(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn arraycontains(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn arraycontained(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_tuples_returned(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_tuples_fetched(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_tuples_inserted(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_tuples_updated(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_tuples_deleted(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexp_matches_no_flags(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexp_matches(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexp_split_to_table_no_flags(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexp_split_to_table(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexp_split_to_array_no_flags(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexp_split_to_array(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_bgwriter_timed_checkpoints(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_bgwriter_requested_checkpoints(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_bgwriter_buf_written_checkpoints(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_bgwriter_buf_written_clean(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_bgwriter_maxwritten_clean(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ginqueryarrayextract(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_buf_written_backend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anynonarray_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anynonarray_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_last_vacuum_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_last_autovacuum_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_last_analyze_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_last_autoanalyze_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_avg_combine(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_avg_serialize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_avg_deserialize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_wait_event_type(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidgt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidlt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidle(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bttidcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidlarger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tidsmaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8inc_any(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8inc_float8_float8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_sxx(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_syy(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_sxy(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_avgx(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_avgy(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_r2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_slope(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_intercept(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_covar_pop(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_covar_samp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_corr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_blk_read_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_blk_write_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_switch_wal(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_current_wal_lsn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_walfile_name_offset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_walfile_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_current_wal_insert_lsn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_wait_event(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_my_temp_schema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_is_other_temp_schema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_timezone_names(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_backend_xact_start(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_avg_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_buf_alloc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_live_tuples(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_dead_tuples(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_lock_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_lock_shared_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_try_advisory_lock_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_try_advisory_lock_shared_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_unlock_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_unlock_shared_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_lock_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_lock_shared_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_try_advisory_lock_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_try_advisory_lock_shared_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_unlock_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_unlock_shared_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_unlock_all(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xml_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xml_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xmlcomment(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn texttoxml(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xmlvalidate(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xml_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xml_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xmlconcat2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varbittypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn intervaltypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn intervaltypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptztypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamptztypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetztypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetztypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchartypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchartypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varchartypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varchartypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numerictypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numerictypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bittypmodin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bittypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varbittypmodout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xmltotext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn table_to_xml(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn query_to_xml(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cursor_to_xml(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn table_to_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn query_to_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cursor_to_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn table_to_xml_and_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn query_to_xml_and_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xpath(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn schema_to_xml(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn schema_to_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn schema_to_xml_and_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn database_to_xml(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn database_to_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn database_to_xml_and_xmlschema(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_snapshot_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_snapshot_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_snapshot_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_snapshot_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_current(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_current_snapshot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_snapshot_xmin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_snapshot_xmax(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_snapshot_xip(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_visible_in_snapshot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_hash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn booltext(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_function_calls(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_function_total_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_function_self_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btrecordcmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_table_size(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_indexes_size(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_relation_filenode(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_foreign_data_wrapper_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_foreign_data_wrapper_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_foreign_data_wrapper_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_foreign_data_wrapper_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_foreign_data_wrapper_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_foreign_data_wrapper_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_server_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_server_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_server_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_server_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_server_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_server_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_name_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_name_name_attnum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_name_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_name_id_attnum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_id_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_id_name_attnum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_id_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_id_id_attnum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_name_attnum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_column_privilege_id_attnum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_any_column_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_any_column_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_any_column_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_any_column_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_any_column_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_any_column_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitoverlay(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitoverlay_no_len(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitgetbit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bitsetbit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_relation_filepath(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_listening_channels(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_notify(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_numscans(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_tuples_returned(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_tuples_fetched(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_tuples_inserted(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_tuples_updated(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_tuples_deleted(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_tuples_hot_updated(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_blocks_fetched(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_blocks_hit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_function_calls(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_function_total_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_xact_function_self_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xpath_exists(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xml_is_well_formed(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xml_is_well_formed_document(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xml_is_well_formed_content(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_vacuum_count(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_autovacuum_count(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_analyze_count(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_autoanalyze_count(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_concat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_concat_ws(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_left(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_right(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_reverse(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_buf_fsync_backend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_point_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_conflict_tablespace(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_conflict_lock(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_conflict_snapshot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_conflict_bufferpin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_conflict_startup_deadlock(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_conflict_all(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_wal_replay_pause(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_wal_replay_resume(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_is_wal_replay_paused(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_stat_reset_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_bgwriter_stat_reset_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ginarrayextract_2args(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_tsvector_2args(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_sequence_parameters(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_available_extensions(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_available_extension_versions(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_extension_update_paths(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_extension_config_dump(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_tsquery_5args(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_tsquery_consistent_6args(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_xact_lock_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_xact_lock_shared_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_try_advisory_xact_lock_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_try_advisory_xact_lock_shared_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_xact_lock_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_advisory_xact_lock_shared_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_try_advisory_xact_lock_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_try_advisory_xact_lock_shared_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varchar_transform(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_create_restore_point(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_wal_senders(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_row_number(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_rank(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_dense_rank(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_percent_rank(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_cume_dist(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_ntile(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_lag(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_lag_with_offset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_lag_with_offset_and_default(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_lead(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_lead_with_offset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_lead_with_offset_and_default(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_first_value(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_last_value(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn window_nth_value(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn fdw_handler_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn fdw_handler_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn void_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn void_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint2sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint4sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btint8sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btfloat4sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btfloat8sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btoidsortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btnamesortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn date_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_type_privilege_name_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_type_privilege_name_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_type_privilege_id_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_type_privilege_id_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_type_privilege_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn has_type_privilege_id(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_not(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_and(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_or(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_temp_files(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_temp_bytes(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_db_deadlocks(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_to_json(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_to_json_pretty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn row_to_json(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn row_to_json_pretty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_transform(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn varbit_transform(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_viewdef_wrap(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_checkpoint_write_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_checkpoint_sync_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_collation_for(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_trigger_depth(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_wal_lsn_diff(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_size_pretty_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_remove(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_replace(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn rangesel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_lseek64(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_tell64(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_truncate64(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_agg_transfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_agg_finalfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_json(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_mod_since_analyze(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_sum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_cardinality(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_object_agg_transfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_image_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_image_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_image_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_image_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_image_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn record_image_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btrecordimagecmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_archiver(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_object_agg_finalfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_build_array(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_build_array_noargs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_build_object(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_build_object_noargs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_object(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_object_two_arg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_to_record(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_to_recordset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_array_length(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_each(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_populate_record(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_typeof(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_object_field_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_array_element(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_array_element_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_extract_path(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn width_bucket_array(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_array_elements(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_mi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_hash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bttextsortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_series_step_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn generate_series_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_strip_nulls(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_strip_nulls(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_object(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_object_two_arg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_agg_transfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_agg_finalfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_object_agg_transfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_object_agg_finalfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_build_array(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_build_array_noargs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_build_object(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_build_object_noargs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_ppoly(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_position(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_position_start(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_positions(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_circle_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_scale(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_point_fetch(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gist_poly_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_cpoint(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dist_polyp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_read_file_v2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn show_config_by_name_missing_ok(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_read_binary_file(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_notification_queue_usage(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ls_dir(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn row_security_active(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn row_security_active_name(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_concat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_delete(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_delete_idx(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_delete_path(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_set(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_pretty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_file(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn xidneq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsm_handler_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsm_handler_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsm_bernoulli_handler(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsm_system_handler(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_wal_receiver(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_progress_info(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_filter(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_setweight_by_filter(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_delete_str(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_unnest(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_delete_arr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_avg_combine(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_combine(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_to_array(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_to_tsvector(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bpchar_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn show_all_file_settings(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_current_wal_flush_lsn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bytea_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bttext_pattern_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn btbpchar_pattern_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_size_bytes(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_serialize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_deserialize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_avg_combine(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_combine(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_serialize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_deserialize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_combine(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn float8_regr_combine(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_delete_array(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_mul_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_div_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_current_if_assigned(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_partkeydef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ls_logdir(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ls_waldir(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ndistinct_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ndistinct_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ndistinct_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ndistinct_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr_sortsupport(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn txid_status(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_safe_snapshot_blocking_pids(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_isolation_test_session_is_blocked(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_identify_object_as_address(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_minmax_opcinfo(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_minmax_add_value(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_minmax_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_minmax_union(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_avg_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_sum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_avg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_var_pop(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_var_samp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_stddev_pop(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_poly_stddev_samp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexp_match_no_flags(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regexp_match(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_mul_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_hba_file_rules(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_statistics_obj_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_dependencies_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_dependencies_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_dependencies_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_dependencies_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_partition_constraintdef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_hash_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timetz_hash_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_hash_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn uuid_hash_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_lsn_hash_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashenumextended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_statisticsobjdef(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_hash_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hash_range_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_hash_extended(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn sha224_bytea(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn sha256_bytea(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn sha384_bytea(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn sha512_bytea(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn prefixsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn prefixjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_control_system(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_control_checkpoint(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_control_recovery(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_control_init(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_import_system_collations(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_collation_actual_version(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_int2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_float4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_filenode_relation(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_from_bytea(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_get(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_get_fragment(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn be_lo_put(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn make_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn make_timestamptz(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn make_timestamptz_at_timezone(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn make_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_array_elements_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_range_quad_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_range_quad_choose(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_range_quad_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_range_quad_inner_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_range_quad_leaf_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_populate_recordset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_regoperator(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_object_field(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_regprocedure(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_compare_jsonb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_jsonb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_jsonb_query(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_consistent_jsonb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_jsonb_path(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_jsonb_query_path(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_consistent_jsonb_path(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_triconsistent_jsonb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_triconsistent_jsonb_path(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_to_record(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_to_recordset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_regoper(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_regtype(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_regproc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_regclass(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bool_accum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bool_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bool_alltrue(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bool_anytrue(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyenum_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyenum_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hashenum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_first(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_last(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_range_bounds(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_range_all(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn enum_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn string_agg_transfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn string_agg_finalfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_describe_object(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_format(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_format_nv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bytea_string_agg_transfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn bytea_string_agg_finalfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8dec(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8dec_any(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_overlap(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_gist_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_gist_union(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_gist_compress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_bool(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_gist_penalty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_gist_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_gist_same(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn networksel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn networkjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_larger(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn network_smaller(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_event_trigger_dropped_objects(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2_avg_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_avg_accum_inv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int2int4_sum(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_gist_fetch(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_logical_emit_message_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_logical_emit_message_bytea(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_insert(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_xact_commit_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_next_pg_type_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_last_committed_xact(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_next_array_pg_type_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_next_toast_pg_type_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_next_heap_pg_class_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_next_index_pg_class_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_next_toast_pg_class_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_next_pg_enum_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_next_pg_authid_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_create_empty_extension(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn event_trigger_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn event_trigger_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvectorin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvectorout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsqueryin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsqueryout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_strip(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_setweight(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_concat(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_match_vq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_match_qv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvectorsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvectorrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquerysend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsqueryrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvectorin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvectorout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvector_compress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvector_decompress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvector_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvector_union(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvector_same(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvector_penalty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvector_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_tsvector(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_tsquery(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_tsquery_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_and(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_or(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_not(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_numnode(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquerytree(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_rewrite(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_rewrite_query(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsmatchsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsmatchjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_typanalyze(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_stat1(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_stat2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsq_mcontains(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsq_mcontained(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsquery_compress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn text_starts_with(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsquery_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsquery_union(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsquery_same(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsquery_penalty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsquery_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_rank_wttf(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_rank_wtt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_rank_ttf(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_rank_tt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_rankcd_wttf(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_rankcd_wtt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_rankcd_ttf(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_rankcd_tt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_length(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_token_type_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_token_type_byname(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_parse_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_parse_byname(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn prsd_start(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn prsd_nexttoken(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn prsd_end(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn prsd_headline(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn prsd_lextype(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_lexize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_cmp_tslexeme(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dsimple_init(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dsimple_lexize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dsynonym_init(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dsynonym_lexize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dispell_init(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn dispell_lexize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regconfigin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regconfigout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regconfigrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regconfigsend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn thesaurus_init(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn thesaurus_lexize(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_byid_opt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_tsvector_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_tsquery_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn plainto_tsquery_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_tsvector(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_tsquery(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn plainto_tsquery(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_update_trigger_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsvector_update_trigger_bycolumn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_opt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ts_parser_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ts_dict_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ts_config_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn get_current_ts_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_match_tt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_match_tq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_ts_template_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regdictionaryin(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regdictionaryout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regdictionaryrecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regdictionarysend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_reset_shared(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_reset_single_table_counters(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_reset_single_function_counters(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_tablespace_location(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_create_physical_replication_slot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_drop_replication_slot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_replication_slots(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_logical_slot_get_changes(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_logical_slot_get_binary_changes(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_logical_slot_peek_changes(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_logical_slot_peek_binary_changes(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_create_logical_replication_slot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_jsonb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_snapshot_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_clean_pending_list(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsvector_consistent_oldsig(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_extract_tsquery_oldsig(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_tsquery_consistent_oldsig(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gtsquery_consistent_oldsig(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_spg_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_spg_choose(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_spg_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_spg_inner_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_spg_leaf_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_current_logfile(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_current_logfile_1arg(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_function_arg_default(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_export_snapshot(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_is_in_recovery(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_is_in_backup(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_backup_start_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_collation_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_typanalyze(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn arraycontsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn arraycontjoinsel(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_multixact_members(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_last_wal_receive_lsn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_last_wal_replay_lsn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_div_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn cash_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numeric_cash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_read_file_all(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_read_binary_file_off_len(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_read_binary_file_all(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_opfamily_is_visible(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_last_xact_replay_timestamp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyrange_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn anyrange_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_recv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_send(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_identify_object(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_constructor2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_constructor3(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_relation_is_updatable(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_column_is_updatable(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn make_date(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn make_time(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_lower(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_upper(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_empty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_lower_inc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_upper_inc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_lower_inf(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_upper_inf(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_overlaps(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_contains_elem(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_contains(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn elem_contained_by_range(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_contained_by(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_adjacent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_before(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_after(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_overleft(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_overright(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_union(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_intersect(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_minus(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_gist_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_gist_union(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_slot_advance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_gist_penalty(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_gist_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_gist_same(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hash_range(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4range_canonical(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn daterange_canonical(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_typanalyze(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_transform(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn interval_transform(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ginarraytriconsistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn gin_tsquery_triconsistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int4range_subdiff(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8range_subdiff(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn numrange_subdiff(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn daterange_subdiff(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn int8range_canonical(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsrange_subdiff(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tstzrange_subdiff(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_object_keys(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_each_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn mxid_age(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_extract_path_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn acldefault_sql(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn time_transform(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_object_field(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_object_field_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_array_element(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_array_element_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_extract_path(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_summarize_new_values(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_extract_path_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_object_address(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_array_elements(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_array_length(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_object_keys(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_each(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_each_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_populate_record(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_populate_recordset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_typeof(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_array_elements_text(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ordered_set_transition(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ordered_set_transition_multi(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn percentile_disc_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn percentile_cont_float8_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn percentile_cont_interval_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn percentile_disc_multi_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn percentile_cont_float8_multi_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn percentile_cont_interval_multi_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn mode_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hypothetical_rank_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hypothetical_percent_rank_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hypothetical_cume_dist_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn hypothetical_dense_rank_final(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_izone_transform(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn timestamp_zone_transform(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_summarize_range(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_desummarize_range(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_quad_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_quad_choose(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_quad_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_quad_inner_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_quad_leaf_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_kd_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_kd_choose(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_kd_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_kd_inner_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_text_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_text_choose(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_text_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_text_inner_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_text_leaf_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_sequence_last_value(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_hash(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_contains(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_exists(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_exists_any(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_exists_all(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_contained(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_agg_array_transfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn array_agg_array_finalfn(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn range_merge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_merge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn boxes_bound_box(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn inet_same_family(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_record_init_privs(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regnamespacein(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regnamespaceout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_regnamespace(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regnamespacerecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regnamespacesend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn point_box(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regroleout(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn to_regrole(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regrolerecv(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regrolesend(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn regrolein(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_rotate_logfile(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_read_file(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn binary_upgrade_set_missing_value(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_inclusion_opcinfo(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_inclusion_add_value(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_inclusion_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn brin_inclusion_union(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_in(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_out(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_trunc(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_eq(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_lt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_le(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_gt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_ge(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_ne(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_cmp(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_not(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_and(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_or(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddrtomacaddr8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8tomacaddr(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn macaddr8_set7bit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_int8_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_int4_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_int4_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_int4_int2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_int2_int8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_int2_int4(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_int2_int2(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_date_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_timestamp_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_timestamptz_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_interval_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_time_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_timetz_interval(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_float8_float8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_float4_float8(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn in_range_numeric_numeric(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_jsonb_byid_opt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_jsonb_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_jsonb_opt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_jsonb(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_json_byid_opt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_json_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_json_opt(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn ts_headline_json(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_string_to_tsvector(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_string_to_tsvector(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_string_to_tsvector_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_string_to_tsvector_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_to_tsvector(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn jsonb_to_tsvector_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_to_tsvector(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn json_to_tsvector_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_event_trigger_table_rewrite_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_event_trigger_table_rewrite_reason(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_event_trigger_ddl_commands(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn phraseto_tsquery(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_phrase(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn tsquery_phrase_distance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn phraseto_tsquery_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn websearch_to_tsquery_byid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn websearch_to_tsquery(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_bbox_quad_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_poly_quad_compress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_box_quad_config(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_box_quad_choose(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_box_quad_picksplit(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_box_quad_inner_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn spg_box_quad_leaf_consistent(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn satisfies_hash_partition(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_create(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_drop(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_oid(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_session_setup(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_session_reset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_session_is_setup(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_session_progress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_xact_setup(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_xact_reset(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_advance(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_replication_origin_progress(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_show_replication_origin_status(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_stat_get_subscription(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_publication_tables(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_get_replica_identity_index(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn pg_relation_is_publishable(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn parse_bool(value: *const ::std::os::raw::c_char, result: *mut bool) -> bool;
}
extern "C" {
    pub fn parse_bool_with_len(
        value: *const ::std::os::raw::c_char,
        len: usize,
        result: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn domain_check(
        value: Datum,
        isnull: bool,
        domainType: Oid,
        extra: *mut *mut ::std::os::raw::c_void,
        mcxt: MemoryContext,
    );
}
extern "C" {
    pub fn errdatatype(datatypeOid: Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdomainconstraint(
        datatypeOid: Oid,
        conname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hex_encode(
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hex_decode(
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn buildint2vector(int2s: *const int16, n: ::std::os::raw::c_int) -> *mut int2vector;
}
extern "C" {
    pub fn namecpy(n1: Name, n2: Name) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn namestrcpy(name: Name, str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn namestrcmp(name: Name, str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_atoi(
        s: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> int32;
}
extern "C" {
    pub fn pg_itoa(i: int16, a: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn pg_ltoa(l: int32, a: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn pg_lltoa(ll: int64, a: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn pg_ltostr_zeropad(
        str: *mut ::std::os::raw::c_char,
        value: int32,
        minwidth: int32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_ltostr(str: *mut ::std::os::raw::c_char, value: int32)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_strtouint64(
        str: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> uint64;
}
extern "C" {
    #[link_name = "\u{1}extra_float_digits"]
    pub static mut extra_float_digits: ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_float8_infinity() -> f64;
}
extern "C" {
    pub fn get_float4_infinity() -> f32;
}
extern "C" {
    pub fn get_float8_nan() -> f64;
}
extern "C" {
    pub fn get_float4_nan() -> f32;
}
extern "C" {
    pub fn is_infinite(val: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn float8in_internal(
        num: *mut ::std::os::raw::c_char,
        endptr_p: *mut *mut ::std::os::raw::c_char,
        type_name: *const ::std::os::raw::c_char,
        orig_string: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn float8out_internal(num: f64) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn float4_cmp_internal(a: float4, b: float4) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn float8_cmp_internal(a: float8, b: float8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buildoidvector(oids: *const Oid, n: ::std::os::raw::c_int) -> *mut oidvector;
}
extern "C" {
    pub fn oidparse(node: *mut Node) -> Oid;
}
extern "C" {
    pub fn oid_cmp(
        p1: *const ::std::os::raw::c_void,
        p2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regexp_fixed_prefix(
        text_re: *mut text,
        case_insensitive: bool,
        collation: Oid,
        exact: *mut bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}quote_all_identifiers"]
    pub static mut quote_all_identifiers: bool;
}
extern "C" {
    pub fn quote_identifier(ident: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn quote_qualified_identifier(
        qualifier: *const ::std::os::raw::c_char,
        ident: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn generate_operator_clause(
        buf: fmStringInfo,
        leftop: *const ::std::os::raw::c_char,
        leftoptype: Oid,
        opoid: Oid,
        rightop: *const ::std::os::raw::c_char,
        rightoptype: Oid,
    );
}
extern "C" {
    pub fn bpchartruelen(
        s: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cstring_to_text(s: *const ::std::os::raw::c_char) -> *mut text;
}
extern "C" {
    pub fn cstring_to_text_with_len(
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut text;
}
extern "C" {
    pub fn text_to_cstring(t: *const text) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn text_to_cstring_buffer(
        src: *const text,
        dst: *mut ::std::os::raw::c_char,
        dst_len: usize,
    );
}
extern "C" {
    pub fn xidComparator(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_cidr_ntop(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_void,
        bits: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_network_to_scalar(value: Datum, typid: Oid, failure: *mut bool) -> f64;
}
extern "C" {
    pub fn network_scan_first(in_: Datum) -> Datum;
}
extern "C" {
    pub fn network_scan_last(in_: Datum) -> Datum;
}
extern "C" {
    pub fn clean_ipv6_addr(addr_family: ::std::os::raw::c_int, addr: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn numeric_float8_no_overflow(fcinfo: FunctionCallInfo) -> Datum;
}
extern "C" {
    pub fn format_type_extended(
        type_oid: Oid,
        typemod: int32,
        flags: bits16,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_type_be(type_oid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_type_be_qualified(type_oid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_type_with_typemod(type_oid: Oid, typemod: int32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn type_maximum_size(type_oid: Oid, typemod: int32) -> int32;
}
extern "C" {
    pub fn quote_literal_cstr(rawstr: *const ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn escape_json(buf: StringInfo, str: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OpBtreeInterpretation {
    pub opfamily_id: Oid,
    pub strategy: ::std::os::raw::c_int,
    pub oplefttype: Oid,
    pub oprighttype: Oid,
}
#[test]
fn bindgen_test_layout_OpBtreeInterpretation() {
    assert_eq!(
        ::std::mem::size_of::<OpBtreeInterpretation>(),
        16usize,
        concat!("Size of: ", stringify!(OpBtreeInterpretation))
    );
    assert_eq!(
        ::std::mem::align_of::<OpBtreeInterpretation>(),
        4usize,
        concat!("Alignment of ", stringify!(OpBtreeInterpretation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OpBtreeInterpretation>())).opfamily_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OpBtreeInterpretation),
            "::",
            stringify!(opfamily_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpBtreeInterpretation>())).strategy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OpBtreeInterpretation),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OpBtreeInterpretation>())).oplefttype as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OpBtreeInterpretation),
            "::",
            stringify!(oplefttype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OpBtreeInterpretation>())).oprighttype as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OpBtreeInterpretation),
            "::",
            stringify!(oprighttype)
        )
    );
}
pub const IOFuncSelector_IOFunc_input: IOFuncSelector = 0;
pub const IOFuncSelector_IOFunc_output: IOFuncSelector = 1;
pub const IOFuncSelector_IOFunc_receive: IOFuncSelector = 2;
pub const IOFuncSelector_IOFunc_send: IOFuncSelector = 3;
pub type IOFuncSelector = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AttStatsSlot {
    pub staop: Oid,
    pub valuetype: Oid,
    pub values: *mut Datum,
    pub nvalues: ::std::os::raw::c_int,
    pub numbers: *mut float4,
    pub nnumbers: ::std::os::raw::c_int,
    pub values_arr: *mut ::std::os::raw::c_void,
    pub numbers_arr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AttStatsSlot() {
    assert_eq!(
        ::std::mem::size_of::<AttStatsSlot>(),
        56usize,
        concat!("Size of: ", stringify!(AttStatsSlot))
    );
    assert_eq!(
        ::std::mem::align_of::<AttStatsSlot>(),
        8usize,
        concat!("Alignment of ", stringify!(AttStatsSlot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AttStatsSlot>())).staop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AttStatsSlot),
            "::",
            stringify!(staop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AttStatsSlot>())).valuetype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AttStatsSlot),
            "::",
            stringify!(valuetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AttStatsSlot>())).values as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AttStatsSlot),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AttStatsSlot>())).nvalues as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AttStatsSlot),
            "::",
            stringify!(nvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AttStatsSlot>())).numbers as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AttStatsSlot),
            "::",
            stringify!(numbers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AttStatsSlot>())).nnumbers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AttStatsSlot),
            "::",
            stringify!(nnumbers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AttStatsSlot>())).values_arr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AttStatsSlot),
            "::",
            stringify!(values_arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AttStatsSlot>())).numbers_arr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AttStatsSlot),
            "::",
            stringify!(numbers_arr)
        )
    );
}
pub type get_attavgwidth_hook_type =
    ::std::option::Option<unsafe extern "C" fn(relid: Oid, attnum: AttrNumber) -> int32>;
extern "C" {
    #[link_name = "\u{1}get_attavgwidth_hook"]
    pub static mut get_attavgwidth_hook: get_attavgwidth_hook_type;
}
extern "C" {
    pub fn op_in_opfamily(opno: Oid, opfamily: Oid) -> bool;
}
extern "C" {
    pub fn get_op_opfamily_strategy(opno: Oid, opfamily: Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_op_opfamily_sortfamily(opno: Oid, opfamily: Oid) -> Oid;
}
extern "C" {
    pub fn get_op_opfamily_properties(
        opno: Oid,
        opfamily: Oid,
        ordering_op: bool,
        strategy: *mut ::std::os::raw::c_int,
        lefttype: *mut Oid,
        righttype: *mut Oid,
    );
}
extern "C" {
    pub fn get_opfamily_member(
        opfamily: Oid,
        lefttype: Oid,
        righttype: Oid,
        strategy: int16,
    ) -> Oid;
}
extern "C" {
    pub fn get_ordering_op_properties(
        opno: Oid,
        opfamily: *mut Oid,
        opcintype: *mut Oid,
        strategy: *mut int16,
    ) -> bool;
}
extern "C" {
    pub fn get_equality_op_for_ordering_op(opno: Oid, reverse: *mut bool) -> Oid;
}
extern "C" {
    pub fn get_ordering_op_for_equality_op(opno: Oid, use_lhs_type: bool) -> Oid;
}
extern "C" {
    pub fn get_mergejoin_opfamilies(opno: Oid) -> *mut List;
}
extern "C" {
    pub fn get_compatible_hash_operators(opno: Oid, lhs_opno: *mut Oid, rhs_opno: *mut Oid)
        -> bool;
}
extern "C" {
    pub fn get_op_hash_functions(
        opno: Oid,
        lhs_procno: *mut RegProcedure,
        rhs_procno: *mut RegProcedure,
    ) -> bool;
}
extern "C" {
    pub fn get_op_btree_interpretation(opno: Oid) -> *mut List;
}
extern "C" {
    pub fn equality_ops_are_compatible(opno1: Oid, opno2: Oid) -> bool;
}
extern "C" {
    pub fn get_opfamily_proc(opfamily: Oid, lefttype: Oid, righttype: Oid, procnum: int16) -> Oid;
}
extern "C" {
    pub fn get_attname(
        relid: Oid,
        attnum: AttrNumber,
        missing_ok: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_attnum(relid: Oid, attname: *const ::std::os::raw::c_char) -> AttrNumber;
}
extern "C" {
    pub fn get_attidentity(relid: Oid, attnum: AttrNumber) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_atttype(relid: Oid, attnum: AttrNumber) -> Oid;
}
extern "C" {
    pub fn get_atttypmod(relid: Oid, attnum: AttrNumber) -> int32;
}
extern "C" {
    pub fn get_atttypetypmodcoll(
        relid: Oid,
        attnum: AttrNumber,
        typid: *mut Oid,
        typmod: *mut int32,
        collid: *mut Oid,
    );
}
extern "C" {
    pub fn get_collation_name(colloid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_constraint_name(conoid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_language_name(langoid: Oid, missing_ok: bool) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_opclass_family(opclass: Oid) -> Oid;
}
extern "C" {
    pub fn get_opclass_input_type(opclass: Oid) -> Oid;
}
extern "C" {
    pub fn get_opcode(opno: Oid) -> RegProcedure;
}
extern "C" {
    pub fn get_opname(opno: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_op_rettype(opno: Oid) -> Oid;
}
extern "C" {
    pub fn op_input_types(opno: Oid, lefttype: *mut Oid, righttype: *mut Oid);
}
extern "C" {
    pub fn op_mergejoinable(opno: Oid, inputtype: Oid) -> bool;
}
extern "C" {
    pub fn op_hashjoinable(opno: Oid, inputtype: Oid) -> bool;
}
extern "C" {
    pub fn op_strict(opno: Oid) -> bool;
}
extern "C" {
    pub fn op_volatile(opno: Oid) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_commutator(opno: Oid) -> Oid;
}
extern "C" {
    pub fn get_negator(opno: Oid) -> Oid;
}
extern "C" {
    pub fn get_oprrest(opno: Oid) -> RegProcedure;
}
extern "C" {
    pub fn get_oprjoin(opno: Oid) -> RegProcedure;
}
extern "C" {
    pub fn get_func_name(funcid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_func_namespace(funcid: Oid) -> Oid;
}
extern "C" {
    pub fn get_func_rettype(funcid: Oid) -> Oid;
}
extern "C" {
    pub fn get_func_nargs(funcid: Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_func_signature(
        funcid: Oid,
        argtypes: *mut *mut Oid,
        nargs: *mut ::std::os::raw::c_int,
    ) -> Oid;
}
extern "C" {
    pub fn get_func_variadictype(funcid: Oid) -> Oid;
}
extern "C" {
    pub fn get_func_retset(funcid: Oid) -> bool;
}
extern "C" {
    pub fn func_strict(funcid: Oid) -> bool;
}
extern "C" {
    pub fn func_volatile(funcid: Oid) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn func_parallel(funcid: Oid) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_func_prokind(funcid: Oid) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_func_leakproof(funcid: Oid) -> bool;
}
extern "C" {
    pub fn get_func_cost(funcid: Oid) -> float4;
}
extern "C" {
    pub fn get_func_rows(funcid: Oid) -> float4;
}
extern "C" {
    pub fn get_relname_relid(relname: *const ::std::os::raw::c_char, relnamespace: Oid) -> Oid;
}
extern "C" {
    pub fn get_rel_name(relid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_rel_namespace(relid: Oid) -> Oid;
}
extern "C" {
    pub fn get_rel_type_id(relid: Oid) -> Oid;
}
extern "C" {
    pub fn get_rel_relkind(relid: Oid) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_rel_relispartition(relid: Oid) -> bool;
}
extern "C" {
    pub fn get_rel_tablespace(relid: Oid) -> Oid;
}
extern "C" {
    pub fn get_rel_persistence(relid: Oid) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_transform_fromsql(typid: Oid, langid: Oid, trftypes: *mut List) -> Oid;
}
extern "C" {
    pub fn get_transform_tosql(typid: Oid, langid: Oid, trftypes: *mut List) -> Oid;
}
extern "C" {
    pub fn get_typisdefined(typid: Oid) -> bool;
}
extern "C" {
    pub fn get_typlen(typid: Oid) -> int16;
}
extern "C" {
    pub fn get_typbyval(typid: Oid) -> bool;
}
extern "C" {
    pub fn get_typlenbyval(typid: Oid, typlen: *mut int16, typbyval: *mut bool);
}
extern "C" {
    pub fn get_typlenbyvalalign(
        typid: Oid,
        typlen: *mut int16,
        typbyval: *mut bool,
        typalign: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn getTypeIOParam(typeTuple: HeapTuple) -> Oid;
}
extern "C" {
    pub fn get_type_io_data(
        typid: Oid,
        which_func: IOFuncSelector,
        typlen: *mut int16,
        typbyval: *mut bool,
        typalign: *mut ::std::os::raw::c_char,
        typdelim: *mut ::std::os::raw::c_char,
        typioparam: *mut Oid,
        func: *mut Oid,
    );
}
extern "C" {
    pub fn get_typstorage(typid: Oid) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_typdefault(typid: Oid) -> *mut Node;
}
extern "C" {
    pub fn get_typtype(typid: Oid) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn type_is_rowtype(typid: Oid) -> bool;
}
extern "C" {
    pub fn type_is_enum(typid: Oid) -> bool;
}
extern "C" {
    pub fn type_is_range(typid: Oid) -> bool;
}
extern "C" {
    pub fn get_type_category_preferred(
        typid: Oid,
        typcategory: *mut ::std::os::raw::c_char,
        typispreferred: *mut bool,
    );
}
extern "C" {
    pub fn get_typ_typrelid(typid: Oid) -> Oid;
}
extern "C" {
    pub fn get_element_type(typid: Oid) -> Oid;
}
extern "C" {
    pub fn get_array_type(typid: Oid) -> Oid;
}
extern "C" {
    pub fn get_promoted_array_type(typid: Oid) -> Oid;
}
extern "C" {
    pub fn get_base_element_type(typid: Oid) -> Oid;
}
extern "C" {
    pub fn getTypeInputInfo(type_: Oid, typInput: *mut Oid, typIOParam: *mut Oid);
}
extern "C" {
    pub fn getTypeOutputInfo(type_: Oid, typOutput: *mut Oid, typIsVarlena: *mut bool);
}
extern "C" {
    pub fn getTypeBinaryInputInfo(type_: Oid, typReceive: *mut Oid, typIOParam: *mut Oid);
}
extern "C" {
    pub fn getTypeBinaryOutputInfo(type_: Oid, typSend: *mut Oid, typIsVarlena: *mut bool);
}
extern "C" {
    pub fn get_typmodin(typid: Oid) -> Oid;
}
extern "C" {
    pub fn get_typcollation(typid: Oid) -> Oid;
}
extern "C" {
    pub fn type_is_collatable(typid: Oid) -> bool;
}
extern "C" {
    pub fn getBaseType(typid: Oid) -> Oid;
}
extern "C" {
    pub fn getBaseTypeAndTypmod(typid: Oid, typmod: *mut int32) -> Oid;
}
extern "C" {
    pub fn get_typavgwidth(typid: Oid, typmod: int32) -> int32;
}
extern "C" {
    pub fn get_attavgwidth(relid: Oid, attnum: AttrNumber) -> int32;
}
extern "C" {
    pub fn get_attstatsslot(
        sslot: *mut AttStatsSlot,
        statstuple: HeapTuple,
        reqkind: ::std::os::raw::c_int,
        reqop: Oid,
        flags: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn free_attstatsslot(sslot: *mut AttStatsSlot);
}
extern "C" {
    pub fn get_namespace_name(nspid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_namespace_name_or_temp(nspid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_range_subtype(rangeOid: Oid) -> Oid;
}
extern "C" {
    pub fn XLogBeginInsert();
}
extern "C" {
    pub fn XLogSetRecordFlags(flags: uint8);
}
extern "C" {
    pub fn XLogInsert(rmid: RmgrId, info: uint8) -> XLogRecPtr;
}
extern "C" {
    pub fn XLogEnsureRecordSpace(nbuffers: ::std::os::raw::c_int, ndatas: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XLogRegisterData(data: *mut ::std::os::raw::c_char, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XLogRegisterBuffer(block_id: uint8, buffer: Buffer, flags: uint8);
}
extern "C" {
    pub fn XLogRegisterBlock(
        block_id: uint8,
        rnode: *mut RelFileNode,
        forknum: ForkNumber,
        blknum: BlockNumber,
        page: *mut ::std::os::raw::c_char,
        flags: uint8,
    );
}
extern "C" {
    pub fn XLogRegisterBufData(
        block_id: uint8,
        data: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XLogResetInsertion();
}
extern "C" {
    pub fn XLogCheckBufferNeedsBackup(buffer: Buffer) -> bool;
}
extern "C" {
    pub fn log_newpage(
        rnode: *mut RelFileNode,
        forkNum: ForkNumber,
        blk: BlockNumber,
        page: *mut ::std::os::raw::c_char,
        page_std: bool,
    ) -> XLogRecPtr;
}
extern "C" {
    pub fn log_newpage_buffer(buffer: Buffer, page_std: bool) -> XLogRecPtr;
}
extern "C" {
    pub fn XLogSaveBufferForHint(buffer: Buffer, buffer_std: bool) -> XLogRecPtr;
}
extern "C" {
    pub fn InitXLogInsert();
}
extern "C" {
    #[link_name = "\u{1}sync_method"]
    pub static mut sync_method: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}ThisTimeLineID"]
    pub static mut ThisTimeLineID: TimeLineID;
}
extern "C" {
    #[link_name = "\u{1}InRecovery"]
    pub static mut InRecovery: bool;
}
pub const HotStandbyState_STANDBY_DISABLED: HotStandbyState = 0;
pub const HotStandbyState_STANDBY_INITIALIZED: HotStandbyState = 1;
pub const HotStandbyState_STANDBY_SNAPSHOT_PENDING: HotStandbyState = 2;
pub const HotStandbyState_STANDBY_SNAPSHOT_READY: HotStandbyState = 3;
pub type HotStandbyState = u32;
extern "C" {
    #[link_name = "\u{1}standbyState"]
    pub static mut standbyState: HotStandbyState;
}
pub const RecoveryTargetType_RECOVERY_TARGET_UNSET: RecoveryTargetType = 0;
pub const RecoveryTargetType_RECOVERY_TARGET_XID: RecoveryTargetType = 1;
pub const RecoveryTargetType_RECOVERY_TARGET_TIME: RecoveryTargetType = 2;
pub const RecoveryTargetType_RECOVERY_TARGET_NAME: RecoveryTargetType = 3;
pub const RecoveryTargetType_RECOVERY_TARGET_LSN: RecoveryTargetType = 4;
pub const RecoveryTargetType_RECOVERY_TARGET_IMMEDIATE: RecoveryTargetType = 5;
pub type RecoveryTargetType = u32;
extern "C" {
    #[link_name = "\u{1}ProcLastRecPtr"]
    pub static mut ProcLastRecPtr: XLogRecPtr;
}
extern "C" {
    #[link_name = "\u{1}XactLastRecEnd"]
    pub static mut XactLastRecEnd: XLogRecPtr;
}
extern "C" {
    #[link_name = "\u{1}XactLastCommitEnd"]
    pub static mut XactLastCommitEnd: XLogRecPtr;
}
extern "C" {
    #[link_name = "\u{1}reachedConsistency"]
    pub static mut reachedConsistency: bool;
}
extern "C" {
    #[link_name = "\u{1}wal_segment_size"]
    pub static mut wal_segment_size: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}min_wal_size_mb"]
    pub static mut min_wal_size_mb: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}max_wal_size_mb"]
    pub static mut max_wal_size_mb: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}wal_keep_segments"]
    pub static mut wal_keep_segments: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}XLOGbuffers"]
    pub static mut XLOGbuffers: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}XLogArchiveTimeout"]
    pub static mut XLogArchiveTimeout: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}wal_retrieve_retry_interval"]
    pub static mut wal_retrieve_retry_interval: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}XLogArchiveCommand"]
    pub static mut XLogArchiveCommand: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}EnableHotStandby"]
    pub static mut EnableHotStandby: bool;
}
extern "C" {
    #[link_name = "\u{1}fullPageWrites"]
    pub static mut fullPageWrites: bool;
}
extern "C" {
    #[link_name = "\u{1}wal_log_hints"]
    pub static mut wal_log_hints: bool;
}
extern "C" {
    #[link_name = "\u{1}wal_compression"]
    pub static mut wal_compression: bool;
}
extern "C" {
    #[link_name = "\u{1}wal_consistency_checking"]
    pub static mut wal_consistency_checking: *mut bool;
}
extern "C" {
    #[link_name = "\u{1}wal_consistency_checking_string"]
    pub static mut wal_consistency_checking_string: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}log_checkpoints"]
    pub static mut log_checkpoints: bool;
}
extern "C" {
    #[link_name = "\u{1}CheckPointSegments"]
    pub static mut CheckPointSegments: ::std::os::raw::c_int;
}
pub const ArchiveMode_ARCHIVE_MODE_OFF: ArchiveMode = 0;
pub const ArchiveMode_ARCHIVE_MODE_ON: ArchiveMode = 1;
pub const ArchiveMode_ARCHIVE_MODE_ALWAYS: ArchiveMode = 2;
pub type ArchiveMode = u32;
extern "C" {
    #[link_name = "\u{1}XLogArchiveMode"]
    pub static mut XLogArchiveMode: ::std::os::raw::c_int;
}
pub const WalLevel_WAL_LEVEL_MINIMAL: WalLevel = 0;
pub const WalLevel_WAL_LEVEL_REPLICA: WalLevel = 1;
pub const WalLevel_WAL_LEVEL_LOGICAL: WalLevel = 2;
pub type WalLevel = u32;
extern "C" {
    #[link_name = "\u{1}wal_level"]
    pub static mut wal_level: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CheckpointStatsData {
    pub ckpt_start_t: TimestampTz,
    pub ckpt_write_t: TimestampTz,
    pub ckpt_sync_t: TimestampTz,
    pub ckpt_sync_end_t: TimestampTz,
    pub ckpt_end_t: TimestampTz,
    pub ckpt_bufs_written: ::std::os::raw::c_int,
    pub ckpt_segs_added: ::std::os::raw::c_int,
    pub ckpt_segs_removed: ::std::os::raw::c_int,
    pub ckpt_segs_recycled: ::std::os::raw::c_int,
    pub ckpt_sync_rels: ::std::os::raw::c_int,
    pub ckpt_longest_sync: uint64,
    pub ckpt_agg_sync_time: uint64,
}
#[test]
fn bindgen_test_layout_CheckpointStatsData() {
    assert_eq!(
        ::std::mem::size_of::<CheckpointStatsData>(),
        80usize,
        concat!("Size of: ", stringify!(CheckpointStatsData))
    );
    assert_eq!(
        ::std::mem::align_of::<CheckpointStatsData>(),
        8usize,
        concat!("Alignment of ", stringify!(CheckpointStatsData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_start_t as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_start_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_write_t as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_write_t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_sync_t as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_sync_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_sync_end_t as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_sync_end_t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_end_t as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_end_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_bufs_written as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_bufs_written)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_segs_added as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_segs_added)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_segs_removed as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_segs_removed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_segs_recycled as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_segs_recycled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_sync_rels as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_sync_rels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_longest_sync as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_longest_sync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CheckpointStatsData>())).ckpt_agg_sync_time as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckpointStatsData),
            "::",
            stringify!(ckpt_agg_sync_time)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}CheckpointStats"]
    pub static mut CheckpointStats: CheckpointStatsData;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XLogRecData {
    _unused: [u8; 0],
}
extern "C" {
    pub fn XLogInsertRecord(
        rdata: *mut XLogRecData,
        fpw_lsn: XLogRecPtr,
        flags: uint8,
    ) -> XLogRecPtr;
}
extern "C" {
    pub fn XLogFlush(RecPtr: XLogRecPtr);
}
extern "C" {
    pub fn XLogBackgroundFlush() -> bool;
}
extern "C" {
    pub fn XLogNeedsFlush(RecPtr: XLogRecPtr) -> bool;
}
extern "C" {
    pub fn XLogFileInit(
        segno: XLogSegNo,
        use_existent: *mut bool,
        use_lock: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XLogFileOpen(segno: XLogSegNo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CheckXLogRemoved(segno: XLogSegNo, tli: TimeLineID);
}
extern "C" {
    pub fn XLogGetLastRemovedSegno() -> XLogSegNo;
}
extern "C" {
    pub fn XLogSetAsyncXactLSN(record: XLogRecPtr);
}
extern "C" {
    pub fn XLogSetReplicationSlotMinimumLSN(lsn: XLogRecPtr);
}
extern "C" {
    pub fn xlog_redo(record: *mut XLogReaderState);
}
extern "C" {
    pub fn xlog_desc(buf: StringInfo, record: *mut XLogReaderState);
}
extern "C" {
    pub fn xlog_identify(info: uint8) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn issue_xlog_fsync(fd: ::std::os::raw::c_int, segno: XLogSegNo);
}
extern "C" {
    pub fn RecoveryInProgress() -> bool;
}
extern "C" {
    pub fn HotStandbyActive() -> bool;
}
extern "C" {
    pub fn HotStandbyActiveInReplay() -> bool;
}
extern "C" {
    pub fn XLogInsertAllowed() -> bool;
}
extern "C" {
    pub fn GetXLogReceiptTime(rtime: *mut TimestampTz, fromStream: *mut bool);
}
extern "C" {
    pub fn GetXLogReplayRecPtr(replayTLI: *mut TimeLineID) -> XLogRecPtr;
}
extern "C" {
    pub fn GetXLogInsertRecPtr() -> XLogRecPtr;
}
extern "C" {
    pub fn GetXLogWriteRecPtr() -> XLogRecPtr;
}
extern "C" {
    pub fn RecoveryIsPaused() -> bool;
}
extern "C" {
    pub fn SetRecoveryPause(recoveryPause: bool);
}
extern "C" {
    pub fn GetLatestXTime() -> TimestampTz;
}
extern "C" {
    pub fn GetCurrentChunkReplayStartTime() -> TimestampTz;
}
extern "C" {
    pub fn XLogFileNameP(tli: TimeLineID, segno: XLogSegNo) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn UpdateControlFile();
}
extern "C" {
    pub fn GetSystemIdentifier() -> uint64;
}
extern "C" {
    pub fn GetMockAuthenticationNonce() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DataChecksumsEnabled() -> bool;
}
extern "C" {
    pub fn GetFakeLSNForUnloggedRel() -> XLogRecPtr;
}
extern "C" {
    pub fn XLOGShmemSize() -> Size;
}
extern "C" {
    pub fn XLOGShmemInit();
}
extern "C" {
    pub fn BootStrapXLOG();
}
extern "C" {
    pub fn LocalProcessControlFile(reset: bool);
}
extern "C" {
    pub fn StartupXLOG();
}
extern "C" {
    pub fn ShutdownXLOG(code: ::std::os::raw::c_int, arg: Datum);
}
extern "C" {
    pub fn InitXLOGAccess();
}
extern "C" {
    pub fn CreateCheckPoint(flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CreateRestartPoint(flags: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn XLogPutNextOid(nextOid: Oid);
}
extern "C" {
    pub fn XLogRestorePoint(rpName: *const ::std::os::raw::c_char) -> XLogRecPtr;
}
extern "C" {
    pub fn UpdateFullPageWrites();
}
extern "C" {
    pub fn GetFullPageWriteInfo(RedoRecPtr_p: *mut XLogRecPtr, doPageWrites_p: *mut bool);
}
extern "C" {
    pub fn GetRedoRecPtr() -> XLogRecPtr;
}
extern "C" {
    pub fn GetInsertRecPtr() -> XLogRecPtr;
}
extern "C" {
    pub fn GetFlushRecPtr() -> XLogRecPtr;
}
extern "C" {
    pub fn GetLastImportantRecPtr() -> XLogRecPtr;
}
extern "C" {
    pub fn GetNextXidAndEpoch(xid: *mut TransactionId, epoch: *mut uint32);
}
extern "C" {
    pub fn RemovePromoteSignalFiles();
}
extern "C" {
    pub fn CheckPromoteSignal() -> bool;
}
extern "C" {
    pub fn WakeupRecovery();
}
extern "C" {
    pub fn SetWalWriterSleeping(sleeping: bool);
}
extern "C" {
    pub fn XLogRequestWalReceiverReply();
}
extern "C" {
    pub fn assign_max_wal_size(newval: ::std::os::raw::c_int, extra: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn assign_checkpoint_completion_target(newval: f64, extra: *mut ::std::os::raw::c_void);
}
pub const SessionBackupState_SESSION_BACKUP_NONE: SessionBackupState = 0;
pub const SessionBackupState_SESSION_BACKUP_EXCLUSIVE: SessionBackupState = 1;
pub const SessionBackupState_SESSION_BACKUP_NON_EXCLUSIVE: SessionBackupState = 2;
pub type SessionBackupState = u32;
extern "C" {
    pub fn do_pg_start_backup(
        backupidstr: *const ::std::os::raw::c_char,
        fast: bool,
        starttli_p: *mut TimeLineID,
        labelfile: StringInfo,
        tablespaces: *mut *mut List,
        tblspcmapfile: StringInfo,
        infotbssize: bool,
        needtblspcmapfile: bool,
    ) -> XLogRecPtr;
}
extern "C" {
    pub fn do_pg_stop_backup(
        labelfile: *mut ::std::os::raw::c_char,
        waitforarchive: bool,
        stoptli_p: *mut TimeLineID,
    ) -> XLogRecPtr;
}
extern "C" {
    pub fn do_pg_abort_backup();
}
extern "C" {
    pub fn get_backup_status() -> SessionBackupState;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FormData_pg_class {
    pub relname: NameData,
    pub relnamespace: Oid,
    pub reltype: Oid,
    pub reloftype: Oid,
    pub relowner: Oid,
    pub relam: Oid,
    pub relfilenode: Oid,
    pub reltablespace: Oid,
    pub relpages: int32,
    pub reltuples: float4,
    pub relallvisible: int32,
    pub reltoastrelid: Oid,
    pub relhasindex: bool,
    pub relisshared: bool,
    pub relpersistence: ::std::os::raw::c_char,
    pub relkind: ::std::os::raw::c_char,
    pub relnatts: int16,
    pub relchecks: int16,
    pub relhasoids: bool,
    pub relhasrules: bool,
    pub relhastriggers: bool,
    pub relhassubclass: bool,
    pub relrowsecurity: bool,
    pub relforcerowsecurity: bool,
    pub relispopulated: bool,
    pub relreplident: ::std::os::raw::c_char,
    pub relispartition: bool,
    pub relrewrite: Oid,
    pub relfrozenxid: TransactionId,
    pub relminmxid: TransactionId,
}
#[test]
fn bindgen_test_layout_FormData_pg_class() {
    assert_eq!(
        ::std::mem::size_of::<FormData_pg_class>(),
        140usize,
        concat!("Size of: ", stringify!(FormData_pg_class))
    );
    assert_eq!(
        ::std::mem::align_of::<FormData_pg_class>(),
        4usize,
        concat!("Alignment of ", stringify!(FormData_pg_class))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relnamespace as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relnamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).reltype as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(reltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).reloftype as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(reloftype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relowner as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relowner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relam as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relfilenode as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relfilenode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).reltablespace as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(reltablespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relpages as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relpages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).reltuples as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(reltuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relallvisible as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relallvisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).reltoastrelid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(reltoastrelid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relhasindex as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relhasindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relisshared as *const _ as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relisshared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_class>())).relpersistence as *const _ as usize
        },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relpersistence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relkind as *const _ as usize },
        111usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relnatts as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relnatts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relchecks as *const _ as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relchecks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relhasoids as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relhasoids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relhasrules as *const _ as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relhasrules)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_class>())).relhastriggers as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relhastriggers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_class>())).relhassubclass as *const _ as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relhassubclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_class>())).relrowsecurity as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relrowsecurity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_class>())).relforcerowsecurity as *const _ as usize
        },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relforcerowsecurity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_class>())).relispopulated as *const _ as usize
        },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relispopulated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relreplident as *const _ as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relreplident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_class>())).relispartition as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relispartition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relrewrite as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relrewrite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relfrozenxid as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relfrozenxid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_class>())).relminmxid as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_class),
            "::",
            stringify!(relminmxid)
        )
    );
}
pub type Form_pg_class = *mut FormData_pg_class;
#[repr(C)]
pub struct FormData_pg_index {
    pub indexrelid: Oid,
    pub indrelid: Oid,
    pub indnatts: int16,
    pub indnkeyatts: int16,
    pub indisunique: bool,
    pub indisprimary: bool,
    pub indisexclusion: bool,
    pub indimmediate: bool,
    pub indisclustered: bool,
    pub indisvalid: bool,
    pub indcheckxmin: bool,
    pub indisready: bool,
    pub indislive: bool,
    pub indisreplident: bool,
    pub indkey: int2vector,
}
#[test]
fn bindgen_test_layout_FormData_pg_index() {
    assert_eq!(
        ::std::mem::size_of::<FormData_pg_index>(),
        48usize,
        concat!("Size of: ", stringify!(FormData_pg_index))
    );
    assert_eq!(
        ::std::mem::align_of::<FormData_pg_index>(),
        4usize,
        concat!("Alignment of ", stringify!(FormData_pg_index))
    );
}
pub type Form_pg_index = *mut FormData_pg_index;
pub const ParseExprKind_EXPR_KIND_NONE: ParseExprKind = 0;
pub const ParseExprKind_EXPR_KIND_OTHER: ParseExprKind = 1;
pub const ParseExprKind_EXPR_KIND_JOIN_ON: ParseExprKind = 2;
pub const ParseExprKind_EXPR_KIND_JOIN_USING: ParseExprKind = 3;
pub const ParseExprKind_EXPR_KIND_FROM_SUBSELECT: ParseExprKind = 4;
pub const ParseExprKind_EXPR_KIND_FROM_FUNCTION: ParseExprKind = 5;
pub const ParseExprKind_EXPR_KIND_WHERE: ParseExprKind = 6;
pub const ParseExprKind_EXPR_KIND_HAVING: ParseExprKind = 7;
pub const ParseExprKind_EXPR_KIND_FILTER: ParseExprKind = 8;
pub const ParseExprKind_EXPR_KIND_WINDOW_PARTITION: ParseExprKind = 9;
pub const ParseExprKind_EXPR_KIND_WINDOW_ORDER: ParseExprKind = 10;
pub const ParseExprKind_EXPR_KIND_WINDOW_FRAME_RANGE: ParseExprKind = 11;
pub const ParseExprKind_EXPR_KIND_WINDOW_FRAME_ROWS: ParseExprKind = 12;
pub const ParseExprKind_EXPR_KIND_WINDOW_FRAME_GROUPS: ParseExprKind = 13;
pub const ParseExprKind_EXPR_KIND_SELECT_TARGET: ParseExprKind = 14;
pub const ParseExprKind_EXPR_KIND_INSERT_TARGET: ParseExprKind = 15;
pub const ParseExprKind_EXPR_KIND_UPDATE_SOURCE: ParseExprKind = 16;
pub const ParseExprKind_EXPR_KIND_UPDATE_TARGET: ParseExprKind = 17;
pub const ParseExprKind_EXPR_KIND_GROUP_BY: ParseExprKind = 18;
pub const ParseExprKind_EXPR_KIND_ORDER_BY: ParseExprKind = 19;
pub const ParseExprKind_EXPR_KIND_DISTINCT_ON: ParseExprKind = 20;
pub const ParseExprKind_EXPR_KIND_LIMIT: ParseExprKind = 21;
pub const ParseExprKind_EXPR_KIND_OFFSET: ParseExprKind = 22;
pub const ParseExprKind_EXPR_KIND_RETURNING: ParseExprKind = 23;
pub const ParseExprKind_EXPR_KIND_VALUES: ParseExprKind = 24;
pub const ParseExprKind_EXPR_KIND_VALUES_SINGLE: ParseExprKind = 25;
pub const ParseExprKind_EXPR_KIND_CHECK_CONSTRAINT: ParseExprKind = 26;
pub const ParseExprKind_EXPR_KIND_DOMAIN_CHECK: ParseExprKind = 27;
pub const ParseExprKind_EXPR_KIND_COLUMN_DEFAULT: ParseExprKind = 28;
pub const ParseExprKind_EXPR_KIND_FUNCTION_DEFAULT: ParseExprKind = 29;
pub const ParseExprKind_EXPR_KIND_INDEX_EXPRESSION: ParseExprKind = 30;
pub const ParseExprKind_EXPR_KIND_INDEX_PREDICATE: ParseExprKind = 31;
pub const ParseExprKind_EXPR_KIND_ALTER_COL_TRANSFORM: ParseExprKind = 32;
pub const ParseExprKind_EXPR_KIND_EXECUTE_PARAMETER: ParseExprKind = 33;
pub const ParseExprKind_EXPR_KIND_TRIGGER_WHEN: ParseExprKind = 34;
pub const ParseExprKind_EXPR_KIND_POLICY: ParseExprKind = 35;
pub const ParseExprKind_EXPR_KIND_PARTITION_EXPRESSION: ParseExprKind = 36;
pub const ParseExprKind_EXPR_KIND_CALL_ARGUMENT: ParseExprKind = 37;
pub type ParseExprKind = u32;
pub type PreParseColumnRefHook = ::std::option::Option<
    unsafe extern "C" fn(pstate: *mut ParseState, cref: *mut ColumnRef) -> *mut Node,
>;
pub type PostParseColumnRefHook = ::std::option::Option<
    unsafe extern "C" fn(
        pstate: *mut ParseState,
        cref: *mut ColumnRef,
        var: *mut Node,
    ) -> *mut Node,
>;
pub type ParseParamRefHook = ::std::option::Option<
    unsafe extern "C" fn(pstate: *mut ParseState, pref: *mut ParamRef) -> *mut Node,
>;
pub type CoerceParamHook = ::std::option::Option<
    unsafe extern "C" fn(
        pstate: *mut ParseState,
        param: *mut Param,
        targetTypeId: Oid,
        targetTypeMod: int32,
        location: ::std::os::raw::c_int,
    ) -> *mut Node,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParseState {
    pub parentParseState: *mut ParseState,
    pub p_sourcetext: *const ::std::os::raw::c_char,
    pub p_rtable: *mut List,
    pub p_joinexprs: *mut List,
    pub p_joinlist: *mut List,
    pub p_namespace: *mut List,
    pub p_lateral_active: bool,
    pub p_ctenamespace: *mut List,
    pub p_future_ctes: *mut List,
    pub p_parent_cte: *mut CommonTableExpr,
    pub p_target_relation: Relation,
    pub p_target_rangetblentry: *mut RangeTblEntry,
    pub p_is_insert: bool,
    pub p_windowdefs: *mut List,
    pub p_expr_kind: ParseExprKind,
    pub p_next_resno: ::std::os::raw::c_int,
    pub p_multiassign_exprs: *mut List,
    pub p_locking_clause: *mut List,
    pub p_locked_from_parent: bool,
    pub p_resolve_unknowns: bool,
    pub p_queryEnv: *mut QueryEnvironment,
    pub p_hasAggs: bool,
    pub p_hasWindowFuncs: bool,
    pub p_hasTargetSRFs: bool,
    pub p_hasSubLinks: bool,
    pub p_hasModifyingCTE: bool,
    pub p_last_srf: *mut Node,
    pub p_pre_columnref_hook: PreParseColumnRefHook,
    pub p_post_columnref_hook: PostParseColumnRefHook,
    pub p_paramref_hook: ParseParamRefHook,
    pub p_coerce_param_hook: CoerceParamHook,
    pub p_ref_hook_state: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ParseState() {
    assert_eq!(
        ::std::mem::size_of::<ParseState>(),
        208usize,
        concat!("Size of: ", stringify!(ParseState))
    );
    assert_eq!(
        ::std::mem::align_of::<ParseState>(),
        8usize,
        concat!("Alignment of ", stringify!(ParseState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).parentParseState as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(parentParseState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_sourcetext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_sourcetext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_rtable as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_rtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_joinexprs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_joinexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_joinlist as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_joinlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_namespace as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_namespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_lateral_active as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_lateral_active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_ctenamespace as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_ctenamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_future_ctes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_future_ctes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_parent_cte as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_parent_cte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_target_relation as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_target_relation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseState>())).p_target_rangetblentry as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_target_rangetblentry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_is_insert as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_is_insert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_windowdefs as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_windowdefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_expr_kind as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_expr_kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_next_resno as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_next_resno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_multiassign_exprs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_multiassign_exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_locking_clause as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_locking_clause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_locked_from_parent as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_locked_from_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_resolve_unknowns as *const _ as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_resolve_unknowns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_queryEnv as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_queryEnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasAggs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasAggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasWindowFuncs as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasWindowFuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasTargetSRFs as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasTargetSRFs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasSubLinks as *const _ as usize },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasSubLinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasModifyingCTE as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasModifyingCTE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_last_srf as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_last_srf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_pre_columnref_hook as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_pre_columnref_hook)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseState>())).p_post_columnref_hook as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_post_columnref_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_paramref_hook as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_paramref_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_coerce_param_hook as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_coerce_param_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_ref_hook_state as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_ref_hook_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParseNamespaceItem {
    pub p_rte: *mut RangeTblEntry,
    pub p_rel_visible: bool,
    pub p_cols_visible: bool,
    pub p_lateral_only: bool,
    pub p_lateral_ok: bool,
}
#[test]
fn bindgen_test_layout_ParseNamespaceItem() {
    assert_eq!(
        ::std::mem::size_of::<ParseNamespaceItem>(),
        16usize,
        concat!("Size of: ", stringify!(ParseNamespaceItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ParseNamespaceItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ParseNamespaceItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseNamespaceItem>())).p_rte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_rte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseNamespaceItem>())).p_rel_visible as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_rel_visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseNamespaceItem>())).p_cols_visible as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_cols_visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseNamespaceItem>())).p_lateral_only as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_lateral_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseNamespaceItem>())).p_lateral_ok as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_lateral_ok)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParseCallbackState {
    pub pstate: *mut ParseState,
    pub location: ::std::os::raw::c_int,
    pub errcallback: ErrorContextCallback,
}
#[test]
fn bindgen_test_layout_ParseCallbackState() {
    assert_eq!(
        ::std::mem::size_of::<ParseCallbackState>(),
        40usize,
        concat!("Size of: ", stringify!(ParseCallbackState))
    );
    assert_eq!(
        ::std::mem::align_of::<ParseCallbackState>(),
        8usize,
        concat!("Alignment of ", stringify!(ParseCallbackState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseCallbackState>())).pstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseCallbackState),
            "::",
            stringify!(pstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseCallbackState>())).location as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseCallbackState),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseCallbackState>())).errcallback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseCallbackState),
            "::",
            stringify!(errcallback)
        )
    );
}
extern "C" {
    pub fn make_parsestate(parentParseState: *mut ParseState) -> *mut ParseState;
}
extern "C" {
    pub fn free_parsestate(pstate: *mut ParseState);
}
extern "C" {
    pub fn parser_errposition(
        pstate: *mut ParseState,
        location: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setup_parser_errposition_callback(
        pcbstate: *mut ParseCallbackState,
        pstate: *mut ParseState,
        location: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cancel_parser_errposition_callback(pcbstate: *mut ParseCallbackState);
}
extern "C" {
    pub fn make_var(
        pstate: *mut ParseState,
        rte: *mut RangeTblEntry,
        attrno: ::std::os::raw::c_int,
        location: ::std::os::raw::c_int,
    ) -> *mut Var;
}
extern "C" {
    pub fn transformArrayType(arrayType: *mut Oid, arrayTypmod: *mut int32) -> Oid;
}
extern "C" {
    pub fn transformArraySubscripts(
        pstate: *mut ParseState,
        arrayBase: *mut Node,
        arrayType: Oid,
        elementType: Oid,
        arrayTypMod: int32,
        indirection: *mut List,
        assignFrom: *mut Node,
    ) -> *mut ArrayRef;
}
extern "C" {
    pub fn make_const(
        pstate: *mut ParseState,
        value: *mut Value,
        location: ::std::os::raw::c_int,
    ) -> *mut Const;
}
pub type EOM_get_flat_size_method =
    ::std::option::Option<unsafe extern "C" fn(eohptr: *mut ExpandedObjectHeader) -> Size>;
pub type EOM_flatten_into_method = ::std::option::Option<
    unsafe extern "C" fn(
        eohptr: *mut ExpandedObjectHeader,
        result: *mut ::std::os::raw::c_void,
        allocated_size: Size,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExpandedObjectMethods {
    pub get_flat_size: EOM_get_flat_size_method,
    pub flatten_into: EOM_flatten_into_method,
}
#[test]
fn bindgen_test_layout_ExpandedObjectMethods() {
    assert_eq!(
        ::std::mem::size_of::<ExpandedObjectMethods>(),
        16usize,
        concat!("Size of: ", stringify!(ExpandedObjectMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<ExpandedObjectMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(ExpandedObjectMethods))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedObjectMethods>())).get_flat_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectMethods),
            "::",
            stringify!(get_flat_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedObjectMethods>())).flatten_into as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectMethods),
            "::",
            stringify!(flatten_into)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExpandedObjectHeader {
    pub vl_len_: int32,
    pub eoh_methods: *const ExpandedObjectMethods,
    pub eoh_context: MemoryContext,
    pub eoh_rw_ptr: [::std::os::raw::c_char; 10usize],
    pub eoh_ro_ptr: [::std::os::raw::c_char; 10usize],
}
#[test]
fn bindgen_test_layout_ExpandedObjectHeader() {
    assert_eq!(
        ::std::mem::size_of::<ExpandedObjectHeader>(),
        48usize,
        concat!("Size of: ", stringify!(ExpandedObjectHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ExpandedObjectHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ExpandedObjectHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedObjectHeader>())).vl_len_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(vl_len_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedObjectHeader>())).eoh_methods as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(eoh_methods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedObjectHeader>())).eoh_context as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(eoh_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedObjectHeader>())).eoh_rw_ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(eoh_rw_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedObjectHeader>())).eoh_ro_ptr as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(eoh_ro_ptr)
        )
    );
}
extern "C" {
    pub fn DatumGetEOHP(d: Datum) -> *mut ExpandedObjectHeader;
}
extern "C" {
    pub fn EOH_init_header(
        eohptr: *mut ExpandedObjectHeader,
        methods: *const ExpandedObjectMethods,
        obj_context: MemoryContext,
    );
}
extern "C" {
    pub fn EOH_get_flat_size(eohptr: *mut ExpandedObjectHeader) -> Size;
}
extern "C" {
    pub fn EOH_flatten_into(
        eohptr: *mut ExpandedObjectHeader,
        result: *mut ::std::os::raw::c_void,
        allocated_size: Size,
    );
}
extern "C" {
    pub fn MakeExpandedObjectReadOnlyInternal(d: Datum) -> Datum;
}
extern "C" {
    pub fn TransferExpandedObject(d: Datum, new_parent: MemoryContext) -> Datum;
}
extern "C" {
    pub fn DeleteExpandedObject(d: Datum);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayType {
    pub vl_len_: int32,
    pub ndim: ::std::os::raw::c_int,
    pub dataoffset: int32,
    pub elemtype: Oid,
}
#[test]
fn bindgen_test_layout_ArrayType() {
    assert_eq!(
        ::std::mem::size_of::<ArrayType>(),
        16usize,
        concat!("Size of: ", stringify!(ArrayType))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayType>(),
        4usize,
        concat!("Alignment of ", stringify!(ArrayType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayType>())).vl_len_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayType),
            "::",
            stringify!(vl_len_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayType>())).ndim as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayType),
            "::",
            stringify!(ndim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayType>())).dataoffset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayType),
            "::",
            stringify!(dataoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayType>())).elemtype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayType),
            "::",
            stringify!(elemtype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExpandedArrayHeader {
    pub hdr: ExpandedObjectHeader,
    pub ea_magic: ::std::os::raw::c_int,
    pub ndims: ::std::os::raw::c_int,
    pub dims: *mut ::std::os::raw::c_int,
    pub lbound: *mut ::std::os::raw::c_int,
    pub element_type: Oid,
    pub typlen: int16,
    pub typbyval: bool,
    pub typalign: ::std::os::raw::c_char,
    pub dvalues: *mut Datum,
    pub dnulls: *mut bool,
    pub dvalueslen: ::std::os::raw::c_int,
    pub nelems: ::std::os::raw::c_int,
    pub flat_size: Size,
    pub fvalue: *mut ArrayType,
    pub fstartptr: *mut ::std::os::raw::c_char,
    pub fendptr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ExpandedArrayHeader() {
    assert_eq!(
        ::std::mem::size_of::<ExpandedArrayHeader>(),
        136usize,
        concat!("Size of: ", stringify!(ExpandedArrayHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ExpandedArrayHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ExpandedArrayHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).ea_magic as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(ea_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).ndims as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(ndims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).dims as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).lbound as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(lbound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedArrayHeader>())).element_type as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).typlen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(typlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).typbyval as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(typbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).typalign as *const _ as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(typalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).dvalues as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(dvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).dnulls as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(dnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).dvalueslen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(dvalueslen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).nelems as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(nelems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).flat_size as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(flat_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).fvalue as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(fvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).fstartptr as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(fstartptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).fendptr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(fendptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AnyArrayType {
    pub flt: ArrayType,
    pub xpn: ExpandedArrayHeader,
    _bindgen_union_align: [u64; 17usize],
}
#[test]
fn bindgen_test_layout_AnyArrayType() {
    assert_eq!(
        ::std::mem::size_of::<AnyArrayType>(),
        136usize,
        concat!("Size of: ", stringify!(AnyArrayType))
    );
    assert_eq!(
        ::std::mem::align_of::<AnyArrayType>(),
        8usize,
        concat!("Alignment of ", stringify!(AnyArrayType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AnyArrayType>())).flt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AnyArrayType),
            "::",
            stringify!(flt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AnyArrayType>())).xpn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AnyArrayType),
            "::",
            stringify!(xpn)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayBuildState {
    pub mcontext: MemoryContext,
    pub dvalues: *mut Datum,
    pub dnulls: *mut bool,
    pub alen: ::std::os::raw::c_int,
    pub nelems: ::std::os::raw::c_int,
    pub element_type: Oid,
    pub typlen: int16,
    pub typbyval: bool,
    pub typalign: ::std::os::raw::c_char,
    pub private_cxt: bool,
}
#[test]
fn bindgen_test_layout_ArrayBuildState() {
    assert_eq!(
        ::std::mem::size_of::<ArrayBuildState>(),
        48usize,
        concat!("Size of: ", stringify!(ArrayBuildState))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayBuildState>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayBuildState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).mcontext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(mcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).dvalues as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(dvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).dnulls as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(dnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).alen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(alen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).nelems as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(nelems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).element_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).typlen as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(typlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).typbyval as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(typbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).typalign as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(typalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).private_cxt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(private_cxt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayBuildStateArr {
    pub mcontext: MemoryContext,
    pub data: *mut ::std::os::raw::c_char,
    pub nullbitmap: *mut bits8,
    pub abytes: ::std::os::raw::c_int,
    pub nbytes: ::std::os::raw::c_int,
    pub aitems: ::std::os::raw::c_int,
    pub nitems: ::std::os::raw::c_int,
    pub ndims: ::std::os::raw::c_int,
    pub dims: [::std::os::raw::c_int; 6usize],
    pub lbs: [::std::os::raw::c_int; 6usize],
    pub array_type: Oid,
    pub element_type: Oid,
    pub private_cxt: bool,
}
#[test]
fn bindgen_test_layout_ArrayBuildStateArr() {
    assert_eq!(
        ::std::mem::size_of::<ArrayBuildStateArr>(),
        104usize,
        concat!("Size of: ", stringify!(ArrayBuildStateArr))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayBuildStateArr>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayBuildStateArr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).mcontext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(mcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).nullbitmap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(nullbitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).abytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(abytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).nbytes as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).aitems as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(aitems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).nitems as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(nitems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).ndims as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(ndims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).dims as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).lbs as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(lbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).array_type as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(array_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).element_type as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).private_cxt as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(private_cxt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayBuildStateAny {
    pub scalarstate: *mut ArrayBuildState,
    pub arraystate: *mut ArrayBuildStateArr,
}
#[test]
fn bindgen_test_layout_ArrayBuildStateAny() {
    assert_eq!(
        ::std::mem::size_of::<ArrayBuildStateAny>(),
        16usize,
        concat!("Size of: ", stringify!(ArrayBuildStateAny))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayBuildStateAny>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayBuildStateAny))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateAny>())).scalarstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateAny),
            "::",
            stringify!(scalarstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateAny>())).arraystate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateAny),
            "::",
            stringify!(arraystate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayMetaState {
    pub element_type: Oid,
    pub typlen: int16,
    pub typbyval: bool,
    pub typalign: ::std::os::raw::c_char,
    pub typdelim: ::std::os::raw::c_char,
    pub typioparam: Oid,
    pub typiofunc: Oid,
    pub proc_: FmgrInfo,
}
#[test]
fn bindgen_test_layout_ArrayMetaState() {
    assert_eq!(
        ::std::mem::size_of::<ArrayMetaState>(),
        72usize,
        concat!("Size of: ", stringify!(ArrayMetaState))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayMetaState>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayMetaState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).element_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typlen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typbyval as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typalign as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typdelim as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typdelim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typioparam as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typioparam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typiofunc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typiofunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).proc_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(proc_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayMapState {
    pub inp_extra: ArrayMetaState,
    pub ret_extra: ArrayMetaState,
}
#[test]
fn bindgen_test_layout_ArrayMapState() {
    assert_eq!(
        ::std::mem::size_of::<ArrayMapState>(),
        144usize,
        concat!("Size of: ", stringify!(ArrayMapState))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayMapState>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayMapState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMapState>())).inp_extra as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMapState),
            "::",
            stringify!(inp_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMapState>())).ret_extra as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMapState),
            "::",
            stringify!(ret_extra)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArrayIteratorData {
    _unused: [u8; 0],
}
pub type ArrayIterator = *mut ArrayIteratorData;
extern "C" {
    #[link_name = "\u{1}Array_nulls"]
    pub static mut Array_nulls: bool;
}
extern "C" {
    pub fn CopyArrayEls(
        array: *mut ArrayType,
        values: *mut Datum,
        nulls: *mut bool,
        nitems: ::std::os::raw::c_int,
        typlen: ::std::os::raw::c_int,
        typbyval: bool,
        typalign: ::std::os::raw::c_char,
        freedata: bool,
    );
}
extern "C" {
    pub fn array_get_element(
        arraydatum: Datum,
        nSubscripts: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
        isNull: *mut bool,
    ) -> Datum;
}
extern "C" {
    pub fn array_set_element(
        arraydatum: Datum,
        nSubscripts: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        dataValue: Datum,
        isNull: bool,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
    ) -> Datum;
}
extern "C" {
    pub fn array_get_slice(
        arraydatum: Datum,
        nSubscripts: ::std::os::raw::c_int,
        upperIndx: *mut ::std::os::raw::c_int,
        lowerIndx: *mut ::std::os::raw::c_int,
        upperProvided: *mut bool,
        lowerProvided: *mut bool,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
    ) -> Datum;
}
extern "C" {
    pub fn array_set_slice(
        arraydatum: Datum,
        nSubscripts: ::std::os::raw::c_int,
        upperIndx: *mut ::std::os::raw::c_int,
        lowerIndx: *mut ::std::os::raw::c_int,
        upperProvided: *mut bool,
        lowerProvided: *mut bool,
        srcArrayDatum: Datum,
        isNull: bool,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
    ) -> Datum;
}
extern "C" {
    pub fn array_ref(
        array: *mut ArrayType,
        nSubscripts: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
        isNull: *mut bool,
    ) -> Datum;
}
extern "C" {
    pub fn array_set(
        array: *mut ArrayType,
        nSubscripts: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        dataValue: Datum,
        isNull: bool,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
    ) -> *mut ArrayType;
}
extern "C" {
    pub fn array_map(
        arrayd: Datum,
        exprstate: *mut ExprState,
        econtext: *mut ExprContext,
        retType: Oid,
        amstate: *mut ArrayMapState,
    ) -> Datum;
}
extern "C" {
    pub fn array_bitmap_copy(
        destbitmap: *mut bits8,
        destoffset: ::std::os::raw::c_int,
        srcbitmap: *const bits8,
        srcoffset: ::std::os::raw::c_int,
        nitems: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn construct_array(
        elems: *mut Datum,
        nelems: ::std::os::raw::c_int,
        elmtype: Oid,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
    ) -> *mut ArrayType;
}
extern "C" {
    pub fn construct_md_array(
        elems: *mut Datum,
        nulls: *mut bool,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        lbs: *mut ::std::os::raw::c_int,
        elmtype: Oid,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
    ) -> *mut ArrayType;
}
extern "C" {
    pub fn construct_empty_array(elmtype: Oid) -> *mut ArrayType;
}
extern "C" {
    pub fn construct_empty_expanded_array(
        element_type: Oid,
        parentcontext: MemoryContext,
        metacache: *mut ArrayMetaState,
    ) -> *mut ExpandedArrayHeader;
}
extern "C" {
    pub fn deconstruct_array(
        array: *mut ArrayType,
        elmtype: Oid,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool,
        elmalign: ::std::os::raw::c_char,
        elemsp: *mut *mut Datum,
        nullsp: *mut *mut bool,
        nelemsp: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn array_contains_nulls(array: *mut ArrayType) -> bool;
}
extern "C" {
    pub fn initArrayResult(
        element_type: Oid,
        rcontext: MemoryContext,
        subcontext: bool,
    ) -> *mut ArrayBuildState;
}
extern "C" {
    pub fn accumArrayResult(
        astate: *mut ArrayBuildState,
        dvalue: Datum,
        disnull: bool,
        element_type: Oid,
        rcontext: MemoryContext,
    ) -> *mut ArrayBuildState;
}
extern "C" {
    pub fn makeArrayResult(astate: *mut ArrayBuildState, rcontext: MemoryContext) -> Datum;
}
extern "C" {
    pub fn makeMdArrayResult(
        astate: *mut ArrayBuildState,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        lbs: *mut ::std::os::raw::c_int,
        rcontext: MemoryContext,
        release: bool,
    ) -> Datum;
}
extern "C" {
    pub fn initArrayResultArr(
        array_type: Oid,
        element_type: Oid,
        rcontext: MemoryContext,
        subcontext: bool,
    ) -> *mut ArrayBuildStateArr;
}
extern "C" {
    pub fn accumArrayResultArr(
        astate: *mut ArrayBuildStateArr,
        dvalue: Datum,
        disnull: bool,
        array_type: Oid,
        rcontext: MemoryContext,
    ) -> *mut ArrayBuildStateArr;
}
extern "C" {
    pub fn makeArrayResultArr(
        astate: *mut ArrayBuildStateArr,
        rcontext: MemoryContext,
        release: bool,
    ) -> Datum;
}
extern "C" {
    pub fn initArrayResultAny(
        input_type: Oid,
        rcontext: MemoryContext,
        subcontext: bool,
    ) -> *mut ArrayBuildStateAny;
}
extern "C" {
    pub fn accumArrayResultAny(
        astate: *mut ArrayBuildStateAny,
        dvalue: Datum,
        disnull: bool,
        input_type: Oid,
        rcontext: MemoryContext,
    ) -> *mut ArrayBuildStateAny;
}
extern "C" {
    pub fn makeArrayResultAny(
        astate: *mut ArrayBuildStateAny,
        rcontext: MemoryContext,
        release: bool,
    ) -> Datum;
}
extern "C" {
    pub fn array_create_iterator(
        arr: *mut ArrayType,
        slice_ndim: ::std::os::raw::c_int,
        mstate: *mut ArrayMetaState,
    ) -> ArrayIterator;
}
extern "C" {
    pub fn array_iterate(iterator: ArrayIterator, value: *mut Datum, isnull: *mut bool) -> bool;
}
extern "C" {
    pub fn array_free_iterator(iterator: ArrayIterator);
}
extern "C" {
    pub fn ArrayGetOffset(
        n: ::std::os::raw::c_int,
        dim: *const ::std::os::raw::c_int,
        lb: *const ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ArrayGetOffset0(
        n: ::std::os::raw::c_int,
        tup: *const ::std::os::raw::c_int,
        scale: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ArrayGetNItems(
        ndim: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mda_get_range(
        n: ::std::os::raw::c_int,
        span: *mut ::std::os::raw::c_int,
        st: *const ::std::os::raw::c_int,
        endp: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mda_get_prod(
        n: ::std::os::raw::c_int,
        range: *const ::std::os::raw::c_int,
        prod: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mda_get_offset_values(
        n: ::std::os::raw::c_int,
        dist: *mut ::std::os::raw::c_int,
        prod: *const ::std::os::raw::c_int,
        span: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mda_next_tuple(
        n: ::std::os::raw::c_int,
        curr: *mut ::std::os::raw::c_int,
        span: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ArrayGetIntegerTypmods(arr: *mut ArrayType, n: *mut ::std::os::raw::c_int)
        -> *mut int32;
}
extern "C" {
    pub fn expand_array(
        arraydatum: Datum,
        parentcontext: MemoryContext,
        metacache: *mut ArrayMetaState,
    ) -> Datum;
}
extern "C" {
    pub fn DatumGetExpandedArray(d: Datum) -> *mut ExpandedArrayHeader;
}
extern "C" {
    pub fn DatumGetExpandedArrayX(
        d: Datum,
        metacache: *mut ArrayMetaState,
    ) -> *mut ExpandedArrayHeader;
}
extern "C" {
    pub fn DatumGetAnyArrayP(d: Datum) -> *mut AnyArrayType;
}
extern "C" {
    pub fn deconstruct_expanded_array(eah: *mut ExpandedArrayHeader);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AclItem {
    pub ai_grantee: Oid,
    pub ai_grantor: Oid,
    pub ai_privs: AclMode,
}
#[test]
fn bindgen_test_layout_AclItem() {
    assert_eq!(
        ::std::mem::size_of::<AclItem>(),
        12usize,
        concat!("Size of: ", stringify!(AclItem))
    );
    assert_eq!(
        ::std::mem::align_of::<AclItem>(),
        4usize,
        concat!("Alignment of ", stringify!(AclItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AclItem>())).ai_grantee as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AclItem),
            "::",
            stringify!(ai_grantee)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AclItem>())).ai_grantor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AclItem),
            "::",
            stringify!(ai_grantor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AclItem>())).ai_privs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AclItem),
            "::",
            stringify!(ai_privs)
        )
    );
}
pub type Acl = ArrayType;
pub const AclMaskHow_ACLMASK_ALL: AclMaskHow = 0;
pub const AclMaskHow_ACLMASK_ANY: AclMaskHow = 1;
pub type AclMaskHow = u32;
pub const AclResult_ACLCHECK_OK: AclResult = 0;
pub const AclResult_ACLCHECK_NO_PRIV: AclResult = 1;
pub const AclResult_ACLCHECK_NOT_OWNER: AclResult = 2;
pub type AclResult = u32;
extern "C" {
    pub fn acldefault(objtype: ObjectType, ownerId: Oid) -> *mut Acl;
}
extern "C" {
    pub fn get_user_default_acl(objtype: ObjectType, ownerId: Oid, nsp_oid: Oid) -> *mut Acl;
}
extern "C" {
    pub fn recordDependencyOnNewAcl(
        classId: Oid,
        objectId: Oid,
        objsubId: int32,
        ownerId: Oid,
        acl: *mut Acl,
    );
}
extern "C" {
    pub fn aclupdate(
        old_acl: *const Acl,
        mod_aip: *const AclItem,
        modechg: ::std::os::raw::c_int,
        ownerId: Oid,
        behavior: DropBehavior,
    ) -> *mut Acl;
}
extern "C" {
    pub fn aclnewowner(old_acl: *const Acl, oldOwnerId: Oid, newOwnerId: Oid) -> *mut Acl;
}
extern "C" {
    pub fn make_empty_acl() -> *mut Acl;
}
extern "C" {
    pub fn aclcopy(orig_acl: *const Acl) -> *mut Acl;
}
extern "C" {
    pub fn aclconcat(left_acl: *const Acl, right_acl: *const Acl) -> *mut Acl;
}
extern "C" {
    pub fn aclmerge(left_acl: *const Acl, right_acl: *const Acl, ownerId: Oid) -> *mut Acl;
}
extern "C" {
    pub fn aclitemsort(acl: *mut Acl);
}
extern "C" {
    pub fn aclequal(left_acl: *const Acl, right_acl: *const Acl) -> bool;
}
extern "C" {
    pub fn aclmask(
        acl: *const Acl,
        roleid: Oid,
        ownerId: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn aclmembers(acl: *const Acl, roleids: *mut *mut Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_privs_of_role(member: Oid, role: Oid) -> bool;
}
extern "C" {
    pub fn is_member_of_role(member: Oid, role: Oid) -> bool;
}
extern "C" {
    pub fn is_member_of_role_nosuper(member: Oid, role: Oid) -> bool;
}
extern "C" {
    pub fn is_admin_of_role(member: Oid, role: Oid) -> bool;
}
extern "C" {
    pub fn check_is_member_of_role(member: Oid, role: Oid);
}
extern "C" {
    pub fn get_role_oid(rolename: *const ::std::os::raw::c_char, missing_ok: bool) -> Oid;
}
extern "C" {
    pub fn get_role_oid_or_public(rolename: *const ::std::os::raw::c_char) -> Oid;
}
extern "C" {
    pub fn get_rolespec_oid(role: *const RoleSpec, missing_ok: bool) -> Oid;
}
extern "C" {
    pub fn check_rolespec_name(role: *const RoleSpec, detail_msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_rolespec_tuple(role: *const RoleSpec) -> HeapTuple;
}
extern "C" {
    pub fn get_rolespec_name(role: *const RoleSpec) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn select_best_grantor(
        roleId: Oid,
        privileges: AclMode,
        acl: *const Acl,
        ownerId: Oid,
        grantorId: *mut Oid,
        grantOptions: *mut AclMode,
    );
}
extern "C" {
    pub fn initialize_acl();
}
extern "C" {
    pub fn ExecuteGrantStmt(stmt: *mut GrantStmt);
}
extern "C" {
    pub fn ExecAlterDefaultPrivilegesStmt(
        pstate: *mut ParseState,
        stmt: *mut AlterDefaultPrivilegesStmt,
    );
}
extern "C" {
    pub fn RemoveRoleFromObjectACL(roleid: Oid, classid: Oid, objid: Oid);
}
extern "C" {
    pub fn RemoveDefaultACLById(defaclOid: Oid);
}
extern "C" {
    pub fn pg_attribute_aclmask(
        table_oid: Oid,
        attnum: AttrNumber,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_class_aclmask(table_oid: Oid, roleid: Oid, mask: AclMode, how: AclMaskHow)
        -> AclMode;
}
extern "C" {
    pub fn pg_database_aclmask(db_oid: Oid, roleid: Oid, mask: AclMode, how: AclMaskHow)
        -> AclMode;
}
extern "C" {
    pub fn pg_proc_aclmask(proc_oid: Oid, roleid: Oid, mask: AclMode, how: AclMaskHow) -> AclMode;
}
extern "C" {
    pub fn pg_language_aclmask(
        lang_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_largeobject_aclmask_snapshot(
        lobj_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
        snapshot: Snapshot,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_namespace_aclmask(
        nsp_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_tablespace_aclmask(
        spc_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_foreign_data_wrapper_aclmask(
        fdw_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_foreign_server_aclmask(
        srv_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_type_aclmask(type_oid: Oid, roleid: Oid, mask: AclMode, how: AclMaskHow) -> AclMode;
}
extern "C" {
    pub fn pg_attribute_aclcheck(
        table_oid: Oid,
        attnum: AttrNumber,
        roleid: Oid,
        mode: AclMode,
    ) -> AclResult;
}
extern "C" {
    pub fn pg_attribute_aclcheck_all(
        table_oid: Oid,
        roleid: Oid,
        mode: AclMode,
        how: AclMaskHow,
    ) -> AclResult;
}
extern "C" {
    pub fn pg_class_aclcheck(table_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_database_aclcheck(db_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_proc_aclcheck(proc_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_language_aclcheck(lang_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_largeobject_aclcheck_snapshot(
        lang_oid: Oid,
        roleid: Oid,
        mode: AclMode,
        snapshot: Snapshot,
    ) -> AclResult;
}
extern "C" {
    pub fn pg_namespace_aclcheck(nsp_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_tablespace_aclcheck(spc_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_foreign_data_wrapper_aclcheck(fdw_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_foreign_server_aclcheck(srv_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_type_aclcheck(type_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn aclcheck_error(
        aclerr: AclResult,
        objtype: ObjectType,
        objectname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn aclcheck_error_col(
        aclerr: AclResult,
        objtype: ObjectType,
        objectname: *const ::std::os::raw::c_char,
        colname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn aclcheck_error_type(aclerr: AclResult, typeOid: Oid);
}
extern "C" {
    pub fn recordExtObjInitPriv(objoid: Oid, classoid: Oid);
}
extern "C" {
    pub fn removeExtObjInitPriv(objoid: Oid, classoid: Oid);
}
extern "C" {
    pub fn pg_class_ownercheck(class_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_type_ownercheck(type_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_oper_ownercheck(oper_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_proc_ownercheck(proc_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_language_ownercheck(lan_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_largeobject_ownercheck(lobj_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_namespace_ownercheck(nsp_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_tablespace_ownercheck(spc_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_opclass_ownercheck(opc_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_opfamily_ownercheck(opf_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_database_ownercheck(db_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_collation_ownercheck(coll_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_conversion_ownercheck(conv_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_ts_dict_ownercheck(dict_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_ts_config_ownercheck(cfg_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_foreign_data_wrapper_ownercheck(srv_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_foreign_server_ownercheck(srv_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_event_trigger_ownercheck(et_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_extension_ownercheck(ext_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_publication_ownercheck(pub_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_subscription_ownercheck(sub_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn pg_statistics_object_ownercheck(stat_oid: Oid, roleid: Oid) -> bool;
}
extern "C" {
    pub fn has_createrole_privilege(roleid: Oid) -> bool;
}
extern "C" {
    pub fn has_bypassrls_privilege(roleid: Oid) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ObjectAddress {
    pub classId: Oid,
    pub objectId: Oid,
    pub objectSubId: int32,
}
#[test]
fn bindgen_test_layout_ObjectAddress() {
    assert_eq!(
        ::std::mem::size_of::<ObjectAddress>(),
        12usize,
        concat!("Size of: ", stringify!(ObjectAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<ObjectAddress>(),
        4usize,
        concat!("Alignment of ", stringify!(ObjectAddress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectAddress>())).classId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectAddress),
            "::",
            stringify!(classId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectAddress>())).objectId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectAddress),
            "::",
            stringify!(objectId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectAddress>())).objectSubId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectAddress),
            "::",
            stringify!(objectSubId)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}InvalidObjectAddress"]
    pub static InvalidObjectAddress: ObjectAddress;
}
extern "C" {
    pub fn get_object_address(
        objtype: ObjectType,
        object: *mut Node,
        relp: *mut Relation,
        lockmode: LOCKMODE,
        missing_ok: bool,
    ) -> ObjectAddress;
}
extern "C" {
    pub fn get_object_address_rv(
        objtype: ObjectType,
        rel: *mut RangeVar,
        object: *mut List,
        relp: *mut Relation,
        lockmode: LOCKMODE,
        missing_ok: bool,
    ) -> ObjectAddress;
}
extern "C" {
    pub fn check_object_ownership(
        roleid: Oid,
        objtype: ObjectType,
        address: ObjectAddress,
        object: *mut Node,
        relation: Relation,
    );
}
extern "C" {
    pub fn get_object_namespace(address: *const ObjectAddress) -> Oid;
}
extern "C" {
    pub fn is_objectclass_supported(class_id: Oid) -> bool;
}
extern "C" {
    pub fn get_object_oid_index(class_id: Oid) -> Oid;
}
extern "C" {
    pub fn get_object_catcache_oid(class_id: Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_object_catcache_name(class_id: Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_object_attnum_name(class_id: Oid) -> AttrNumber;
}
extern "C" {
    pub fn get_object_attnum_namespace(class_id: Oid) -> AttrNumber;
}
extern "C" {
    pub fn get_object_attnum_owner(class_id: Oid) -> AttrNumber;
}
extern "C" {
    pub fn get_object_attnum_acl(class_id: Oid) -> AttrNumber;
}
extern "C" {
    pub fn get_object_type(class_id: Oid, object_id: Oid) -> ObjectType;
}
extern "C" {
    pub fn get_object_namensp_unique(class_id: Oid) -> bool;
}
extern "C" {
    pub fn get_catalog_object_by_oid(catalog: Relation, objectId: Oid) -> HeapTuple;
}
extern "C" {
    pub fn getObjectDescription(object: *const ObjectAddress) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getObjectDescriptionOids(classid: Oid, objid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_objtype_from_string(
        objtype: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getObjectTypeDescription(object: *const ObjectAddress) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getObjectIdentity(address: *const ObjectAddress) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getObjectIdentityParts(
        address: *const ObjectAddress,
        objname: *mut *mut List,
        objargs: *mut *mut List,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlist_to_textarray(list: *mut List) -> *mut ArrayType;
}
extern "C" {
    pub fn get_relkind_objtype(relkind: ::std::os::raw::c_char) -> ObjectType;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FormData_pg_publication {
    pub pubname: NameData,
    pub pubowner: Oid,
    pub puballtables: bool,
    pub pubinsert: bool,
    pub pubupdate: bool,
    pub pubdelete: bool,
    pub pubtruncate: bool,
}
#[test]
fn bindgen_test_layout_FormData_pg_publication() {
    assert_eq!(
        ::std::mem::size_of::<FormData_pg_publication>(),
        76usize,
        concat!("Size of: ", stringify!(FormData_pg_publication))
    );
    assert_eq!(
        ::std::mem::align_of::<FormData_pg_publication>(),
        4usize,
        concat!("Alignment of ", stringify!(FormData_pg_publication))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_publication>())).pubname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_publication),
            "::",
            stringify!(pubname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_publication>())).pubowner as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_publication),
            "::",
            stringify!(pubowner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_publication>())).puballtables as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_publication),
            "::",
            stringify!(puballtables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_publication>())).pubinsert as *const _ as usize
        },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_publication),
            "::",
            stringify!(pubinsert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_publication>())).pubupdate as *const _ as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_publication),
            "::",
            stringify!(pubupdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_publication>())).pubdelete as *const _ as usize
        },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_publication),
            "::",
            stringify!(pubdelete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_publication>())).pubtruncate as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_publication),
            "::",
            stringify!(pubtruncate)
        )
    );
}
pub type Form_pg_publication = *mut FormData_pg_publication;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PublicationActions {
    pub pubinsert: bool,
    pub pubupdate: bool,
    pub pubdelete: bool,
    pub pubtruncate: bool,
}
#[test]
fn bindgen_test_layout_PublicationActions() {
    assert_eq!(
        ::std::mem::size_of::<PublicationActions>(),
        4usize,
        concat!("Size of: ", stringify!(PublicationActions))
    );
    assert_eq!(
        ::std::mem::align_of::<PublicationActions>(),
        1usize,
        concat!("Alignment of ", stringify!(PublicationActions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PublicationActions>())).pubinsert as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PublicationActions),
            "::",
            stringify!(pubinsert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PublicationActions>())).pubupdate as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(PublicationActions),
            "::",
            stringify!(pubupdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PublicationActions>())).pubdelete as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PublicationActions),
            "::",
            stringify!(pubdelete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PublicationActions>())).pubtruncate as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(PublicationActions),
            "::",
            stringify!(pubtruncate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Publication {
    pub oid: Oid,
    pub name: *mut ::std::os::raw::c_char,
    pub alltables: bool,
    pub pubactions: PublicationActions,
}
#[test]
fn bindgen_test_layout_Publication() {
    assert_eq!(
        ::std::mem::size_of::<Publication>(),
        24usize,
        concat!("Size of: ", stringify!(Publication))
    );
    assert_eq!(
        ::std::mem::align_of::<Publication>(),
        8usize,
        concat!("Alignment of ", stringify!(Publication))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Publication>())).oid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Publication),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Publication>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Publication),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Publication>())).alltables as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Publication),
            "::",
            stringify!(alltables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Publication>())).pubactions as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(Publication),
            "::",
            stringify!(pubactions)
        )
    );
}
extern "C" {
    pub fn GetPublication(pubid: Oid) -> *mut Publication;
}
extern "C" {
    pub fn GetPublicationByName(
        pubname: *const ::std::os::raw::c_char,
        missing_ok: bool,
    ) -> *mut Publication;
}
extern "C" {
    pub fn GetRelationPublications(relid: Oid) -> *mut List;
}
extern "C" {
    pub fn GetPublicationRelations(pubid: Oid) -> *mut List;
}
extern "C" {
    pub fn GetAllTablesPublications() -> *mut List;
}
extern "C" {
    pub fn GetAllTablesPublicationRelations() -> *mut List;
}
extern "C" {
    pub fn is_publishable_relation(rel: Relation) -> bool;
}
extern "C" {
    pub fn publication_add_relation(
        pubid: Oid,
        targetrel: Relation,
        if_not_exists: bool,
    ) -> ObjectAddress;
}
extern "C" {
    pub fn get_publication_oid(pubname: *const ::std::os::raw::c_char, missing_ok: bool) -> Oid;
}
extern "C" {
    pub fn get_publication_name(pubid: Oid) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RewriteRule {
    pub ruleId: Oid,
    pub event: CmdType,
    pub qual: *mut Node,
    pub actions: *mut List,
    pub enabled: ::std::os::raw::c_char,
    pub isInstead: bool,
}
#[test]
fn bindgen_test_layout_RewriteRule() {
    assert_eq!(
        ::std::mem::size_of::<RewriteRule>(),
        32usize,
        concat!("Size of: ", stringify!(RewriteRule))
    );
    assert_eq!(
        ::std::mem::align_of::<RewriteRule>(),
        8usize,
        concat!("Alignment of ", stringify!(RewriteRule))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RewriteRule>())).ruleId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RewriteRule),
            "::",
            stringify!(ruleId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RewriteRule>())).event as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RewriteRule),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RewriteRule>())).qual as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RewriteRule),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RewriteRule>())).actions as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RewriteRule),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RewriteRule>())).enabled as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RewriteRule),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RewriteRule>())).isInstead as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RewriteRule),
            "::",
            stringify!(isInstead)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RuleLock {
    pub numLocks: ::std::os::raw::c_int,
    pub rules: *mut *mut RewriteRule,
}
#[test]
fn bindgen_test_layout_RuleLock() {
    assert_eq!(
        ::std::mem::size_of::<RuleLock>(),
        16usize,
        concat!("Size of: ", stringify!(RuleLock))
    );
    assert_eq!(
        ::std::mem::align_of::<RuleLock>(),
        8usize,
        concat!("Alignment of ", stringify!(RuleLock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleLock>())).numLocks as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleLock),
            "::",
            stringify!(numLocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleLock>())).rules as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleLock),
            "::",
            stringify!(rules)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockRelId {
    pub relId: Oid,
    pub dbId: Oid,
}
#[test]
fn bindgen_test_layout_LockRelId() {
    assert_eq!(
        ::std::mem::size_of::<LockRelId>(),
        8usize,
        concat!("Size of: ", stringify!(LockRelId))
    );
    assert_eq!(
        ::std::mem::align_of::<LockRelId>(),
        4usize,
        concat!("Alignment of ", stringify!(LockRelId))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRelId>())).relId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRelId),
            "::",
            stringify!(relId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRelId>())).dbId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRelId),
            "::",
            stringify!(dbId)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LockInfoData {
    pub lockRelId: LockRelId,
}
#[test]
fn bindgen_test_layout_LockInfoData() {
    assert_eq!(
        ::std::mem::size_of::<LockInfoData>(),
        8usize,
        concat!("Size of: ", stringify!(LockInfoData))
    );
    assert_eq!(
        ::std::mem::align_of::<LockInfoData>(),
        4usize,
        concat!("Alignment of ", stringify!(LockInfoData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockInfoData>())).lockRelId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockInfoData),
            "::",
            stringify!(lockRelId)
        )
    );
}
pub type LockInfo = *mut LockInfoData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RelationData {
    pub rd_node: RelFileNode,
    pub rd_smgr: *mut SMgrRelationData,
    pub rd_refcnt: ::std::os::raw::c_int,
    pub rd_backend: BackendId,
    pub rd_islocaltemp: bool,
    pub rd_isnailed: bool,
    pub rd_isvalid: bool,
    pub rd_indexvalid: ::std::os::raw::c_char,
    pub rd_statvalid: bool,
    pub rd_createSubid: SubTransactionId,
    pub rd_newRelfilenodeSubid: SubTransactionId,
    pub rd_rel: Form_pg_class,
    pub rd_att: TupleDesc,
    pub rd_id: Oid,
    pub rd_lockInfo: LockInfoData,
    pub rd_rules: *mut RuleLock,
    pub rd_rulescxt: MemoryContext,
    pub trigdesc: *mut TriggerDesc,
    pub rd_rsdesc: *mut RowSecurityDesc,
    pub rd_fkeylist: *mut List,
    pub rd_fkeyvalid: bool,
    pub rd_partkeycxt: MemoryContext,
    pub rd_partkey: *mut PartitionKeyData,
    pub rd_pdcxt: MemoryContext,
    pub rd_partdesc: *mut PartitionDescData,
    pub rd_partcheck: *mut List,
    pub rd_indexlist: *mut List,
    pub rd_oidindex: Oid,
    pub rd_pkindex: Oid,
    pub rd_replidindex: Oid,
    pub rd_statlist: *mut List,
    pub rd_indexattr: *mut Bitmapset,
    pub rd_projindexattr: *mut Bitmapset,
    pub rd_keyattr: *mut Bitmapset,
    pub rd_pkattr: *mut Bitmapset,
    pub rd_idattr: *mut Bitmapset,
    pub rd_projidx: *mut Bitmapset,
    pub rd_pubactions: *mut PublicationActions,
    pub rd_options: *mut bytea,
    pub rd_index: Form_pg_index,
    pub rd_indextuple: *mut HeapTupleData,
    pub rd_amhandler: Oid,
    pub rd_indexcxt: MemoryContext,
    pub rd_amroutine: *mut IndexAmRoutine,
    pub rd_opfamily: *mut Oid,
    pub rd_opcintype: *mut Oid,
    pub rd_support: *mut RegProcedure,
    pub rd_supportinfo: *mut FmgrInfo,
    pub rd_indoption: *mut int16,
    pub rd_indexprs: *mut List,
    pub rd_indpred: *mut List,
    pub rd_exclops: *mut Oid,
    pub rd_exclprocs: *mut Oid,
    pub rd_exclstrats: *mut uint16,
    pub rd_amcache: *mut ::std::os::raw::c_void,
    pub rd_indcollation: *mut Oid,
    pub rd_fdwroutine: *mut FdwRoutine,
    pub rd_toastoid: Oid,
    pub pgstat_info: *mut PgStat_TableStatus,
}
#[test]
fn bindgen_test_layout_RelationData() {
    assert_eq!(
        ::std::mem::size_of::<RelationData>(),
        424usize,
        concat!("Size of: ", stringify!(RelationData))
    );
    assert_eq!(
        ::std::mem::align_of::<RelationData>(),
        8usize,
        concat!("Alignment of ", stringify!(RelationData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_smgr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_smgr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_refcnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_backend as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_backend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_islocaltemp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_islocaltemp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_isnailed as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_isnailed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_isvalid as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_isvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indexvalid as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indexvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_statvalid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_statvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_createSubid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_createSubid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RelationData>())).rd_newRelfilenodeSubid as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_newRelfilenodeSubid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_rel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_att as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_att)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_lockInfo as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_lockInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_rules as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_rules)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_rulescxt as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_rulescxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).trigdesc as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(trigdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_rsdesc as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_rsdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_fkeylist as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_fkeylist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_fkeyvalid as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_fkeyvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_partkeycxt as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_partkeycxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_partkey as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_partkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_pdcxt as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_pdcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_partdesc as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_partdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_partcheck as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_partcheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indexlist as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indexlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_oidindex as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_oidindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_pkindex as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_pkindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_replidindex as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_replidindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_statlist as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_statlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indexattr as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indexattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_projindexattr as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_projindexattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_keyattr as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_keyattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_pkattr as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_pkattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_idattr as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_idattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_projidx as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_projidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_pubactions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_pubactions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_options as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_index as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indextuple as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indextuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_amhandler as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_amhandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indexcxt as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indexcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_amroutine as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_amroutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_opfamily as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_opfamily)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_opcintype as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_opcintype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_support as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_support)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_supportinfo as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_supportinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indoption as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indoption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indexprs as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indpred as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indpred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_exclops as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_exclops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_exclprocs as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_exclprocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_exclstrats as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_exclstrats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_amcache as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_amcache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_indcollation as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_indcollation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_fdwroutine as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_fdwroutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).rd_toastoid as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(rd_toastoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelationData>())).pgstat_info as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationData),
            "::",
            stringify!(pgstat_info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForeignKeyCacheInfo {
    pub type_: NodeTag,
    pub conoid: Oid,
    pub conrelid: Oid,
    pub confrelid: Oid,
    pub nkeys: ::std::os::raw::c_int,
    pub conkey: [AttrNumber; 32usize],
    pub confkey: [AttrNumber; 32usize],
    pub conpfeqop: [Oid; 32usize],
}
#[test]
fn bindgen_test_layout_ForeignKeyCacheInfo() {
    assert_eq!(
        ::std::mem::size_of::<ForeignKeyCacheInfo>(),
        276usize,
        concat!("Size of: ", stringify!(ForeignKeyCacheInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignKeyCacheInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ForeignKeyCacheInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyCacheInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyCacheInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyCacheInfo>())).conoid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyCacheInfo),
            "::",
            stringify!(conoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyCacheInfo>())).conrelid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyCacheInfo),
            "::",
            stringify!(conrelid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyCacheInfo>())).confrelid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyCacheInfo),
            "::",
            stringify!(confrelid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyCacheInfo>())).nkeys as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyCacheInfo),
            "::",
            stringify!(nkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyCacheInfo>())).conkey as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyCacheInfo),
            "::",
            stringify!(conkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyCacheInfo>())).confkey as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyCacheInfo),
            "::",
            stringify!(confkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignKeyCacheInfo>())).conpfeqop as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignKeyCacheInfo),
            "::",
            stringify!(conpfeqop)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GenericIndexOpts {
    pub vl_len_: int32,
    pub recheck_on_update: bool,
}
#[test]
fn bindgen_test_layout_GenericIndexOpts() {
    assert_eq!(
        ::std::mem::size_of::<GenericIndexOpts>(),
        8usize,
        concat!("Size of: ", stringify!(GenericIndexOpts))
    );
    assert_eq!(
        ::std::mem::align_of::<GenericIndexOpts>(),
        4usize,
        concat!("Alignment of ", stringify!(GenericIndexOpts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GenericIndexOpts>())).vl_len_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GenericIndexOpts),
            "::",
            stringify!(vl_len_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GenericIndexOpts>())).recheck_on_update as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GenericIndexOpts),
            "::",
            stringify!(recheck_on_update)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AutoVacOpts {
    pub enabled: bool,
    pub vacuum_threshold: ::std::os::raw::c_int,
    pub analyze_threshold: ::std::os::raw::c_int,
    pub vacuum_cost_delay: ::std::os::raw::c_int,
    pub vacuum_cost_limit: ::std::os::raw::c_int,
    pub freeze_min_age: ::std::os::raw::c_int,
    pub freeze_max_age: ::std::os::raw::c_int,
    pub freeze_table_age: ::std::os::raw::c_int,
    pub multixact_freeze_min_age: ::std::os::raw::c_int,
    pub multixact_freeze_max_age: ::std::os::raw::c_int,
    pub multixact_freeze_table_age: ::std::os::raw::c_int,
    pub log_min_duration: ::std::os::raw::c_int,
    pub vacuum_scale_factor: float8,
    pub analyze_scale_factor: float8,
}
#[test]
fn bindgen_test_layout_AutoVacOpts() {
    assert_eq!(
        ::std::mem::size_of::<AutoVacOpts>(),
        64usize,
        concat!("Size of: ", stringify!(AutoVacOpts))
    );
    assert_eq!(
        ::std::mem::align_of::<AutoVacOpts>(),
        8usize,
        concat!("Alignment of ", stringify!(AutoVacOpts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).vacuum_threshold as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(vacuum_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).analyze_threshold as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(analyze_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).vacuum_cost_delay as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(vacuum_cost_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).vacuum_cost_limit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(vacuum_cost_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).freeze_min_age as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(freeze_min_age)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).freeze_max_age as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(freeze_max_age)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).freeze_table_age as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(freeze_table_age)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AutoVacOpts>())).multixact_freeze_min_age as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(multixact_freeze_min_age)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AutoVacOpts>())).multixact_freeze_max_age as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(multixact_freeze_max_age)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AutoVacOpts>())).multixact_freeze_table_age as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(multixact_freeze_table_age)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).log_min_duration as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(log_min_duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AutoVacOpts>())).vacuum_scale_factor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(vacuum_scale_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AutoVacOpts>())).analyze_scale_factor as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AutoVacOpts),
            "::",
            stringify!(analyze_scale_factor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdRdOptions {
    pub vl_len_: int32,
    pub fillfactor: ::std::os::raw::c_int,
    pub vacuum_cleanup_index_scale_factor: float8,
    pub toast_tuple_target: ::std::os::raw::c_int,
    pub autovacuum: AutoVacOpts,
    pub user_catalog_table: bool,
    pub parallel_workers: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StdRdOptions() {
    assert_eq!(
        ::std::mem::size_of::<StdRdOptions>(),
        96usize,
        concat!("Size of: ", stringify!(StdRdOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<StdRdOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(StdRdOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StdRdOptions>())).vl_len_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdRdOptions),
            "::",
            stringify!(vl_len_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StdRdOptions>())).fillfactor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdRdOptions),
            "::",
            stringify!(fillfactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<StdRdOptions>())).vacuum_cleanup_index_scale_factor as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdRdOptions),
            "::",
            stringify!(vacuum_cleanup_index_scale_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StdRdOptions>())).toast_tuple_target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdRdOptions),
            "::",
            stringify!(toast_tuple_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StdRdOptions>())).autovacuum as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StdRdOptions),
            "::",
            stringify!(autovacuum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StdRdOptions>())).user_catalog_table as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(StdRdOptions),
            "::",
            stringify!(user_catalog_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StdRdOptions>())).parallel_workers as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(StdRdOptions),
            "::",
            stringify!(parallel_workers)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ViewOptions {
    pub vl_len_: int32,
    pub security_barrier: bool,
    pub check_option_offset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ViewOptions() {
    assert_eq!(
        ::std::mem::size_of::<ViewOptions>(),
        12usize,
        concat!("Size of: ", stringify!(ViewOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<ViewOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(ViewOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewOptions>())).vl_len_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewOptions),
            "::",
            stringify!(vl_len_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewOptions>())).security_barrier as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewOptions),
            "::",
            stringify!(security_barrier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewOptions>())).check_option_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewOptions),
            "::",
            stringify!(check_option_offset)
        )
    );
}
extern "C" {
    pub fn RelationIncrementReferenceCount(rel: Relation);
}
extern "C" {
    pub fn RelationDecrementReferenceCount(rel: Relation);
}
extern "C" {
    pub fn RelationHasUnloggedIndex(rel: Relation) -> bool;
}
extern "C" {
    pub fn RelationGetRepsetList(rel: Relation) -> *mut List;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VariableCacheData {
    pub nextOid: Oid,
    pub oidCount: uint32,
    pub nextXid: TransactionId,
    pub oldestXid: TransactionId,
    pub xidVacLimit: TransactionId,
    pub xidWarnLimit: TransactionId,
    pub xidStopLimit: TransactionId,
    pub xidWrapLimit: TransactionId,
    pub oldestXidDB: Oid,
    pub oldestCommitTsXid: TransactionId,
    pub newestCommitTsXid: TransactionId,
    pub latestCompletedXid: TransactionId,
    pub oldestClogXid: TransactionId,
}
#[test]
fn bindgen_test_layout_VariableCacheData() {
    assert_eq!(
        ::std::mem::size_of::<VariableCacheData>(),
        52usize,
        concat!("Size of: ", stringify!(VariableCacheData))
    );
    assert_eq!(
        ::std::mem::align_of::<VariableCacheData>(),
        4usize,
        concat!("Alignment of ", stringify!(VariableCacheData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).nextOid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(nextOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).oidCount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(oidCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).nextXid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(nextXid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).oldestXid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(oldestXid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).xidVacLimit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(xidVacLimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).xidWarnLimit as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(xidWarnLimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).xidStopLimit as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(xidStopLimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).xidWrapLimit as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(xidWrapLimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).oldestXidDB as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(oldestXidDB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VariableCacheData>())).oldestCommitTsXid as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(oldestCommitTsXid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VariableCacheData>())).newestCommitTsXid as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(newestCommitTsXid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VariableCacheData>())).latestCompletedXid as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(latestCompletedXid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableCacheData>())).oldestClogXid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableCacheData),
            "::",
            stringify!(oldestClogXid)
        )
    );
}
pub type VariableCache = *mut VariableCacheData;
extern "C" {
    pub fn TransactionStartedDuringRecovery() -> bool;
}
extern "C" {
    #[link_name = "\u{1}ShmemVariableCache"]
    pub static mut ShmemVariableCache: VariableCache;
}
extern "C" {
    pub fn TransactionIdDidCommit(transactionId: TransactionId) -> bool;
}
extern "C" {
    pub fn TransactionIdDidAbort(transactionId: TransactionId) -> bool;
}
extern "C" {
    pub fn TransactionIdIsKnownCompleted(transactionId: TransactionId) -> bool;
}
extern "C" {
    pub fn TransactionIdAbort(transactionId: TransactionId);
}
extern "C" {
    pub fn TransactionIdCommitTree(
        xid: TransactionId,
        nxids: ::std::os::raw::c_int,
        xids: *mut TransactionId,
    );
}
extern "C" {
    pub fn TransactionIdAsyncCommitTree(
        xid: TransactionId,
        nxids: ::std::os::raw::c_int,
        xids: *mut TransactionId,
        lsn: XLogRecPtr,
    );
}
extern "C" {
    pub fn TransactionIdAbortTree(
        xid: TransactionId,
        nxids: ::std::os::raw::c_int,
        xids: *mut TransactionId,
    );
}
extern "C" {
    pub fn TransactionIdPrecedes(id1: TransactionId, id2: TransactionId) -> bool;
}
extern "C" {
    pub fn TransactionIdPrecedesOrEquals(id1: TransactionId, id2: TransactionId) -> bool;
}
extern "C" {
    pub fn TransactionIdFollows(id1: TransactionId, id2: TransactionId) -> bool;
}
extern "C" {
    pub fn TransactionIdFollowsOrEquals(id1: TransactionId, id2: TransactionId) -> bool;
}
extern "C" {
    pub fn TransactionIdLatest(
        mainxid: TransactionId,
        nxids: ::std::os::raw::c_int,
        xids: *const TransactionId,
    ) -> TransactionId;
}
extern "C" {
    pub fn TransactionIdGetCommitLSN(xid: TransactionId) -> XLogRecPtr;
}
extern "C" {
    pub fn GetNewTransactionId(isSubXact: bool) -> TransactionId;
}
extern "C" {
    pub fn ReadNewTransactionId() -> TransactionId;
}
extern "C" {
    pub fn SetTransactionIdLimit(oldest_datfrozenxid: TransactionId, oldest_datoid: Oid);
}
extern "C" {
    pub fn AdvanceOldestClogXid(oldest_datfrozenxid: TransactionId);
}
extern "C" {
    pub fn ForceTransactionIdLimitUpdate() -> bool;
}
extern "C" {
    pub fn GetNewObjectId() -> Oid;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HeapTupleFields {
    pub t_xmin: TransactionId,
    pub t_xmax: TransactionId,
    pub t_field3: HeapTupleFields__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HeapTupleFields__bindgen_ty_1 {
    pub t_cid: CommandId,
    pub t_xvac: TransactionId,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_HeapTupleFields__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<HeapTupleFields__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(HeapTupleFields__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapTupleFields__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(HeapTupleFields__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HeapTupleFields__bindgen_ty_1>())).t_cid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleFields__bindgen_ty_1),
            "::",
            stringify!(t_cid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HeapTupleFields__bindgen_ty_1>())).t_xvac as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleFields__bindgen_ty_1),
            "::",
            stringify!(t_xvac)
        )
    );
}
#[test]
fn bindgen_test_layout_HeapTupleFields() {
    assert_eq!(
        ::std::mem::size_of::<HeapTupleFields>(),
        12usize,
        concat!("Size of: ", stringify!(HeapTupleFields))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapTupleFields>(),
        4usize,
        concat!("Alignment of ", stringify!(HeapTupleFields))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleFields>())).t_xmin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleFields),
            "::",
            stringify!(t_xmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleFields>())).t_xmax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleFields),
            "::",
            stringify!(t_xmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleFields>())).t_field3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleFields),
            "::",
            stringify!(t_field3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DatumTupleFields {
    pub datum_len_: int32,
    pub datum_typmod: int32,
    pub datum_typeid: Oid,
}
#[test]
fn bindgen_test_layout_DatumTupleFields() {
    assert_eq!(
        ::std::mem::size_of::<DatumTupleFields>(),
        12usize,
        concat!("Size of: ", stringify!(DatumTupleFields))
    );
    assert_eq!(
        ::std::mem::align_of::<DatumTupleFields>(),
        4usize,
        concat!("Alignment of ", stringify!(DatumTupleFields))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DatumTupleFields>())).datum_len_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DatumTupleFields),
            "::",
            stringify!(datum_len_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DatumTupleFields>())).datum_typmod as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DatumTupleFields),
            "::",
            stringify!(datum_typmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DatumTupleFields>())).datum_typeid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DatumTupleFields),
            "::",
            stringify!(datum_typeid)
        )
    );
}
#[repr(C)]
pub struct HeapTupleHeaderData {
    pub t_choice: HeapTupleHeaderData__bindgen_ty_1,
    pub t_ctid: ItemPointerData,
    pub t_infomask2: uint16,
    pub t_infomask: uint16,
    pub t_hoff: uint8,
    pub t_bits: __IncompleteArrayField<bits8>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HeapTupleHeaderData__bindgen_ty_1 {
    pub t_heap: HeapTupleFields,
    pub t_datum: DatumTupleFields,
    _bindgen_union_align: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_HeapTupleHeaderData__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<HeapTupleHeaderData__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(HeapTupleHeaderData__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapTupleHeaderData__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(HeapTupleHeaderData__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HeapTupleHeaderData__bindgen_ty_1>())).t_heap as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleHeaderData__bindgen_ty_1),
            "::",
            stringify!(t_heap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HeapTupleHeaderData__bindgen_ty_1>())).t_datum as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleHeaderData__bindgen_ty_1),
            "::",
            stringify!(t_datum)
        )
    );
}
#[test]
fn bindgen_test_layout_HeapTupleHeaderData() {
    assert_eq!(
        ::std::mem::size_of::<HeapTupleHeaderData>(),
        24usize,
        concat!("Size of: ", stringify!(HeapTupleHeaderData))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapTupleHeaderData>(),
        4usize,
        concat!("Alignment of ", stringify!(HeapTupleHeaderData))
    );
}
#[repr(C)]
pub struct MinimalTupleData {
    pub t_len: uint32,
    pub mt_padding: [::std::os::raw::c_char; 6usize],
    pub t_infomask2: uint16,
    pub t_infomask: uint16,
    pub t_hoff: uint8,
    pub t_bits: __IncompleteArrayField<bits8>,
}
#[test]
fn bindgen_test_layout_MinimalTupleData() {
    assert_eq!(
        ::std::mem::size_of::<MinimalTupleData>(),
        16usize,
        concat!("Size of: ", stringify!(MinimalTupleData))
    );
    assert_eq!(
        ::std::mem::align_of::<MinimalTupleData>(),
        4usize,
        concat!("Alignment of ", stringify!(MinimalTupleData))
    );
}
extern "C" {
    pub fn heap_compute_data_size(
        tupleDesc: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool,
    ) -> Size;
}
extern "C" {
    pub fn heap_fill_tuple(
        tupleDesc: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool,
        data: *mut ::std::os::raw::c_char,
        data_size: Size,
        infomask: *mut uint16,
        bit: *mut bits8,
    );
}
extern "C" {
    pub fn heap_attisnull(
        tup: HeapTuple,
        attnum: ::std::os::raw::c_int,
        tupleDesc: TupleDesc,
    ) -> bool;
}
extern "C" {
    pub fn nocachegetattr(tup: HeapTuple, attnum: ::std::os::raw::c_int, att: TupleDesc) -> Datum;
}
extern "C" {
    pub fn heap_getsysattr(
        tup: HeapTuple,
        attnum: ::std::os::raw::c_int,
        tupleDesc: TupleDesc,
        isnull: *mut bool,
    ) -> Datum;
}
extern "C" {
    pub fn getmissingattr(
        tupleDesc: TupleDesc,
        attnum: ::std::os::raw::c_int,
        isnull: *mut bool,
    ) -> Datum;
}
extern "C" {
    pub fn heap_copytuple(tuple: HeapTuple) -> HeapTuple;
}
extern "C" {
    pub fn heap_copytuple_with_tuple(src: HeapTuple, dest: HeapTuple);
}
extern "C" {
    pub fn heap_copy_tuple_as_datum(tuple: HeapTuple, tupleDesc: TupleDesc) -> Datum;
}
extern "C" {
    pub fn heap_form_tuple(
        tupleDescriptor: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool,
    ) -> HeapTuple;
}
extern "C" {
    pub fn heap_modify_tuple(
        tuple: HeapTuple,
        tupleDesc: TupleDesc,
        replValues: *mut Datum,
        replIsnull: *mut bool,
        doReplace: *mut bool,
    ) -> HeapTuple;
}
extern "C" {
    pub fn heap_modify_tuple_by_cols(
        tuple: HeapTuple,
        tupleDesc: TupleDesc,
        nCols: ::std::os::raw::c_int,
        replCols: *mut ::std::os::raw::c_int,
        replValues: *mut Datum,
        replIsnull: *mut bool,
    ) -> HeapTuple;
}
extern "C" {
    pub fn heap_deform_tuple(
        tuple: HeapTuple,
        tupleDesc: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool,
    );
}
extern "C" {
    pub fn heap_freetuple(htup: HeapTuple);
}
extern "C" {
    pub fn heap_form_minimal_tuple(
        tupleDescriptor: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool,
    ) -> MinimalTuple;
}
extern "C" {
    pub fn heap_free_minimal_tuple(mtup: MinimalTuple);
}
extern "C" {
    pub fn heap_copy_minimal_tuple(mtup: MinimalTuple) -> MinimalTuple;
}
extern "C" {
    pub fn heap_tuple_from_minimal_tuple(mtup: MinimalTuple) -> HeapTuple;
}
extern "C" {
    pub fn minimal_tuple_from_heap_tuple(htup: HeapTuple) -> MinimalTuple;
}
extern "C" {
    pub fn varsize_any(p: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn heap_expand_tuple(sourceTuple: HeapTuple, tupleDesc: TupleDesc) -> HeapTuple;
}
extern "C" {
    pub fn minimal_expand_tuple(sourceTuple: HeapTuple, tupleDesc: TupleDesc) -> MinimalTuple;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedInvalCatcacheMsg {
    pub id: int8,
    pub dbId: Oid,
    pub hashValue: uint32,
}
#[test]
fn bindgen_test_layout_SharedInvalCatcacheMsg() {
    assert_eq!(
        ::std::mem::size_of::<SharedInvalCatcacheMsg>(),
        12usize,
        concat!("Size of: ", stringify!(SharedInvalCatcacheMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedInvalCatcacheMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(SharedInvalCatcacheMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalCatcacheMsg>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalCatcacheMsg),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalCatcacheMsg>())).dbId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalCatcacheMsg),
            "::",
            stringify!(dbId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SharedInvalCatcacheMsg>())).hashValue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalCatcacheMsg),
            "::",
            stringify!(hashValue)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedInvalCatalogMsg {
    pub id: int8,
    pub dbId: Oid,
    pub catId: Oid,
}
#[test]
fn bindgen_test_layout_SharedInvalCatalogMsg() {
    assert_eq!(
        ::std::mem::size_of::<SharedInvalCatalogMsg>(),
        12usize,
        concat!("Size of: ", stringify!(SharedInvalCatalogMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedInvalCatalogMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(SharedInvalCatalogMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalCatalogMsg>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalCatalogMsg),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalCatalogMsg>())).dbId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalCatalogMsg),
            "::",
            stringify!(dbId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalCatalogMsg>())).catId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalCatalogMsg),
            "::",
            stringify!(catId)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedInvalRelcacheMsg {
    pub id: int8,
    pub dbId: Oid,
    pub relId: Oid,
}
#[test]
fn bindgen_test_layout_SharedInvalRelcacheMsg() {
    assert_eq!(
        ::std::mem::size_of::<SharedInvalRelcacheMsg>(),
        12usize,
        concat!("Size of: ", stringify!(SharedInvalRelcacheMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedInvalRelcacheMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(SharedInvalRelcacheMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalRelcacheMsg>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalRelcacheMsg),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalRelcacheMsg>())).dbId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalRelcacheMsg),
            "::",
            stringify!(dbId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalRelcacheMsg>())).relId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalRelcacheMsg),
            "::",
            stringify!(relId)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedInvalSmgrMsg {
    pub id: int8,
    pub backend_hi: int8,
    pub backend_lo: uint16,
    pub rnode: RelFileNode,
}
#[test]
fn bindgen_test_layout_SharedInvalSmgrMsg() {
    assert_eq!(
        ::std::mem::size_of::<SharedInvalSmgrMsg>(),
        16usize,
        concat!("Size of: ", stringify!(SharedInvalSmgrMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedInvalSmgrMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(SharedInvalSmgrMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalSmgrMsg>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalSmgrMsg),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalSmgrMsg>())).backend_hi as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalSmgrMsg),
            "::",
            stringify!(backend_hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalSmgrMsg>())).backend_lo as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalSmgrMsg),
            "::",
            stringify!(backend_lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalSmgrMsg>())).rnode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalSmgrMsg),
            "::",
            stringify!(rnode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedInvalRelmapMsg {
    pub id: int8,
    pub dbId: Oid,
}
#[test]
fn bindgen_test_layout_SharedInvalRelmapMsg() {
    assert_eq!(
        ::std::mem::size_of::<SharedInvalRelmapMsg>(),
        8usize,
        concat!("Size of: ", stringify!(SharedInvalRelmapMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedInvalRelmapMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(SharedInvalRelmapMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalRelmapMsg>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalRelmapMsg),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalRelmapMsg>())).dbId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalRelmapMsg),
            "::",
            stringify!(dbId)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedInvalSnapshotMsg {
    pub id: int8,
    pub dbId: Oid,
    pub relId: Oid,
}
#[test]
fn bindgen_test_layout_SharedInvalSnapshotMsg() {
    assert_eq!(
        ::std::mem::size_of::<SharedInvalSnapshotMsg>(),
        12usize,
        concat!("Size of: ", stringify!(SharedInvalSnapshotMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedInvalSnapshotMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(SharedInvalSnapshotMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalSnapshotMsg>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalSnapshotMsg),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalSnapshotMsg>())).dbId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalSnapshotMsg),
            "::",
            stringify!(dbId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalSnapshotMsg>())).relId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalSnapshotMsg),
            "::",
            stringify!(relId)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SharedInvalidationMessage {
    pub id: int8,
    pub cc: SharedInvalCatcacheMsg,
    pub cat: SharedInvalCatalogMsg,
    pub rc: SharedInvalRelcacheMsg,
    pub sm: SharedInvalSmgrMsg,
    pub rm: SharedInvalRelmapMsg,
    pub sn: SharedInvalSnapshotMsg,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_SharedInvalidationMessage() {
    assert_eq!(
        ::std::mem::size_of::<SharedInvalidationMessage>(),
        16usize,
        concat!("Size of: ", stringify!(SharedInvalidationMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<SharedInvalidationMessage>(),
        4usize,
        concat!("Alignment of ", stringify!(SharedInvalidationMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalidationMessage>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalidationMessage),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalidationMessage>())).cc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalidationMessage),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalidationMessage>())).cat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalidationMessage),
            "::",
            stringify!(cat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalidationMessage>())).rc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalidationMessage),
            "::",
            stringify!(rc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalidationMessage>())).sm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalidationMessage),
            "::",
            stringify!(sm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalidationMessage>())).rm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalidationMessage),
            "::",
            stringify!(rm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SharedInvalidationMessage>())).sn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SharedInvalidationMessage),
            "::",
            stringify!(sn)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}SharedInvalidMessageCounter"]
    pub static mut SharedInvalidMessageCounter: uint64;
}
extern "C" {
    #[link_name = "\u{1}catchupInterruptPending"]
    pub static mut catchupInterruptPending: sig_atomic_t;
}
extern "C" {
    pub fn SendSharedInvalidMessages(
        msgs: *const SharedInvalidationMessage,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ReceiveSharedInvalidMessages(
        invalFunction: ::std::option::Option<
            unsafe extern "C" fn(msg: *mut SharedInvalidationMessage),
        >,
        resetFunction: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn HandleCatchupInterrupt();
}
extern "C" {
    pub fn ProcessCatchupInterrupt();
}
extern "C" {
    pub fn xactGetCommittedInvalidationMessages(
        msgs: *mut *mut SharedInvalidationMessage,
        RelcacheInitFileInval: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ProcessCommittedInvalidationMessages(
        msgs: *mut SharedInvalidationMessage,
        nmsgs: ::std::os::raw::c_int,
        RelcacheInitFileInval: bool,
        dbid: Oid,
        tsid: Oid,
    );
}
extern "C" {
    pub fn LocalExecuteInvalidationMessage(msg: *mut SharedInvalidationMessage);
}
pub type pg_time_t = int64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pg_tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pg_tm() {
    assert_eq!(
        ::std::mem::size_of::<pg_tm>(),
        56usize,
        concat!("Size of: ", stringify!(pg_tm))
    );
    assert_eq!(
        ::std::mem::align_of::<pg_tm>(),
        8usize,
        concat!("Alignment of ", stringify!(pg_tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pg_tz {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pg_tzenum {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pg_localtime(timep: *const pg_time_t, tz: *const pg_tz) -> *mut pg_tm;
}
extern "C" {
    pub fn pg_gmtime(timep: *const pg_time_t) -> *mut pg_tm;
}
extern "C" {
    pub fn pg_next_dst_boundary(
        timep: *const pg_time_t,
        before_gmtoff: *mut ::std::os::raw::c_long,
        before_isdst: *mut ::std::os::raw::c_int,
        boundary: *mut pg_time_t,
        after_gmtoff: *mut ::std::os::raw::c_long,
        after_isdst: *mut ::std::os::raw::c_int,
        tz: *const pg_tz,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_interpret_timezone_abbrev(
        abbrev: *const ::std::os::raw::c_char,
        timep: *const pg_time_t,
        gmtoff: *mut ::std::os::raw::c_long,
        isdst: *mut ::std::os::raw::c_int,
        tz: *const pg_tz,
    ) -> bool;
}
extern "C" {
    pub fn pg_get_timezone_offset(tz: *const pg_tz, gmtoff: *mut ::std::os::raw::c_long) -> bool;
}
extern "C" {
    pub fn pg_get_timezone_name(tz: *mut pg_tz) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_tz_acceptable(tz: *mut pg_tz) -> bool;
}
extern "C" {
    pub fn pg_strftime(
        s: *mut ::std::os::raw::c_char,
        max: usize,
        format: *const ::std::os::raw::c_char,
        tm: *const pg_tm,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}session_timezone"]
    pub static mut session_timezone: *mut pg_tz;
}
extern "C" {
    #[link_name = "\u{1}log_timezone"]
    pub static mut log_timezone: *mut pg_tz;
}
extern "C" {
    pub fn pg_timezone_initialize();
}
extern "C" {
    pub fn pg_tzset(tzname: *const ::std::os::raw::c_char) -> *mut pg_tz;
}
extern "C" {
    pub fn pg_tzset_offset(gmtoffset: ::std::os::raw::c_long) -> *mut pg_tz;
}
extern "C" {
    pub fn pg_tzenumerate_start() -> *mut pg_tzenum;
}
extern "C" {
    pub fn pg_tzenumerate_next(dir: *mut pg_tzenum) -> *mut pg_tz;
}
extern "C" {
    pub fn pg_tzenumerate_end(dir: *mut pg_tzenum);
}
extern "C" {
    #[link_name = "\u{1}PgStartTime"]
    pub static mut PgStartTime: TimestampTz;
}
extern "C" {
    #[link_name = "\u{1}PgReloadTime"]
    pub static mut PgReloadTime: TimestampTz;
}
extern "C" {
    pub fn anytimestamp_typmod_check(istz: bool, typmod: int32) -> int32;
}
extern "C" {
    pub fn GetCurrentTimestamp() -> TimestampTz;
}
extern "C" {
    pub fn GetSQLCurrentTimestamp(typmod: int32) -> TimestampTz;
}
extern "C" {
    pub fn GetSQLLocalTimestamp(typmod: int32) -> Timestamp;
}
extern "C" {
    pub fn TimestampDifference(
        start_time: TimestampTz,
        stop_time: TimestampTz,
        secs: *mut ::std::os::raw::c_long,
        microsecs: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TimestampDifferenceExceeds(
        start_time: TimestampTz,
        stop_time: TimestampTz,
        msec: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn time_t_to_timestamptz(tm: pg_time_t) -> TimestampTz;
}
extern "C" {
    pub fn timestamptz_to_time_t(t: TimestampTz) -> pg_time_t;
}
extern "C" {
    pub fn timestamptz_to_str(t: TimestampTz) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tm2timestamp(
        tm: *mut pg_tm,
        fsec: fsec_t,
        tzp: *mut ::std::os::raw::c_int,
        dt: *mut Timestamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timestamp2tm(
        dt: Timestamp,
        tzp: *mut ::std::os::raw::c_int,
        tm: *mut pg_tm,
        fsec: *mut fsec_t,
        tzn: *mut *const ::std::os::raw::c_char,
        attimezone: *mut pg_tz,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dt2time(
        dt: Timestamp,
        hour: *mut ::std::os::raw::c_int,
        min: *mut ::std::os::raw::c_int,
        sec: *mut ::std::os::raw::c_int,
        fsec: *mut fsec_t,
    );
}
extern "C" {
    pub fn interval2tm(span: Interval, tm: *mut pg_tm, fsec: *mut fsec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tm2interval(tm: *mut pg_tm, fsec: fsec_t, span: *mut Interval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SetEpochTimestamp() -> Timestamp;
}
extern "C" {
    pub fn GetEpochTime(tm: *mut pg_tm);
}
extern "C" {
    pub fn timestamp_cmp_internal(dt1: Timestamp, dt2: Timestamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isoweek2j(
        year: ::std::os::raw::c_int,
        week: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isoweek2date(
        woy: ::std::os::raw::c_int,
        year: *mut ::std::os::raw::c_int,
        mon: *mut ::std::os::raw::c_int,
        mday: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn isoweekdate2date(
        isoweek: ::std::os::raw::c_int,
        wday: ::std::os::raw::c_int,
        year: *mut ::std::os::raw::c_int,
        mon: *mut ::std::os::raw::c_int,
        mday: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn date2isoweek(
        year: ::std::os::raw::c_int,
        mon: ::std::os::raw::c_int,
        mday: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn date2isoyear(
        year: ::std::os::raw::c_int,
        mon: ::std::os::raw::c_int,
        mday: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn date2isoyearday(
        year: ::std::os::raw::c_int,
        mon: ::std::os::raw::c_int,
        mday: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReorderBufferTupleBuf {
    pub node: slist_node,
    pub tuple: HeapTupleData,
    pub alloc_tuple_size: Size,
}
#[test]
fn bindgen_test_layout_ReorderBufferTupleBuf() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBufferTupleBuf>(),
        40usize,
        concat!("Size of: ", stringify!(ReorderBufferTupleBuf))
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBufferTupleBuf>(),
        8usize,
        concat!("Alignment of ", stringify!(ReorderBufferTupleBuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTupleBuf>())).node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTupleBuf),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTupleBuf>())).tuple as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTupleBuf),
            "::",
            stringify!(tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferTupleBuf>())).alloc_tuple_size as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTupleBuf),
            "::",
            stringify!(alloc_tuple_size)
        )
    );
}
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_INSERT: ReorderBufferChangeType = 0;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_UPDATE: ReorderBufferChangeType = 1;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_DELETE: ReorderBufferChangeType = 2;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_MESSAGE: ReorderBufferChangeType = 3;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_INTERNAL_SNAPSHOT: ReorderBufferChangeType =
    4;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_INTERNAL_COMMAND_ID:
    ReorderBufferChangeType = 5;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_INTERNAL_TUPLECID: ReorderBufferChangeType =
    6;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_INTERNAL_SPEC_INSERT:
    ReorderBufferChangeType = 7;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_INTERNAL_SPEC_CONFIRM:
    ReorderBufferChangeType = 8;
pub const ReorderBufferChangeType_REORDER_BUFFER_CHANGE_TRUNCATE: ReorderBufferChangeType = 9;
pub type ReorderBufferChangeType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReorderBufferChange {
    pub lsn: XLogRecPtr,
    pub action: ReorderBufferChangeType,
    pub origin_id: RepOriginId,
    pub data: ReorderBufferChange__bindgen_ty_1,
    pub node: dlist_node,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ReorderBufferChange__bindgen_ty_1 {
    pub tp: ReorderBufferChange__bindgen_ty_1__bindgen_ty_1,
    pub truncate: ReorderBufferChange__bindgen_ty_1__bindgen_ty_2,
    pub msg: ReorderBufferChange__bindgen_ty_1__bindgen_ty_3,
    pub snapshot: Snapshot,
    pub command_id: CommandId,
    pub tuplecid: ReorderBufferChange__bindgen_ty_1__bindgen_ty_4,
    _bindgen_union_align: [u64; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReorderBufferChange__bindgen_ty_1__bindgen_ty_1 {
    pub relnode: RelFileNode,
    pub clear_toast_afterwards: bool,
    pub oldtuple: *mut ReorderBufferTupleBuf,
    pub newtuple: *mut ReorderBufferTupleBuf,
}
#[test]
fn bindgen_test_layout_ReorderBufferChange__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_1>())).relnode
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(relnode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_1>()))
                .clear_toast_afterwards as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(clear_toast_afterwards)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_1>())).oldtuple
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(oldtuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_1>())).newtuple
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(newtuple)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReorderBufferChange__bindgen_ty_1__bindgen_ty_2 {
    pub nrelids: Size,
    pub cascade: bool,
    pub restart_seqs: bool,
    pub relids: *mut Oid,
}
#[test]
fn bindgen_test_layout_ReorderBufferChange__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_2>())).nrelids
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(nrelids)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_2>())).cascade
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(cascade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_2>())).restart_seqs
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(restart_seqs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_2>())).relids
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(relids)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReorderBufferChange__bindgen_ty_1__bindgen_ty_3 {
    pub prefix: *mut ::std::os::raw::c_char,
    pub message_size: Size,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ReorderBufferChange__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_3>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_3>())).prefix
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_3>())).message_size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(message_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_3>())).message
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReorderBufferChange__bindgen_ty_1__bindgen_ty_4 {
    pub node: RelFileNode,
    pub tid: ItemPointerData,
    pub cmin: CommandId,
    pub cmax: CommandId,
    pub combocid: CommandId,
}
#[test]
fn bindgen_test_layout_ReorderBufferChange__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_4>())).node
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_4>())).tid
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_4>())).cmin
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(cmin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_4>())).cmax
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(cmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1__bindgen_ty_4>())).combocid
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(combocid)
        )
    );
}
#[test]
fn bindgen_test_layout_ReorderBufferChange__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBufferChange__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(ReorderBufferChange__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBufferChange__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ReorderBufferChange__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1>())).tp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1),
            "::",
            stringify!(tp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1>())).truncate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1>())).msg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1>())).snapshot as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1),
            "::",
            stringify!(snapshot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1>())).command_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1),
            "::",
            stringify!(command_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferChange__bindgen_ty_1>())).tuplecid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange__bindgen_ty_1),
            "::",
            stringify!(tuplecid)
        )
    );
}
#[test]
fn bindgen_test_layout_ReorderBufferChange() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBufferChange>(),
        64usize,
        concat!("Size of: ", stringify!(ReorderBufferChange))
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBufferChange>(),
        8usize,
        concat!("Alignment of ", stringify!(ReorderBufferChange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferChange>())).lsn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange),
            "::",
            stringify!(lsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferChange>())).action as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferChange>())).origin_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange),
            "::",
            stringify!(origin_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferChange>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferChange>())).node as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferChange),
            "::",
            stringify!(node)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReorderBufferTXN {
    pub xid: TransactionId,
    pub has_catalog_changes: bool,
    pub is_known_as_subxact: bool,
    pub toplevel_xid: TransactionId,
    pub first_lsn: XLogRecPtr,
    pub final_lsn: XLogRecPtr,
    pub end_lsn: XLogRecPtr,
    pub restart_decoding_lsn: XLogRecPtr,
    pub origin_id: RepOriginId,
    pub origin_lsn: XLogRecPtr,
    pub commit_time: TimestampTz,
    pub base_snapshot: Snapshot,
    pub base_snapshot_lsn: XLogRecPtr,
    pub base_snapshot_node: dlist_node,
    pub nentries: uint64,
    pub nentries_mem: uint64,
    pub serialized: bool,
    pub changes: dlist_head,
    pub tuplecids: dlist_head,
    pub ntuplecids: uint64,
    pub tuplecid_hash: *mut HTAB,
    pub toast_hash: *mut HTAB,
    pub subtxns: dlist_head,
    pub nsubtxns: uint32,
    pub ninvalidations: uint32,
    pub invalidations: *mut SharedInvalidationMessage,
    pub node: dlist_node,
}
#[test]
fn bindgen_test_layout_ReorderBufferTXN() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBufferTXN>(),
        232usize,
        concat!("Size of: ", stringify!(ReorderBufferTXN))
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBufferTXN>(),
        8usize,
        concat!("Alignment of ", stringify!(ReorderBufferTXN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).xid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(xid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferTXN>())).has_catalog_changes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(has_catalog_changes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferTXN>())).is_known_as_subxact as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(is_known_as_subxact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).toplevel_xid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(toplevel_xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).first_lsn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(first_lsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).final_lsn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(final_lsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).end_lsn as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(end_lsn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferTXN>())).restart_decoding_lsn as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(restart_decoding_lsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).origin_id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(origin_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).origin_lsn as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(origin_lsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).commit_time as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(commit_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).base_snapshot as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(base_snapshot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferTXN>())).base_snapshot_lsn as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(base_snapshot_lsn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBufferTXN>())).base_snapshot_node as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(base_snapshot_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).nentries as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(nentries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).nentries_mem as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(nentries_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).serialized as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(serialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).changes as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(changes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).tuplecids as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(tuplecids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).ntuplecids as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(ntuplecids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).tuplecid_hash as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(tuplecid_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).toast_hash as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(toast_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).subtxns as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(subtxns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).nsubtxns as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(nsubtxns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).ninvalidations as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(ninvalidations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).invalidations as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(invalidations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBufferTXN>())).node as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBufferTXN),
            "::",
            stringify!(node)
        )
    );
}
pub type ReorderBufferApplyChangeCB = ::std::option::Option<
    unsafe extern "C" fn(
        rb: *mut ReorderBuffer,
        txn: *mut ReorderBufferTXN,
        relation: Relation,
        change: *mut ReorderBufferChange,
    ),
>;
pub type ReorderBufferApplyTruncateCB = ::std::option::Option<
    unsafe extern "C" fn(
        rb: *mut ReorderBuffer,
        txn: *mut ReorderBufferTXN,
        nrelations: ::std::os::raw::c_int,
        relations: *mut Relation,
        change: *mut ReorderBufferChange,
    ),
>;
pub type ReorderBufferBeginCB =
    ::std::option::Option<unsafe extern "C" fn(rb: *mut ReorderBuffer, txn: *mut ReorderBufferTXN)>;
pub type ReorderBufferCommitCB = ::std::option::Option<
    unsafe extern "C" fn(
        rb: *mut ReorderBuffer,
        txn: *mut ReorderBufferTXN,
        commit_lsn: XLogRecPtr,
    ),
>;
pub type ReorderBufferMessageCB = ::std::option::Option<
    unsafe extern "C" fn(
        rb: *mut ReorderBuffer,
        txn: *mut ReorderBufferTXN,
        message_lsn: XLogRecPtr,
        transactional: bool,
        prefix: *const ::std::os::raw::c_char,
        sz: Size,
        message: *const ::std::os::raw::c_char,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReorderBuffer {
    pub by_txn: *mut HTAB,
    pub toplevel_by_lsn: dlist_head,
    pub txns_by_base_snapshot_lsn: dlist_head,
    pub by_txn_last_xid: TransactionId,
    pub by_txn_last_txn: *mut ReorderBufferTXN,
    pub begin: ReorderBufferBeginCB,
    pub apply_change: ReorderBufferApplyChangeCB,
    pub apply_truncate: ReorderBufferApplyTruncateCB,
    pub commit: ReorderBufferCommitCB,
    pub message: ReorderBufferMessageCB,
    pub private_data: *mut ::std::os::raw::c_void,
    pub output_rewrites: bool,
    pub context: MemoryContext,
    pub change_context: MemoryContext,
    pub txn_context: MemoryContext,
    pub tup_context: MemoryContext,
    pub current_restart_decoding_lsn: XLogRecPtr,
    pub outbuf: *mut ::std::os::raw::c_char,
    pub outbufsize: Size,
}
#[test]
fn bindgen_test_layout_ReorderBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ReorderBuffer>(),
        168usize,
        concat!("Size of: ", stringify!(ReorderBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ReorderBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ReorderBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).by_txn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(by_txn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).toplevel_by_lsn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(toplevel_by_lsn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBuffer>())).txns_by_base_snapshot_lsn as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(txns_by_base_snapshot_lsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).by_txn_last_xid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(by_txn_last_xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).by_txn_last_txn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(by_txn_last_txn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).begin as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).apply_change as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(apply_change)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).apply_truncate as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(apply_truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).commit as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(commit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).message as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).private_data as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(private_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).output_rewrites as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(output_rewrites)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).context as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).change_context as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(change_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).txn_context as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(txn_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).tup_context as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(tup_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReorderBuffer>())).current_restart_decoding_lsn as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(current_restart_decoding_lsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).outbuf as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(outbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReorderBuffer>())).outbufsize as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ReorderBuffer),
            "::",
            stringify!(outbufsize)
        )
    );
}
extern "C" {
    pub fn ReorderBufferAllocate() -> *mut ReorderBuffer;
}
extern "C" {
    pub fn ReorderBufferFree(arg1: *mut ReorderBuffer);
}
extern "C" {
    pub fn ReorderBufferGetTupleBuf(
        arg1: *mut ReorderBuffer,
        tuple_len: Size,
    ) -> *mut ReorderBufferTupleBuf;
}
extern "C" {
    pub fn ReorderBufferReturnTupleBuf(arg1: *mut ReorderBuffer, tuple: *mut ReorderBufferTupleBuf);
}
extern "C" {
    pub fn ReorderBufferGetChange(arg1: *mut ReorderBuffer) -> *mut ReorderBufferChange;
}
extern "C" {
    pub fn ReorderBufferReturnChange(arg1: *mut ReorderBuffer, arg2: *mut ReorderBufferChange);
}
extern "C" {
    pub fn ReorderBufferGetRelids(
        arg1: *mut ReorderBuffer,
        nrelids: ::std::os::raw::c_int,
    ) -> *mut Oid;
}
extern "C" {
    pub fn ReorderBufferReturnRelids(arg1: *mut ReorderBuffer, relids: *mut Oid);
}
extern "C" {
    pub fn ReorderBufferQueueChange(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        lsn: XLogRecPtr,
        arg3: *mut ReorderBufferChange,
    );
}
extern "C" {
    pub fn ReorderBufferQueueMessage(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        snapshot: Snapshot,
        lsn: XLogRecPtr,
        transactional: bool,
        prefix: *const ::std::os::raw::c_char,
        message_size: Size,
        message: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ReorderBufferCommit(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        commit_lsn: XLogRecPtr,
        end_lsn: XLogRecPtr,
        commit_time: TimestampTz,
        origin_id: RepOriginId,
        origin_lsn: XLogRecPtr,
    );
}
extern "C" {
    pub fn ReorderBufferAssignChild(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        arg3: TransactionId,
        commit_lsn: XLogRecPtr,
    );
}
extern "C" {
    pub fn ReorderBufferCommitChild(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        arg3: TransactionId,
        commit_lsn: XLogRecPtr,
        end_lsn: XLogRecPtr,
    );
}
extern "C" {
    pub fn ReorderBufferAbort(arg1: *mut ReorderBuffer, arg2: TransactionId, lsn: XLogRecPtr);
}
extern "C" {
    pub fn ReorderBufferAbortOld(arg1: *mut ReorderBuffer, xid: TransactionId);
}
extern "C" {
    pub fn ReorderBufferForget(arg1: *mut ReorderBuffer, arg2: TransactionId, lsn: XLogRecPtr);
}
extern "C" {
    pub fn ReorderBufferSetBaseSnapshot(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        lsn: XLogRecPtr,
        snap: *mut SnapshotData,
    );
}
extern "C" {
    pub fn ReorderBufferAddSnapshot(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        lsn: XLogRecPtr,
        snap: *mut SnapshotData,
    );
}
extern "C" {
    pub fn ReorderBufferAddNewCommandId(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        lsn: XLogRecPtr,
        cid: CommandId,
    );
}
extern "C" {
    pub fn ReorderBufferAddNewTupleCids(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        lsn: XLogRecPtr,
        node: RelFileNode,
        pt: ItemPointerData,
        cmin: CommandId,
        cmax: CommandId,
        combocid: CommandId,
    );
}
extern "C" {
    pub fn ReorderBufferAddInvalidations(
        arg1: *mut ReorderBuffer,
        arg2: TransactionId,
        lsn: XLogRecPtr,
        nmsgs: Size,
        msgs: *mut SharedInvalidationMessage,
    );
}
extern "C" {
    pub fn ReorderBufferImmediateInvalidation(
        arg1: *mut ReorderBuffer,
        ninvalidations: uint32,
        invalidations: *mut SharedInvalidationMessage,
    );
}
extern "C" {
    pub fn ReorderBufferProcessXid(arg1: *mut ReorderBuffer, xid: TransactionId, lsn: XLogRecPtr);
}
extern "C" {
    pub fn ReorderBufferXidSetCatalogChanges(
        arg1: *mut ReorderBuffer,
        xid: TransactionId,
        lsn: XLogRecPtr,
    );
}
extern "C" {
    pub fn ReorderBufferXidHasCatalogChanges(arg1: *mut ReorderBuffer, xid: TransactionId) -> bool;
}
extern "C" {
    pub fn ReorderBufferXidHasBaseSnapshot(arg1: *mut ReorderBuffer, xid: TransactionId) -> bool;
}
extern "C" {
    pub fn ReorderBufferGetOldestTXN(arg1: *mut ReorderBuffer) -> *mut ReorderBufferTXN;
}
extern "C" {
    pub fn ReorderBufferGetOldestXmin(rb: *mut ReorderBuffer) -> TransactionId;
}
extern "C" {
    pub fn ReorderBufferSetRestartPoint(arg1: *mut ReorderBuffer, ptr: XLogRecPtr);
}
extern "C" {
    pub fn StartupReorderBuffer();
}
pub const OutputPluginOutputType_OUTPUT_PLUGIN_BINARY_OUTPUT: OutputPluginOutputType = 0;
pub const OutputPluginOutputType_OUTPUT_PLUGIN_TEXTUAL_OUTPUT: OutputPluginOutputType = 1;
pub type OutputPluginOutputType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OutputPluginOptions {
    pub output_type: OutputPluginOutputType,
    pub receive_rewrites: bool,
}
#[test]
fn bindgen_test_layout_OutputPluginOptions() {
    assert_eq!(
        ::std::mem::size_of::<OutputPluginOptions>(),
        8usize,
        concat!("Size of: ", stringify!(OutputPluginOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OutputPluginOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(OutputPluginOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OutputPluginOptions>())).output_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginOptions),
            "::",
            stringify!(output_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OutputPluginOptions>())).receive_rewrites as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginOptions),
            "::",
            stringify!(receive_rewrites)
        )
    );
}
pub type LogicalOutputPluginInit =
    ::std::option::Option<unsafe extern "C" fn(cb: *mut OutputPluginCallbacks)>;
pub type LogicalDecodeStartupCB = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut LogicalDecodingContext,
        options: *mut OutputPluginOptions,
        is_init: bool,
    ),
>;
pub type LogicalDecodeBeginCB = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut LogicalDecodingContext, txn: *mut ReorderBufferTXN),
>;
pub type LogicalDecodeChangeCB = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut LogicalDecodingContext,
        txn: *mut ReorderBufferTXN,
        relation: Relation,
        change: *mut ReorderBufferChange,
    ),
>;
pub type LogicalDecodeTruncateCB = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut LogicalDecodingContext,
        txn: *mut ReorderBufferTXN,
        nrelations: ::std::os::raw::c_int,
        relations: *mut Relation,
        change: *mut ReorderBufferChange,
    ),
>;
pub type LogicalDecodeCommitCB = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut LogicalDecodingContext,
        txn: *mut ReorderBufferTXN,
        commit_lsn: XLogRecPtr,
    ),
>;
pub type LogicalDecodeMessageCB = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut LogicalDecodingContext,
        txn: *mut ReorderBufferTXN,
        message_lsn: XLogRecPtr,
        transactional: bool,
        prefix: *const ::std::os::raw::c_char,
        message_size: Size,
        message: *const ::std::os::raw::c_char,
    ),
>;
pub type LogicalDecodeFilterByOriginCB = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut LogicalDecodingContext, origin_id: RepOriginId) -> bool,
>;
pub type LogicalDecodeShutdownCB =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut LogicalDecodingContext)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OutputPluginCallbacks {
    pub startup_cb: LogicalDecodeStartupCB,
    pub begin_cb: LogicalDecodeBeginCB,
    pub change_cb: LogicalDecodeChangeCB,
    pub truncate_cb: LogicalDecodeTruncateCB,
    pub commit_cb: LogicalDecodeCommitCB,
    pub message_cb: LogicalDecodeMessageCB,
    pub filter_by_origin_cb: LogicalDecodeFilterByOriginCB,
    pub shutdown_cb: LogicalDecodeShutdownCB,
}
#[test]
fn bindgen_test_layout_OutputPluginCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<OutputPluginCallbacks>(),
        64usize,
        concat!("Size of: ", stringify!(OutputPluginCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<OutputPluginCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(OutputPluginCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OutputPluginCallbacks>())).startup_cb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginCallbacks),
            "::",
            stringify!(startup_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OutputPluginCallbacks>())).begin_cb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginCallbacks),
            "::",
            stringify!(begin_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OutputPluginCallbacks>())).change_cb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginCallbacks),
            "::",
            stringify!(change_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OutputPluginCallbacks>())).truncate_cb as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginCallbacks),
            "::",
            stringify!(truncate_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OutputPluginCallbacks>())).commit_cb as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginCallbacks),
            "::",
            stringify!(commit_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OutputPluginCallbacks>())).message_cb as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginCallbacks),
            "::",
            stringify!(message_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OutputPluginCallbacks>())).filter_by_origin_cb as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginCallbacks),
            "::",
            stringify!(filter_by_origin_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OutputPluginCallbacks>())).shutdown_cb as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OutputPluginCallbacks),
            "::",
            stringify!(shutdown_cb)
        )
    );
}
extern "C" {
    pub fn OutputPluginPrepareWrite(ctx: *mut LogicalDecodingContext, last_write: bool);
}
extern "C" {
    pub fn OutputPluginWrite(ctx: *mut LogicalDecodingContext, last_write: bool);
}
extern "C" {
    pub fn OutputPluginUpdateProgress(ctx: *mut LogicalDecodingContext);
}
pub const ReplicationSlotPersistency_RS_PERSISTENT: ReplicationSlotPersistency = 0;
pub const ReplicationSlotPersistency_RS_EPHEMERAL: ReplicationSlotPersistency = 1;
pub const ReplicationSlotPersistency_RS_TEMPORARY: ReplicationSlotPersistency = 2;
pub type ReplicationSlotPersistency = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReplicationSlotPersistentData {
    pub name: NameData,
    pub database: Oid,
    pub persistency: ReplicationSlotPersistency,
    pub xmin: TransactionId,
    pub catalog_xmin: TransactionId,
    pub restart_lsn: XLogRecPtr,
    pub confirmed_flush: XLogRecPtr,
    pub plugin: NameData,
}
#[test]
fn bindgen_test_layout_ReplicationSlotPersistentData() {
    assert_eq!(
        ::std::mem::size_of::<ReplicationSlotPersistentData>(),
        160usize,
        concat!("Size of: ", stringify!(ReplicationSlotPersistentData))
    );
    assert_eq!(
        ::std::mem::align_of::<ReplicationSlotPersistentData>(),
        8usize,
        concat!("Alignment of ", stringify!(ReplicationSlotPersistentData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotPersistentData>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotPersistentData),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotPersistentData>())).database as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotPersistentData),
            "::",
            stringify!(database)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotPersistentData>())).persistency as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotPersistentData),
            "::",
            stringify!(persistency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotPersistentData>())).xmin as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotPersistentData),
            "::",
            stringify!(xmin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotPersistentData>())).catalog_xmin as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotPersistentData),
            "::",
            stringify!(catalog_xmin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotPersistentData>())).restart_lsn as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotPersistentData),
            "::",
            stringify!(restart_lsn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotPersistentData>())).confirmed_flush as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotPersistentData),
            "::",
            stringify!(confirmed_flush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotPersistentData>())).plugin as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotPersistentData),
            "::",
            stringify!(plugin)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReplicationSlot {
    pub mutex: slock_t,
    pub in_use: bool,
    pub active_pid: pid_t,
    pub just_dirtied: bool,
    pub dirty: bool,
    pub effective_xmin: TransactionId,
    pub effective_catalog_xmin: TransactionId,
    pub data: ReplicationSlotPersistentData,
    pub io_in_progress_lock: LWLock,
    pub active_cv: ConditionVariable,
    pub candidate_catalog_xmin: TransactionId,
    pub candidate_xmin_lsn: XLogRecPtr,
    pub candidate_restart_valid: XLogRecPtr,
    pub candidate_restart_lsn: XLogRecPtr,
}
#[test]
fn bindgen_test_layout_ReplicationSlot() {
    assert_eq!(
        ::std::mem::size_of::<ReplicationSlot>(),
        240usize,
        concat!("Size of: ", stringify!(ReplicationSlot))
    );
    assert_eq!(
        ::std::mem::align_of::<ReplicationSlot>(),
        8usize,
        concat!("Alignment of ", stringify!(ReplicationSlot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicationSlot>())).mutex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicationSlot>())).in_use as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(in_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicationSlot>())).active_pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(active_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicationSlot>())).just_dirtied as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(just_dirtied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicationSlot>())).dirty as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(dirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicationSlot>())).effective_xmin as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(effective_xmin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlot>())).effective_catalog_xmin as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(effective_catalog_xmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicationSlot>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlot>())).io_in_progress_lock as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(io_in_progress_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicationSlot>())).active_cv as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(active_cv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlot>())).candidate_catalog_xmin as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(candidate_catalog_xmin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlot>())).candidate_xmin_lsn as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(candidate_xmin_lsn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlot>())).candidate_restart_valid as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(candidate_restart_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlot>())).candidate_restart_lsn as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlot),
            "::",
            stringify!(candidate_restart_lsn)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReplicationSlotCtlData {
    pub replication_slots: [ReplicationSlot; 1usize],
}
#[test]
fn bindgen_test_layout_ReplicationSlotCtlData() {
    assert_eq!(
        ::std::mem::size_of::<ReplicationSlotCtlData>(),
        240usize,
        concat!("Size of: ", stringify!(ReplicationSlotCtlData))
    );
    assert_eq!(
        ::std::mem::align_of::<ReplicationSlotCtlData>(),
        8usize,
        concat!("Alignment of ", stringify!(ReplicationSlotCtlData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicationSlotCtlData>())).replication_slots as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicationSlotCtlData),
            "::",
            stringify!(replication_slots)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}ReplicationSlotCtl"]
    pub static mut ReplicationSlotCtl: *mut ReplicationSlotCtlData;
}
extern "C" {
    #[link_name = "\u{1}MyReplicationSlot"]
    pub static mut MyReplicationSlot: *mut ReplicationSlot;
}
extern "C" {
    #[link_name = "\u{1}max_replication_slots"]
    pub static mut max_replication_slots: ::std::os::raw::c_int;
}
extern "C" {
    pub fn ReplicationSlotsShmemSize() -> Size;
}
extern "C" {
    pub fn ReplicationSlotsShmemInit();
}
extern "C" {
    pub fn ReplicationSlotCreate(
        name: *const ::std::os::raw::c_char,
        db_specific: bool,
        p: ReplicationSlotPersistency,
    );
}
extern "C" {
    pub fn ReplicationSlotPersist();
}
extern "C" {
    pub fn ReplicationSlotDrop(name: *const ::std::os::raw::c_char, nowait: bool);
}
extern "C" {
    pub fn ReplicationSlotAcquire(name: *const ::std::os::raw::c_char, nowait: bool);
}
extern "C" {
    pub fn ReplicationSlotRelease();
}
extern "C" {
    pub fn ReplicationSlotCleanup();
}
extern "C" {
    pub fn ReplicationSlotSave();
}
extern "C" {
    pub fn ReplicationSlotMarkDirty();
}
extern "C" {
    pub fn ReplicationSlotValidateName(
        name: *const ::std::os::raw::c_char,
        elevel: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ReplicationSlotReserveWal();
}
extern "C" {
    pub fn ReplicationSlotsComputeRequiredXmin(already_locked: bool);
}
extern "C" {
    pub fn ReplicationSlotsComputeRequiredLSN();
}
extern "C" {
    pub fn ReplicationSlotsComputeLogicalRestartLSN() -> XLogRecPtr;
}
extern "C" {
    pub fn ReplicationSlotsCountDBSlots(
        dboid: Oid,
        nslots: *mut ::std::os::raw::c_int,
        nactive: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ReplicationSlotsDropDBSlots(dboid: Oid);
}
extern "C" {
    pub fn StartupReplicationSlots();
}
extern "C" {
    pub fn CheckPointReplicationSlots();
}
extern "C" {
    pub fn CheckSlotRequirements();
}
pub type LogicalOutputPluginWriterWrite = ::std::option::Option<
    unsafe extern "C" fn(
        lr: *mut LogicalDecodingContext,
        Ptr: XLogRecPtr,
        xid: TransactionId,
        last_write: bool,
    ),
>;
pub type LogicalOutputPluginWriterPrepareWrite = LogicalOutputPluginWriterWrite;
pub type LogicalOutputPluginWriterUpdateProgress = ::std::option::Option<
    unsafe extern "C" fn(lr: *mut LogicalDecodingContext, Ptr: XLogRecPtr, xid: TransactionId),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LogicalDecodingContext {
    pub context: MemoryContext,
    pub slot: *mut ReplicationSlot,
    pub reader: *mut XLogReaderState,
    pub reorder: *mut ReorderBuffer,
    pub snapshot_builder: *mut SnapBuild,
    pub fast_forward: bool,
    pub callbacks: OutputPluginCallbacks,
    pub options: OutputPluginOptions,
    pub output_plugin_options: *mut List,
    pub prepare_write: LogicalOutputPluginWriterPrepareWrite,
    pub write: LogicalOutputPluginWriterWrite,
    pub update_progress: LogicalOutputPluginWriterUpdateProgress,
    pub out: StringInfo,
    pub output_plugin_private: *mut ::std::os::raw::c_void,
    pub output_writer_private: *mut ::std::os::raw::c_void,
    pub accept_writes: bool,
    pub prepared_write: bool,
    pub write_location: XLogRecPtr,
    pub write_xid: TransactionId,
}
#[test]
fn bindgen_test_layout_LogicalDecodingContext() {
    assert_eq!(
        ::std::mem::size_of::<LogicalDecodingContext>(),
        200usize,
        concat!("Size of: ", stringify!(LogicalDecodingContext))
    );
    assert_eq!(
        ::std::mem::align_of::<LogicalDecodingContext>(),
        8usize,
        concat!("Alignment of ", stringify!(LogicalDecodingContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicalDecodingContext>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicalDecodingContext>())).slot as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicalDecodingContext>())).reader as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(reader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicalDecodingContext>())).reorder as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(reorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).snapshot_builder as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(snapshot_builder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).fast_forward as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(fast_forward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).callbacks as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(callbacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicalDecodingContext>())).options as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).output_plugin_options as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(output_plugin_options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).prepare_write as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(prepare_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicalDecodingContext>())).write as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).update_progress as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(update_progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicalDecodingContext>())).out as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).output_plugin_private as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(output_plugin_private)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).output_writer_private as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(output_writer_private)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).accept_writes as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(accept_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).prepared_write as *const _ as usize
        },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(prepared_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).write_location as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(write_location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LogicalDecodingContext>())).write_xid as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicalDecodingContext),
            "::",
            stringify!(write_xid)
        )
    );
}
extern "C" {
    pub fn CheckLogicalDecodingRequirements();
}
extern "C" {
    pub fn CreateInitDecodingContext(
        plugin: *mut ::std::os::raw::c_char,
        output_plugin_options: *mut List,
        need_full_snapshot: bool,
        read_page: XLogPageReadCB,
        prepare_write: LogicalOutputPluginWriterPrepareWrite,
        do_write: LogicalOutputPluginWriterWrite,
        update_progress: LogicalOutputPluginWriterUpdateProgress,
    ) -> *mut LogicalDecodingContext;
}
extern "C" {
    pub fn CreateDecodingContext(
        start_lsn: XLogRecPtr,
        output_plugin_options: *mut List,
        fast_forward: bool,
        read_page: XLogPageReadCB,
        prepare_write: LogicalOutputPluginWriterPrepareWrite,
        do_write: LogicalOutputPluginWriterWrite,
        update_progress: LogicalOutputPluginWriterUpdateProgress,
    ) -> *mut LogicalDecodingContext;
}
extern "C" {
    pub fn DecodingContextFindStartpoint(ctx: *mut LogicalDecodingContext);
}
extern "C" {
    pub fn DecodingContextReady(ctx: *mut LogicalDecodingContext) -> bool;
}
extern "C" {
    pub fn FreeDecodingContext(ctx: *mut LogicalDecodingContext);
}
extern "C" {
    pub fn LogicalIncreaseXminForSlot(lsn: XLogRecPtr, xmin: TransactionId);
}
extern "C" {
    pub fn LogicalIncreaseRestartDecodingForSlot(current_lsn: XLogRecPtr, restart_lsn: XLogRecPtr);
}
extern "C" {
    pub fn LogicalConfirmReceivedLocation(lsn: XLogRecPtr);
}
extern "C" {
    pub fn filter_by_origin_cb_wrapper(
        ctx: *mut LogicalDecodingContext,
        origin_id: RepOriginId,
    ) -> bool;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MemoryContextData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ResourceOwnerData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JitContext {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JitInstrumentation {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SharedJitInstrumentation {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PartitionTupleRouting {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TransitionCaptureState {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binaryheap {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TsmRoutine {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TableFuncRoutine {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WindowObjectData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParallelExecutorInfo {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TupleQueueReader {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SMgrRelationData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RowSecurityDesc {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PgStat_TableStatus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SnapBuild {
    pub _address: u8,
}
